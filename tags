!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/7859817/
"ImportError: dynamic module does not define init function"	src/pybind11/docs/faq.rst	/^"ImportError: dynamic module does not define init function"$/;"	s	chapter:Frequently asked questions
"Symbol not found: ``__Py_ZeroStruct`` / ``_PyInstanceMethod_Type``"	src/pybind11/docs/faq.rst	/^"Symbol not found: ``__Py_ZeroStruct`` \/ ``_PyInstanceMethod_Type``"$/;"	s	chapter:Frequently asked questions
"SystemError: dynamic module not initialized properly"	src/pybind11/docs/faq.rst	/^"SystemError: dynamic module not initialized properly"$/;"	s	chapter:Frequently asked questions
"recursive template instantiation exceeded maximum depth of 256"	src/pybind11/docs/faq.rst	/^"recursive template instantiation exceeded maximum depth of 256"$/;"	s	chapter:Frequently asked questions
$(VERBOSE).SILENT	build_elka_data_collection/Makefile	/^$(VERBOSE).SILENT:$/;"	t
$(VERBOSE).SILENT	build_elka_data_collection/msg/Makefile	/^$(VERBOSE).SILENT:$/;"	t
$(VERBOSE).SILENT	build_elka_data_collection/src/Makefile	/^$(VERBOSE).SILENT:$/;"	t
$(VERBOSE).SILENT	build_elka_data_collection/src/elka_comm/common/Makefile	/^$(VERBOSE).SILENT:$/;"	t
$(VERBOSE).SILENT	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^$(VERBOSE).SILENT:$/;"	t
$(VERBOSE).SILENT	build_elka_data_collection/src/pybind11/Makefile	/^$(VERBOSE).SILENT:$/;"	t
.rst-content table.docutils td	src/pybind11/docs/_static/theme_overrides.css	/^.rst-content table.docutils td {$/;"	s
.wy-table-responsive table td	src/pybind11/docs/_static/theme_overrides.css	/^.wy-table-responsive table td,$/;"	s
.wy-table-responsive table th	src/pybind11/docs/_static/theme_overrides.css	/^.wy-table-responsive table th {$/;"	s
0.4.11 (2012-12-21)	tools/gencpp/CHANGELOG.rst	/^0.4.11 (2012-12-21)$/;"	s	chapter:Changelog for package gencpp
0.4.12 (2013-03-08)	tools/gencpp/CHANGELOG.rst	/^0.4.12 (2013-03-08)$/;"	s	chapter:Changelog for package gencpp
0.4.13 (2013-06-18)	tools/gencpp/CHANGELOG.rst	/^0.4.13 (2013-06-18)$/;"	s	chapter:Changelog for package gencpp
0.4.14 (2013-08-21)	tools/gencpp/CHANGELOG.rst	/^0.4.14 (2013-08-21)$/;"	s	chapter:Changelog for package gencpp
0.4.15 (2012-12-21)	tools/genmsg/CHANGELOG.rst	/^0.4.15 (2012-12-21)$/;"	s	chapter:Changelog for package genmsg
0.4.15 (2014-01-07)	tools/gencpp/CHANGELOG.rst	/^0.4.15 (2014-01-07)$/;"	s	chapter:Changelog for package gencpp
0.4.16 (2013-01-13)	tools/genmsg/CHANGELOG.rst	/^0.4.16 (2013-01-13)$/;"	s	chapter:Changelog for package genmsg
0.4.16 (2014-01-27)	tools/gencpp/CHANGELOG.rst	/^0.4.16 (2014-01-27)$/;"	s	chapter:Changelog for package gencpp
0.4.17 (2013-01-19)	tools/genmsg/CHANGELOG.rst	/^0.4.17 (2013-01-19)$/;"	s	chapter:Changelog for package genmsg
0.4.18 (2013-03-08)	tools/genmsg/CHANGELOG.rst	/^0.4.18 (2013-03-08)$/;"	s	chapter:Changelog for package genmsg
0.4.19 (2013-06-06)	tools/genmsg/CHANGELOG.rst	/^0.4.19 (2013-06-06)$/;"	s	chapter:Changelog for package genmsg
0.4.20 (2013-06-18)	tools/genmsg/CHANGELOG.rst	/^0.4.20 (2013-06-18)$/;"	s	chapter:Changelog for package genmsg
0.4.21 (2013-07-03)	tools/genmsg/CHANGELOG.rst	/^0.4.21 (2013-07-03)$/;"	s	chapter:Changelog for package genmsg
0.4.22 (2013-08-21)	tools/genmsg/CHANGELOG.rst	/^0.4.22 (2013-08-21)$/;"	s	chapter:Changelog for package genmsg
0.4.23 (2013-09-17)	tools/genmsg/CHANGELOG.rst	/^0.4.23 (2013-09-17)$/;"	s	chapter:Changelog for package genmsg
0.4.24 (2014-01-07)	tools/genmsg/CHANGELOG.rst	/^0.4.24 (2014-01-07)$/;"	s	chapter:Changelog for package genmsg
0.5.0 (2014-01-29)	tools/gencpp/CHANGELOG.rst	/^0.5.0 (2014-01-29)$/;"	s	chapter:Changelog for package gencpp
0.5.0 (2014-02-25)	tools/genmsg/CHANGELOG.rst	/^0.5.0 (2014-02-25)$/;"	s	chapter:Changelog for package genmsg
0.5.1 (2014-02-24)	tools/gencpp/CHANGELOG.rst	/^0.5.1 (2014-02-24)$/;"	s	chapter:Changelog for package gencpp
0.5.1 (2014-03-04)	tools/genmsg/CHANGELOG.rst	/^0.5.1 (2014-03-04)$/;"	s	chapter:Changelog for package genmsg
0.5.2 (2014-05-07)	tools/gencpp/CHANGELOG.rst	/^0.5.2 (2014-05-07)$/;"	s	chapter:Changelog for package gencpp
0.5.2 (2014-05-07)	tools/genmsg/CHANGELOG.rst	/^0.5.2 (2014-05-07)$/;"	s	chapter:Changelog for package genmsg
0.5.3 (2014-07-10)	tools/genmsg/CHANGELOG.rst	/^0.5.3 (2014-07-10)$/;"	s	chapter:Changelog for package genmsg
0.5.3 (2014-12-22)	tools/gencpp/CHANGELOG.rst	/^0.5.3 (2014-12-22)$/;"	s	chapter:Changelog for package gencpp
0.5.4 (2014-08-18)	tools/genmsg/CHANGELOG.rst	/^0.5.4 (2014-08-18)$/;"	s	chapter:Changelog for package genmsg
0.5.4 (2016-03-14)	tools/gencpp/CHANGELOG.rst	/^0.5.4 (2016-03-14)$/;"	s	chapter:Changelog for package gencpp
0.5.5 (2014-08-18)	tools/genmsg/CHANGELOG.rst	/^0.5.5 (2014-08-18)$/;"	s	chapter:Changelog for package genmsg
0.5.5 (2016-06-27)	tools/gencpp/CHANGELOG.rst	/^0.5.5 (2016-06-27)$/;"	s	chapter:Changelog for package gencpp
0.5.6 (2014-10-13)	tools/genmsg/CHANGELOG.rst	/^0.5.6 (2014-10-13)$/;"	s	chapter:Changelog for package genmsg
0.5.7 (2016-03-04)	tools/genmsg/CHANGELOG.rst	/^0.5.7 (2016-03-04)$/;"	s	chapter:Changelog for package genmsg
0.5.8 (2016-09-02)	tools/genmsg/CHANGELOG.rst	/^0.5.8 (2016-09-02)$/;"	s	chapter:Changelog for package genmsg
1.0 (October 15, 2015)	src/pybind11/docs/changelog.rst	/^1.0 (October 15, 2015)$/;"	s	chapter:Changelog
1.1 (December 7, 2015)	src/pybind11/docs/changelog.rst	/^1.1 (December 7, 2015)$/;"	s	chapter:Changelog
1.2 (February 7, 2016)	src/pybind11/docs/changelog.rst	/^1.2 (February 7, 2016)$/;"	s	chapter:Changelog
1.3 (March 8, 2016)	src/pybind11/docs/changelog.rst	/^1.3 (March 8, 2016)$/;"	s	chapter:Changelog
1.4 (April 7, 2016)	src/pybind11/docs/changelog.rst	/^1.4 (April 7, 2016)$/;"	s	chapter:Changelog
1.5 (April 21, 2016)	src/pybind11/docs/changelog.rst	/^1.5 (April 21, 2016)$/;"	s	chapter:Changelog
1.6 (April 30, 2016)	src/pybind11/docs/changelog.rst	/^1.6 (April 30, 2016)$/;"	s	chapter:Changelog
1.7 (April 30, 2016)	src/pybind11/docs/changelog.rst	/^1.7 (April 30, 2016)$/;"	s	chapter:Changelog
1.8.0 (June 14, 2016)	src/pybind11/docs/changelog.rst	/^1.8.0 (June 14, 2016)$/;"	s	chapter:Changelog
1.8.1 (July 12, 2016)	src/pybind11/docs/changelog.rst	/^1.8.1 (July 12, 2016)$/;"	s	chapter:Changelog
A	src/pybind11/include/pybind11/common.h	/^template <typename C, typename R, typename... A> struct remove_class<R (C::*)(A...) const> { typ/;"	t	struct:remove_class	typeref:typename:R type (...)
A	src/pybind11/include/pybind11/common.h	/^template <typename C, typename R, typename... A> struct remove_class<R (C::*)(A...)> { typedef R/;"	t	struct:remove_class	typeref:typename:R type (...)
A	src/pybind11/tests/test_modules.cpp	/^    A(const A&) { print_copy_created(this); }$/;"	f	class:A	file:
A	src/pybind11/tests/test_modules.cpp	/^    A(int v) : v(v) { print_created(this, v); }$/;"	f	class:A	file:
A	src/pybind11/tests/test_modules.cpp	/^class A {$/;"	c	file:
A	src/pybind11/tests/test_numpy_dtypes.cpp	/^enum class E1 : int64_t { A = -1, B = 1 };$/;"	e	enum:int64_t	file:
A	src/pybind11/tests/test_pytypes.py	/^    class A(object):$/;"	c	function:test_str	file:
A	src/pybind11/tests/test_smart_ptr.cpp	/^        A() { print_created(this); }$/;"	f	struct:SharedPtrRef::A	file:
A	src/pybind11/tests/test_smart_ptr.cpp	/^        A(A &&) { print_move_created(this); }$/;"	f	struct:SharedPtrRef::A	file:
A	src/pybind11/tests/test_smart_ptr.cpp	/^        A(const A &) { print_copy_created(this); }$/;"	f	struct:SharedPtrRef::A	file:
A	src/pybind11/tests/test_smart_ptr.cpp	/^    struct A {$/;"	s	struct:SharedPtrRef	file:
A	src/pybind11/tests/test_smart_ptr.cpp	/^    using A = SharedPtrRef::A;$/;"	t	function:__anon0cf8aa410302	typeref:typename:SharedPtrRef::A	file:
A	src/pybind11/tests/test_virtual_functions.cpp	/^        struct A { std::string value = "hi"; };$/;"	s	class:TEST_SUBMODULE::OverrideTest	file:
A	src/pybind11/tests/test_virtual_functions.cpp	/^    struct A {$/;"	s	function:TEST_SUBMODULE	file:
A2	src/pybind11/tests/test_virtual_functions.cpp	/^    struct A2 {$/;"	s	function:TEST_SUBMODULE	file:
ACK_ACCEPTED	build_elka_data_collection/inc/uORB/topics/elka_msg_ack.h	/^	static const uint8_t ACK_ACCEPTED = 1;$/;"	m	struct:elka_msg_ack_s	typeref:typename:const uint8_t
ACK_ACCEPTED	build_elka_data_collection/inc/uORB/topics/elka_msg_ack.h	/^#define ACK_ACCEPTED /;"	d
ACK_ACCEPTED	build_elka_data_collection/topics_temporary_header/elka_msg_ack.h	/^	static const uint8_t ACK_ACCEPTED = 1;$/;"	m	struct:elka_msg_ack_s	typeref:typename:const uint8_t
ACK_ACCEPTED	build_elka_data_collection/topics_temporary_header/elka_msg_ack.h	/^#define ACK_ACCEPTED /;"	d
ACK_DENIED	build_elka_data_collection/inc/uORB/topics/elka_msg_ack.h	/^	static const uint8_t ACK_DENIED = 2;$/;"	m	struct:elka_msg_ack_s	typeref:typename:const uint8_t
ACK_DENIED	build_elka_data_collection/inc/uORB/topics/elka_msg_ack.h	/^#define ACK_DENIED /;"	d
ACK_DENIED	build_elka_data_collection/topics_temporary_header/elka_msg_ack.h	/^	static const uint8_t ACK_DENIED = 2;$/;"	m	struct:elka_msg_ack_s	typeref:typename:const uint8_t
ACK_DENIED	build_elka_data_collection/topics_temporary_header/elka_msg_ack.h	/^#define ACK_DENIED /;"	d
ACK_FAILED	build_elka_data_collection/inc/uORB/topics/elka_msg_ack.h	/^	static const uint8_t ACK_FAILED = 4;$/;"	m	struct:elka_msg_ack_s	typeref:typename:const uint8_t
ACK_FAILED	build_elka_data_collection/inc/uORB/topics/elka_msg_ack.h	/^#define ACK_FAILED /;"	d
ACK_FAILED	build_elka_data_collection/topics_temporary_header/elka_msg_ack.h	/^	static const uint8_t ACK_FAILED = 4;$/;"	m	struct:elka_msg_ack_s	typeref:typename:const uint8_t
ACK_FAILED	build_elka_data_collection/topics_temporary_header/elka_msg_ack.h	/^#define ACK_FAILED /;"	d
ACK_LEN	build_elka_data_collection/inc/uORB/topics/elka_msg_ack.h	/^	static const uint8_t ACK_LEN = 8;$/;"	m	struct:elka_msg_ack_s	typeref:typename:const uint8_t
ACK_LEN	build_elka_data_collection/inc/uORB/topics/elka_msg_ack.h	/^#define ACK_LEN /;"	d
ACK_LEN	build_elka_data_collection/topics_temporary_header/elka_msg_ack.h	/^	static const uint8_t ACK_LEN = 8;$/;"	m	struct:elka_msg_ack_s	typeref:typename:const uint8_t
ACK_LEN	build_elka_data_collection/topics_temporary_header/elka_msg_ack.h	/^#define ACK_LEN /;"	d
ACK_NULL	build_elka_data_collection/inc/uORB/topics/elka_msg_ack.h	/^	static const uint8_t ACK_NULL = 0;$/;"	m	struct:elka_msg_ack_s	typeref:typename:const uint8_t
ACK_NULL	build_elka_data_collection/inc/uORB/topics/elka_msg_ack.h	/^#define ACK_NULL /;"	d
ACK_NULL	build_elka_data_collection/topics_temporary_header/elka_msg_ack.h	/^	static const uint8_t ACK_NULL = 0;$/;"	m	struct:elka_msg_ack_s	typeref:typename:const uint8_t
ACK_NULL	build_elka_data_collection/topics_temporary_header/elka_msg_ack.h	/^#define ACK_NULL /;"	d
ACK_UNSUPPORTED	build_elka_data_collection/inc/uORB/topics/elka_msg_ack.h	/^	static const uint8_t ACK_UNSUPPORTED = 3;$/;"	m	struct:elka_msg_ack_s	typeref:typename:const uint8_t
ACK_UNSUPPORTED	build_elka_data_collection/inc/uORB/topics/elka_msg_ack.h	/^#define ACK_UNSUPPORTED /;"	d
ACK_UNSUPPORTED	build_elka_data_collection/topics_temporary_header/elka_msg_ack.h	/^	static const uint8_t ACK_UNSUPPORTED = 3;$/;"	m	struct:elka_msg_ack_s	typeref:typename:const uint8_t
ACK_UNSUPPORTED	build_elka_data_collection/topics_temporary_header/elka_msg_ack.h	/^#define ACK_UNSUPPORTED /;"	d
ALLSPHINXOPTS	src/pybind11/docs/Makefile	/^ALLSPHINXOPTS   = -d $(BUILDDIR)\/doctrees $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .$/;"	m
ALLSPHINXOPTS	tools/genmsg/doc/Makefile	/^ALLSPHINXOPTS   = -d $(BUILDDIR)\/doctrees $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .$/;"	m
API_PyArrayDescr_Type	src/pybind11/include/pybind11/numpy.h	/^        API_PyArrayDescr_Type = 3,$/;"	e	enum:npy_api::functions
API_PyArray_CopyInto	src/pybind11/include/pybind11/numpy.h	/^        API_PyArray_CopyInto = 82,$/;"	e	enum:npy_api::functions
API_PyArray_DescrConverter	src/pybind11/include/pybind11/numpy.h	/^        API_PyArray_DescrConverter = 174,$/;"	e	enum:npy_api::functions
API_PyArray_DescrFromScalar	src/pybind11/include/pybind11/numpy.h	/^        API_PyArray_DescrFromScalar = 57,$/;"	e	enum:npy_api::functions
API_PyArray_DescrFromType	src/pybind11/include/pybind11/numpy.h	/^        API_PyArray_DescrFromType = 45,$/;"	e	enum:npy_api::functions
API_PyArray_DescrNewFromType	src/pybind11/include/pybind11/numpy.h	/^        API_PyArray_DescrNewFromType = 9,$/;"	e	enum:npy_api::functions
API_PyArray_EquivTypes	src/pybind11/include/pybind11/numpy.h	/^        API_PyArray_EquivTypes = 182,$/;"	e	enum:npy_api::functions
API_PyArray_FromAny	src/pybind11/include/pybind11/numpy.h	/^        API_PyArray_FromAny = 69,$/;"	e	enum:npy_api::functions
API_PyArray_GetArrayParamsFromObject	src/pybind11/include/pybind11/numpy.h	/^        API_PyArray_GetArrayParamsFromObject = 278,$/;"	e	enum:npy_api::functions
API_PyArray_GetNDArrayCFeatureVersion	src/pybind11/include/pybind11/numpy.h	/^        API_PyArray_GetNDArrayCFeatureVersion = 211,$/;"	e	enum:npy_api::functions
API_PyArray_NewCopy	src/pybind11/include/pybind11/numpy.h	/^        API_PyArray_NewCopy = 85,$/;"	e	enum:npy_api::functions
API_PyArray_NewFromDescr	src/pybind11/include/pybind11/numpy.h	/^        API_PyArray_NewFromDescr = 94,$/;"	e	enum:npy_api::functions
API_PyArray_Resize	src/pybind11/include/pybind11/numpy.h	/^        API_PyArray_Resize = 80,$/;"	e	enum:npy_api::functions
API_PyArray_SetBaseObject	src/pybind11/include/pybind11/numpy.h	/^        API_PyArray_SetBaseObject = 282$/;"	e	enum:npy_api::functions
API_PyArray_Squeeze	src/pybind11/include/pybind11/numpy.h	/^        API_PyArray_Squeeze = 136,$/;"	e	enum:npy_api::functions
API_PyArray_Type	src/pybind11/include/pybind11/numpy.h	/^        API_PyArray_Type = 2,$/;"	e	enum:npy_api::functions
API_PyVoidArrType_Type	src/pybind11/include/pybind11/numpy.h	/^        API_PyVoidArrType_Type = 39,$/;"	e	enum:npy_api::functions
AR	src/pybind11/tests/test_virtual_functions.py	/^    class AR(m.A_Repeat):$/;"	c	function:test_inheriting_repeat	file:
ARCHITECTURE_ID	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdC/CMakeCCompilerId.c	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	file:
ARRAY	src/elka_comm/common/elka.h	/^#define ARRAY /;"	d
AT	src/pybind11/tests/test_virtual_functions.py	/^    class AT(m.A_Tpl):$/;"	c	function:test_inheriting_repeat	file:
A_METHODS	src/pybind11/tests/test_virtual_functions.cpp	/^#define A_METHODS /;"	d	file:
A_Repeat	src/pybind11/tests/test_virtual_functions.cpp	/^class A_Repeat {$/;"	c	file:
A_Tpl	src/pybind11/tests/test_virtual_functions.cpp	/^class A_Tpl { A_METHODS };$/;"	c	file:
A_ref	src/pybind11/tests/test_virtual_functions.cpp	/^        A &A_ref() override { PYBIND11_OVERLOAD(A &, OverrideTest, A_ref); }$/;"	f	class:TEST_SUBMODULE::PyOverrideTest	typeref:typename:A &	file:
A_ref	src/pybind11/tests/test_virtual_functions.cpp	/^        virtual A &A_ref() { return a; }$/;"	f	class:TEST_SUBMODULE::OverrideTest	typeref:typename:A &	file:
A_value	src/pybind11/tests/test_virtual_functions.cpp	/^        A A_value() override { PYBIND11_OVERLOAD(A, OverrideTest, A_value); }$/;"	f	class:TEST_SUBMODULE::PyOverrideTest	typeref:typename:A	file:
A_value	src/pybind11/tests/test_virtual_functions.cpp	/^        virtual A A_value() { return a; }$/;"	f	class:TEST_SUBMODULE::OverrideTest	typeref:typename:A	file:
About this project	src/pybind11/docs/intro.rst	/^About this project$/;"	c
AbstractBase	src/pybind11/tests/test_callbacks.cpp	/^class AbstractBase {$/;"	c	file:
Accepting \\*args and \\*\\*kwargs	src/pybind11/docs/advanced/functions.rst	/^Accepting \\*args and \\*\\*kwargs$/;"	s	chapter:Functions
AccessSpecifier	src/pybind11/tools/clang/cindex.py	/^class AccessSpecifier(BaseEnumeration):$/;"	c
Adapted	src/pybind11/tests/test_methods_and_attributes.cpp	/^    using Adapted = decltype(py::method_adaptor<RegisteredDerived>(&RegisteredDerived::do_nothin/;"	t	function:__anon943d96910102	file:
Adding embedded modules	src/pybind11/docs/advanced/embedding.rst	/^Adding embedded modules$/;"	s	chapter:Embedding the interpreter
Additional call policies	src/pybind11/docs/advanced/functions.rst	/^Additional call policies$/;"	s	chapter:Functions
Advanced: interface library target	src/pybind11/docs/compiling.rst	/^Advanced: interface library target$/;"	S	section:Building with CMake
Alias	src/pybind11/include/pybind11/pybind11.h	/^        using Alias = typename Class::type_alias;$/;"	t	function:init::execute	typeref:typename:Class::type_alias
Alias	src/pybind11/include/pybind11/pybind11.h	/^        using Alias = typename Class::type_alias;$/;"	t	function:init_alias::execute	typeref:typename:Class::type_alias
Allow/Prohibiting None arguments	src/pybind11/docs/advanced/functions.rst	/^Allow\/Prohibiting None arguments$/;"	s	chapter:Functions
An overview of clocks in C++11	src/pybind11/docs/advanced/cast/chrono.rst	/^An overview of clocks in C++11$/;"	s	chapter:Chrono
ArgAlwaysConverts	src/pybind11/tests/test_methods_and_attributes.cpp	/^class ArgAlwaysConverts { };$/;"	c	file:
ArgInspector	src/pybind11/tests/test_methods_and_attributes.cpp	/^    class ArgInspector {$/;"	c	function:__anon943d96910102	file:
ArgInspector1	src/pybind11/tests/test_methods_and_attributes.cpp	/^class ArgInspector1 { public: std::string arg = "(default arg inspector 1)"; };$/;"	c	file:
ArgInspector2	src/pybind11/tests/test_methods_and_attributes.cpp	/^class ArgInspector2 { public: std::string arg = "(default arg inspector 2)"; };$/;"	c	file:
ArgumentsIterator	src/pybind11/tools/clang/cindex.py	/^        class ArgumentsIterator(collections.Sequence):$/;"	c	member:Type.argument_types	file:
Array	src/pybind11/include/pybind11/eigen.h	/^    using Array = array_t<Scalar, array::forcecast |$/;"	t	struct:type_caster
ArrayClass	src/pybind11/tests/test_numpy_array.cpp	/^        ArrayClass() { py::print("ArrayClass()"); }$/;"	f	struct:__anon9558b93c0102::ArrayClass	file:
ArrayClass	src/pybind11/tests/test_numpy_array.cpp	/^    struct ArrayClass {$/;"	s	function:__anon9558b93c0102	file:
ArrayStruct	src/pybind11/tests/test_numpy_dtypes.cpp	/^struct ArrayStruct {$/;"	s	file:
Arrays	src/pybind11/docs/advanced/pycpp/numpy.rst	/^Arrays$/;"	s	chapter:NumPy
Automatic conversion	src/pybind11/docs/advanced/cast/stl.rst	/^Automatic conversion$/;"	s	chapter:STL containers
Availability	src/pybind11/tools/clang/cindex.py	/^    class Availability:$/;"	c	class:CompletionString
Available wrappers	src/pybind11/docs/advanced/pycpp/object.rst	/^Available wrappers$/;"	s	chapter:Python types
B	src/pybind11/tests/test_modules.cpp	/^    B() { print_default_created(this); }$/;"	f	class:B	file:
B	src/pybind11/tests/test_modules.cpp	/^    B(const B&) { print_copy_created(this); }$/;"	f	class:B	file:
B	src/pybind11/tests/test_modules.cpp	/^class B {$/;"	c	file:
B	src/pybind11/tests/test_numpy_dtypes.cpp	/^enum class E1 : int64_t { A = -1, B = 1 };$/;"	e	enum:int64_t	file:
B	src/pybind11/tests/test_smart_ptr.cpp	/^        B() { print_created(this); }$/;"	f	struct:SharedFromThisRef::B	file:
B	src/pybind11/tests/test_smart_ptr.cpp	/^        B(B &&) : std::enable_shared_from_this<B>() { print_move_created(this); }$/;"	f	struct:SharedFromThisRef::B	file:
B	src/pybind11/tests/test_smart_ptr.cpp	/^        B(const B &) : std::enable_shared_from_this<B>() { print_copy_created(this); }$/;"	f	struct:SharedFromThisRef::B	file:
B	src/pybind11/tests/test_smart_ptr.cpp	/^    struct B : std::enable_shared_from_this<B> {$/;"	s	struct:SharedFromThisRef	file:
B	src/pybind11/tests/test_smart_ptr.cpp	/^    using B = SharedFromThisRef::B;$/;"	t	function:__anon0cf8aa410302	typeref:typename:SharedFromThisRef::B	file:
B	src/pybind11/tests/test_virtual_functions.py	/^    class B(m.A):$/;"	c	function:test_alias_delay_initialization1	file:
B1	src/pybind11/tests/test_multiple_inheritance.py	/^    class B1(object):$/;"	c	function:test_multiple_inheritance_python	file:
B2	src/pybind11/tests/test_multiple_inheritance.py	/^    class B2(B1):$/;"	c	function:test_multiple_inheritance_python	file:
B2	src/pybind11/tests/test_virtual_functions.py	/^    class B2(m.A2):$/;"	c	function:test_alias_delay_initialization2	file:
B3	src/pybind11/tests/test_multiple_inheritance.py	/^    class B3(object):$/;"	c	function:test_multiple_inheritance_python	file:
B4	src/pybind11/tests/test_multiple_inheritance.py	/^    class B4(B3, B2):$/;"	c	function:test_multiple_inheritance_python	file:
BASE_RESOURCE_NAME_LEGAL_CHARS_P	tools/genmsg/src/genmsg/names.py	/^BASE_RESOURCE_NAME_LEGAL_CHARS_P = re.compile('^[A-Za-z][\\w_]*$') #ascii char followed by (alph/;"	v
BROADCAST_MSG_ID	src/elka_comm/common/elka.h	/^#define BROADCAST_MSG_ID /;"	d
BT	src/pybind11/tests/test_virtual_functions.py	/^    class BT(m.B_Tpl):$/;"	c	function:test_inheriting_repeat	file:
BUILDDIR	src/pybind11/docs/Makefile	/^BUILDDIR      = .build$/;"	m
BUILDDIR	tools/genmsg/doc/Makefile	/^BUILDDIR      = _build$/;"	m
BUILTIN_TYPES	tools/genmsg/src/genmsg/msgs.py	/^BUILTIN_TYPES = PRIMITIVE_TYPES + [TIME, DURATION]$/;"	v
B_METHODS	src/pybind11/tests/test_virtual_functions.cpp	/^#define B_METHODS /;"	d	file:
B_Repeat	src/pybind11/tests/test_virtual_functions.cpp	/^class B_Repeat : public A_Repeat {$/;"	c	file:
B_Tpl	src/pybind11/tests/test_virtual_functions.cpp	/^class B_Tpl : public A_Tpl { B_METHODS };$/;"	c	file:
Base	src/pybind11/include/pybind11/operators.h	/^        using Base = typename Class::type;$/;"	t	function:op_::execute	typeref:typename:Class::type
Base	src/pybind11/include/pybind11/operators.h	/^        using Base = typename Class::type;$/;"	t	function:op_::execute_cast	typeref:typename:Class::type
Base	src/pybind11/include/pybind11/pybind11.h	/^        using Base = typename Class::type;$/;"	t	function:init::execute	typeref:typename:Class::type
Base	src/pybind11/include/pybind11/pybind11.h	/^        using Base = typename Class::type;$/;"	t	struct:init	typeref:typename:Class::type
Base	src/pybind11/tests/test_virtual_functions.cpp	/^struct Base {$/;"	s	file:
Base1	src/pybind11/tests/test_multiple_inheritance.cpp	/^    Base1(int i) : i(i) { }$/;"	f	struct:Base1	file:
Base1	src/pybind11/tests/test_multiple_inheritance.cpp	/^struct Base1 {$/;"	s	file:
Base1	src/pybind11/tests/test_multiple_inheritance.py	/^    class Base1:$/;"	c	function:test_multiple_inheritance_mix1	file:
Base12	src/pybind11/tests/test_multiple_inheritance.cpp	/^    Base12(int i, int j) : Base1(i), Base2(j) { }$/;"	f	struct:Base12	file:
Base12	src/pybind11/tests/test_multiple_inheritance.cpp	/^struct Base12 : Base1, Base2 {$/;"	s	file:
Base12a	src/pybind11/tests/test_multiple_inheritance.cpp	/^    Base12a(int i, int j) : Base1a(i), Base2a(j) { }$/;"	f	struct:Base12a	file:
Base12a	src/pybind11/tests/test_multiple_inheritance.cpp	/^struct Base12a : Base1a, Base2a {$/;"	s	file:
Base1a	src/pybind11/tests/test_multiple_inheritance.cpp	/^    Base1a(int i) : i(i) { }$/;"	f	struct:Base1a	file:
Base1a	src/pybind11/tests/test_multiple_inheritance.cpp	/^struct Base1a {$/;"	s	file:
Base2	src/pybind11/tests/test_multiple_inheritance.cpp	/^    Base2(int i) : i(i) { }$/;"	f	struct:Base2	file:
Base2	src/pybind11/tests/test_multiple_inheritance.cpp	/^struct Base2 {$/;"	s	file:
Base2	src/pybind11/tests/test_multiple_inheritance.py	/^    class Base2:$/;"	c	function:test_multiple_inheritance_mix2	file:
Base2a	src/pybind11/tests/test_multiple_inheritance.cpp	/^    Base2a(int i) : i(i) { }$/;"	f	struct:Base2a	file:
Base2a	src/pybind11/tests/test_multiple_inheritance.cpp	/^struct Base2a {$/;"	s	file:
BaseClass	src/pybind11/tests/test_class.cpp	/^    struct BaseClass { virtual ~BaseClass() {} };$/;"	s	function:TEST_SUBMODULE	file:
BaseEnumeration	src/pybind11/tools/clang/cindex.py	/^class BaseEnumeration(object):$/;"	c
BaseN	src/pybind11/tests/test_multiple_inheritance.cpp	/^    BaseN(int i) : i(i) { }$/;"	f	struct:BaseN	file:
BaseN	src/pybind11/tests/test_multiple_inheritance.cpp	/^template <int N> struct BaseN {$/;"	s	file:
Benchmark	src/pybind11/docs/benchmark.rst	/^Benchmark$/;"	c
Binding lambda functions	src/pybind11/docs/classes.rst	/^Binding lambda functions$/;"	s	chapter:Object-oriented code
Binding sequence data types, iterators, the slicing protocol, etc.	src/pybind11/docs/advanced/misc.rst	/^Binding sequence data types, iterators, the slicing protocol, etc.$/;"	s	chapter:Miscellaneous
BreaksBase	src/pybind11/tests/test_class.cpp	/^template <int N> class BreaksBase {};$/;"	c	file:
BreaksTramp	src/pybind11/tests/test_class.cpp	/^template <int N> class BreaksTramp : public BreaksBase<N> {};$/;"	c	file:
Buffer protocol	src/pybind11/docs/advanced/pycpp/numpy.rst	/^Buffer protocol$/;"	s	chapter:NumPy
Build systems	src/pybind11/docs/compiling.rst	/^Build systems$/;"	c
Building with CMake	src/pybind11/docs/compiling.rst	/^Building with CMake$/;"	s	chapter:Build systems
Building with cppimport	src/pybind11/docs/compiling.rst	/^Building with cppimport$/;"	s	chapter:Build systems
Building with setuptools	src/pybind11/docs/compiling.rst	/^Building with setuptools$/;"	s	chapter:Build systems
Built-in exception translation	src/pybind11/docs/advanced/exceptions.rst	/^Built-in exception translation$/;"	s	chapter:Exceptions
C	src/pybind11/tests/test_constants_and_functions.cpp	/^struct C {$/;"	s	namespace:test_exc_sp	file:
C	src/pybind11/tests/test_smart_ptr.cpp	/^        C() { print_created(this); }$/;"	f	struct:__anon0cf8aa410302::C	file:
C	src/pybind11/tests/test_smart_ptr.cpp	/^    struct C {$/;"	s	function:__anon0cf8aa410302	file:
C++17 library containers	src/pybind11/docs/advanced/cast/stl.rst	/^C++17 library containers$/;"	s	chapter:STL containers
C++17 string views	src/pybind11/docs/advanced/cast/strings.rst	/^C++17 string views$/;"	s	chapter:Strings, bytes and Unicode conversions
C1	src/pybind11/tests/test_operator_overloading.cpp	/^class C1 { };$/;"	c	file:
C2	src/pybind11/tests/test_operator_overloading.cpp	/^class C2 { };$/;"	c	file:
CATCH_CONFIG_RUNNER	src/pybind11/tests/test_embed/catch.cpp	/^#define CATCH_CONFIG_RUNNER$/;"	d	file:
CCR	src/pybind11/tests/test_virtual_functions.py	/^    class CCR(CR):$/;"	c	function:test_inheriting_repeat	file:
CCRStructure	src/pybind11/tools/clang/cindex.py	/^class CCRStructure(Structure):$/;"	c
CCT	src/pybind11/tests/test_virtual_functions.py	/^    class CCT(CT):$/;"	c	function:test_inheriting_repeat	file:
CHANNEL_VALUE_LENGTH	serial/python/packet.py	/^    CHANNEL_VALUE_LENGTH = 2$/;"	v	class:SpektrumPacket
CHECK_ALIAS	src/pybind11/tests/test_class.cpp	/^#define CHECK_ALIAS(/;"	d	file:
CHECK_BASE	src/pybind11/tests/test_class.cpp	/^#define CHECK_BASE(/;"	d	file:
CHECK_BROKEN	src/pybind11/tests/test_class.cpp	/^#define CHECK_BROKEN(/;"	d	file:
CHECK_HOLDER	src/pybind11/tests/test_class.cpp	/^#define CHECK_HOLDER(/;"	d	file:
CHECK_NOALIAS	src/pybind11/tests/test_class.cpp	/^#define CHECK_NOALIAS(/;"	d	file:
CLIENT	src/elka_comm/gnd_station/inet_comm.h	/^#define CLIENT /;"	d
CLIENT	src/elka_comm/posix/inet_comm.h	/^#define CLIENT /;"	d
CLIENT_SIDE	src/elka_comm/gnd_station/inet_comm.h	/^#define CLIENT_SIDE /;"	d
CLIENT_SIDE	src/elka_comm/posix/inet_comm.h	/^#define CLIENT_SIDE /;"	d
CMAKE_BINARY_DIR	build_elka_data_collection/Makefile	/^CMAKE_BINARY_DIR = \/home\/eric\/Programs\/elka\/elka_data_collection\/build_elka_data_collectio/;"	m
CMAKE_BINARY_DIR	build_elka_data_collection/msg/Makefile	/^CMAKE_BINARY_DIR = \/home\/eric\/Programs\/elka\/elka_data_collection\/build_elka_data_collectio/;"	m
CMAKE_BINARY_DIR	build_elka_data_collection/src/Makefile	/^CMAKE_BINARY_DIR = \/home\/eric\/Programs\/elka\/elka_data_collection\/build_elka_data_collectio/;"	m
CMAKE_BINARY_DIR	build_elka_data_collection/src/elka_comm/common/Makefile	/^CMAKE_BINARY_DIR = \/home\/eric\/Programs\/elka\/elka_data_collection\/build_elka_data_collectio/;"	m
CMAKE_BINARY_DIR	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^CMAKE_BINARY_DIR = \/home\/eric\/Programs\/elka\/elka_data_collection\/build_elka_data_collectio/;"	m
CMAKE_BINARY_DIR	build_elka_data_collection/src/pybind11/Makefile	/^CMAKE_BINARY_DIR = \/home\/eric\/Programs\/elka\/elka_data_collection\/build_elka_data_collectio/;"	m
CMAKE_COMMAND	build_elka_data_collection/Makefile	/^CMAKE_COMMAND = \/opt\/cmake-3.4.3-Linux-x86_64\/bin\/cmake$/;"	m
CMAKE_COMMAND	build_elka_data_collection/msg/Makefile	/^CMAKE_COMMAND = \/opt\/cmake-3.4.3-Linux-x86_64\/bin\/cmake$/;"	m
CMAKE_COMMAND	build_elka_data_collection/src/Makefile	/^CMAKE_COMMAND = \/opt\/cmake-3.4.3-Linux-x86_64\/bin\/cmake$/;"	m
CMAKE_COMMAND	build_elka_data_collection/src/elka_comm/common/Makefile	/^CMAKE_COMMAND = \/opt\/cmake-3.4.3-Linux-x86_64\/bin\/cmake$/;"	m
CMAKE_COMMAND	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^CMAKE_COMMAND = \/opt\/cmake-3.4.3-Linux-x86_64\/bin\/cmake$/;"	m
CMAKE_COMMAND	build_elka_data_collection/src/pybind11/Makefile	/^CMAKE_COMMAND = \/opt\/cmake-3.4.3-Linux-x86_64\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	build_elka_data_collection/Makefile	/^CMAKE_SOURCE_DIR = \/home\/eric\/Programs\/elka\/elka_data_collection$/;"	m
CMAKE_SOURCE_DIR	build_elka_data_collection/msg/Makefile	/^CMAKE_SOURCE_DIR = \/home\/eric\/Programs\/elka\/elka_data_collection$/;"	m
CMAKE_SOURCE_DIR	build_elka_data_collection/src/Makefile	/^CMAKE_SOURCE_DIR = \/home\/eric\/Programs\/elka\/elka_data_collection$/;"	m
CMAKE_SOURCE_DIR	build_elka_data_collection/src/elka_comm/common/Makefile	/^CMAKE_SOURCE_DIR = \/home\/eric\/Programs\/elka\/elka_data_collection$/;"	m
CMAKE_SOURCE_DIR	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^CMAKE_SOURCE_DIR = \/home\/eric\/Programs\/elka\/elka_data_collection$/;"	m
CMAKE_SOURCE_DIR	build_elka_data_collection/src/pybind11/Makefile	/^CMAKE_SOURCE_DIR = \/home\/eric\/Programs\/elka\/elka_data_collection$/;"	m
CMake doesn't detect the right Python version	src/pybind11/docs/faq.rst	/^CMake doesn't detect the right Python version$/;"	s	chapter:Frequently asked questions
COMMENTCHAR	tools/genmsg/src/genmsg/base.py	/^COMMENTCHAR = '#'$/;"	v
COMPILER_ID	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_ID /;"	d	file:
COMPILER_ID	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	file:
COMPILER_VERSION_MAJOR	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MINOR	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_PATCH	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_TWEAK	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
CONSTCHAR	tools/genmsg/src/genmsg/base.py	/^CONSTCHAR   = '='$/;"	v
CPP_OPERATORS	src/pybind11/tools/mkdoc.py	/^CPP_OPERATORS = OrderedDict($/;"	v
CPP_OPERATORS	src/pybind11/tools/mkdoc.py	/^CPP_OPERATORS = {$/;"	v
CR	src/pybind11/tests/test_virtual_functions.py	/^    class CR(m.C_Repeat):$/;"	c	function:test_inheriting_repeat	file:
CT	src/pybind11/tests/test_virtual_functions.py	/^    class CT(m.C_Tpl):$/;"	c	function:test_inheriting_repeat	file:
C_METHODS	src/pybind11/tests/test_virtual_functions.cpp	/^#define C_METHODS /;"	d	file:
C_Repeat	src/pybind11/tests/test_virtual_functions.cpp	/^class C_Repeat : public B_Repeat {$/;"	c	file:
C_Tpl	src/pybind11/tests/test_virtual_functions.cpp	/^class C_Tpl : public B_Tpl { C_METHODS };$/;"	c	file:
CachedProperty	src/pybind11/tools/clang/cindex.py	/^class CachedProperty(object):$/;"	c
Call guard	src/pybind11/docs/advanced/functions.rst	/^Call guard$/;"	S	section:Additional call policies
Callbacks and passing anonymous functions	src/pybind11/docs/advanced/cast/functional.rst	/^Callbacks and passing anonymous functions$/;"	s	chapter:Functional
Calling Python functions	src/pybind11/docs/advanced/pycpp/object.rst	/^Calling Python functions$/;"	s	chapter:Python types
Capture	src/pybind11/tests/conftest.py	/^class Capture(object):$/;"	c
Casting back and forth	src/pybind11/docs/advanced/pycpp/object.rst	/^Casting back and forth$/;"	s	chapter:Python types
Catkin (fuerte)	tools/genmsg/doc/developer.rst	/^Catkin (fuerte)$/;"	s	chapter:Developer documenation
Catkin (groovy)	tools/genmsg/doc/developer.rst	/^Catkin (groovy)$/;"	s	chapter:Developer documenation
Changelog	src/pybind11/docs/changelog.rst	/^Changelog$/;"	c
Changelog for package gencpp	tools/gencpp/CHANGELOG.rst	/^Changelog for package gencpp$/;"	c
Changelog for package genmsg	tools/genmsg/CHANGELOG.rst	/^Changelog for package genmsg$/;"	c
CharT	src/pybind11/include/pybind11/cast.h	/^    using CharT = typename StringType::value_type;$/;"	t	struct:string_caster	typeref:typename:StringType::value_type
Character literals	src/pybind11/docs/advanced/cast/strings.rst	/^Character literals$/;"	s	chapter:Strings, bytes and Unicode conversions
Child	src/elka_comm/gnd_station/inet_comm.h	/^typedef struct Child {$/;"	s
Child	src/elka_comm/gnd_station/inet_comm.h	/^} Child;$/;"	t	typeref:struct:Child
Child	src/elka_comm/posix/inet_comm.h	/^typedef struct Child {$/;"	s
Child	src/elka_comm/posix/inet_comm.h	/^} Child;$/;"	t	typeref:struct:Child
Child	src/pybind11/tests/test_call_policies.cpp	/^    Child() { py::print("Allocating child."); }$/;"	f	class:Child	file:
Child	src/pybind11/tests/test_call_policies.cpp	/^class Child {$/;"	c	file:
ChildDiagnosticsIterator	src/pybind11/tools/clang/cindex.py	/^        class ChildDiagnosticsIterator:$/;"	c	member:Diagnostic.children	file:
Chimera	src/pybind11/tests/test_class.cpp	/^        Chimera() : Pet("Kimmy", "chimera") {}$/;"	f	class:TEST_SUBMODULE::Chimera	file:
Chimera	src/pybind11/tests/test_class.cpp	/^    class Chimera : public Pet {$/;"	c	function:TEST_SUBMODULE	file:
Chrono	src/pybind11/docs/advanced/cast/chrono.rst	/^Chrono$/;"	c
ClangObject	src/pybind11/tools/clang/cindex.py	/^class ClangObject(object):$/;"	c
ClassWithSTLVecProperty	src/pybind11/tests/test_opaque_types.cpp	/^class ClassWithSTLVecProperty {$/;"	c	file:
ClassWithUnscopedEnum	src/pybind11/tests/test_enum.cpp	/^class ClassWithUnscopedEnum {$/;"	c	file:
Class_	src/pybind11/include/pybind11/stl_bind.h	/^    using Class_ = class_<Map, holder_type>;$/;"	t	function:NAMESPACE_END	typeref:typename:class_<Map,holder_type>
Class_	src/pybind11/include/pybind11/stl_bind.h	/^    using Class_ = class_<Vector, holder_type>;$/;"	t	function:NAMESPACE_END	typeref:typename:class_<Vector,holder_type>
Classes	src/pybind11/docs/advanced/classes.rst	/^Classes$/;"	c
Classes	tools/genmsg/doc/python_api.rst	/^Classes$/;"	s	chapter:genmsg Python API
CodeCompletionResult	src/pybind11/tools/clang/cindex.py	/^class CodeCompletionResult(Structure):$/;"	c
CodeCompletionResults	src/pybind11/tools/clang/cindex.py	/^class CodeCompletionResults(ClangObject):$/;"	c
Combining virtual functions and inheritance	src/pybind11/docs/advanced/classes.rst	/^Combining virtual functions and inheritance$/;"	s	chapter:Classes
CommPort	src/elka_comm/common/elka_comm.cpp	/^elka::CommPort::CommPort(uint8_t port_n, uint8_t port_t,$/;"	f	class:elka::CommPort
CommPort	src/elka_comm/common/elka_comm.h	/^struct elka::CommPort {$/;"	s	class:elka
Common member functions	src/pybind11/docs/reference.rst	/^Common member functions$/;"	S	section:Convenience classes for arbitrary Python types
Compare	src/elka_comm/common/elka_comm.h	/^  class Compare {$/;"	c	struct:elka::SerialBuffer
CompareStruct	src/pybind11/tests/test_numpy_dtypes.cpp	/^struct CompareStruct {$/;"	s	file:
Compilation time	src/pybind11/docs/benchmark.rst	/^Compilation time$/;"	s	chapter:Benchmark
CompilationDatabase	src/pybind11/tools/clang/cindex.py	/^class CompilationDatabase(ClangObject):$/;"	c
CompilationDatabaseError	src/pybind11/tools/clang/cindex.py	/^class CompilationDatabaseError(Exception):$/;"	c
CompileCommand	src/pybind11/tools/clang/cindex.py	/^class CompileCommand(object):$/;"	c
CompileCommands	src/pybind11/tools/clang/cindex.py	/^class CompileCommands(object):$/;"	c
Compiling the test cases	src/pybind11/docs/basics.rst	/^Compiling the test cases$/;"	s	chapter:First steps
CompletionChunk	src/pybind11/tools/clang/cindex.py	/^class CompletionChunk:$/;"	c
CompletionString	src/pybind11/tools/clang/cindex.py	/^class CompletionString(ClangObject):$/;"	c
ComplexStruct	src/pybind11/tests/test_numpy_dtypes.cpp	/^struct ComplexStruct {$/;"	s	file:
Config	src/pybind11/tools/clang/cindex.py	/^class Config:$/;"	c
Configuration variables	src/pybind11/docs/compiling.rst	/^Configuration variables$/;"	S	section:Building with CMake
ConstBase	src/pybind11/include/pybind11/numpy.h	/^    using ConstBase = unchecked_reference<T, Dims>;$/;"	t	class:unchecked_mutable_reference	typeref:typename:unchecked_reference<T,Dims>
ConstPTMFBuffer	src/pybind11/tests/test_buffers.cpp	/^    ConstPTMFBuffer() : value(new int32_t{0}) { };$/;"	f	class:ConstPTMFBuffer	file:
ConstPTMFBuffer	src/pybind11/tests/test_buffers.cpp	/^class ConstPTMFBuffer {$/;"	c	file:
Constant	tools/genmsg/src/genmsg/msgs.py	/^class Constant(object):$/;"	c
Constructor	src/pybind11/include/pybind11/cast.h	/^    using Constructor = void *(*)(const void *);$/;"	t	class:type_caster_base
ConstructorStats	src/pybind11/tests/constructor_stats.h	/^class ConstructorStats {$/;"	c
Convenience classes for arbitrary Python types	src/pybind11/docs/reference.rst	/^Convenience classes for arbitrary Python types$/;"	s	chapter:Reference
Convenience classes for specific Python types	src/pybind11/docs/reference.rst	/^Convenience classes for specific Python types$/;"	s	chapter:Reference
ConvertibleFromUserType	src/pybind11/tests/test_class.cpp	/^        ConvertibleFromUserType(UserType u) : i(u.value()) { }$/;"	f	struct:TEST_SUBMODULE::ConvertibleFromUserType	file:
ConvertibleFromUserType	src/pybind11/tests/test_class.cpp	/^    struct ConvertibleFromUserType {$/;"	s	function:TEST_SUBMODULE	file:
CopyOnlyInt	src/pybind11/tests/test_copy_move.cpp	/^    CopyOnlyInt() { print_default_created(this); }$/;"	f	class:CopyOnlyInt	file:
CopyOnlyInt	src/pybind11/tests/test_copy_move.cpp	/^    CopyOnlyInt(const CopyOnlyInt &c) { print_copy_created(this, c.value); value = c.value; }$/;"	f	class:CopyOnlyInt	file:
CopyOnlyInt	src/pybind11/tests/test_copy_move.cpp	/^    CopyOnlyInt(int v) : value{std::move(v)} { print_created(this, value); }$/;"	f	class:CopyOnlyInt	file:
CopyOnlyInt	src/pybind11/tests/test_copy_move.cpp	/^class CopyOnlyInt {$/;"	c	file:
Core features	src/pybind11/docs/intro.rst	/^Core features$/;"	s	chapter:About this project
CppBoundMethodTest	src/pybind11/tests/test_callbacks.cpp	/^    struct CppBoundMethodTest {};$/;"	s	function:__anon187e61650302	file:
CppDerivedDynamicClass	src/pybind11/tests/test_methods_and_attributes.cpp	/^class CppDerivedDynamicClass : public DynamicClass { };$/;"	c	file:
Creating bindings for a custom type	src/pybind11/docs/classes.rst	/^Creating bindings for a custom type$/;"	s	chapter:Object-oriented code
Creating bindings for a simple function	src/pybind11/docs/basics.rst	/^Creating bindings for a simple function$/;"	s	chapter:First steps
Cursor	src/pybind11/tools/clang/cindex.py	/^class Cursor(Structure):$/;"	c
CursorKind	src/pybind11/tools/clang/cindex.py	/^class CursorKind(BaseEnumeration):$/;"	c
Custom constructors	src/pybind11/docs/advanced/classes.rst	/^Custom constructors$/;"	s	chapter:Classes
Custom smart pointers	src/pybind11/docs/advanced/smart_ptrs.rst	/^Custom smart pointers$/;"	s	chapter:Smart pointers
Custom type casters	src/pybind11/docs/advanced/cast/custom.rst	/^Custom type casters$/;"	c
CustomGuard	src/pybind11/tests/test_call_policies.cpp	/^    CustomGuard() { enabled = true; }$/;"	f	struct:CustomGuard	file:
CustomGuard	src/pybind11/tests/test_call_policies.cpp	/^struct CustomGuard {$/;"	s	file:
CustomOperatorNew	src/pybind11/tests/test_eigen.cpp	/^struct CustomOperatorNew {$/;"	s	file:
CustomUniquePtr	src/pybind11/tests/test_smart_ptr.cpp	/^    CustomUniquePtr(T* p) : impl(p) { }$/;"	f	class:CustomUniquePtr	file:
CustomUniquePtr	src/pybind11/tests/test_smart_ptr.cpp	/^class CustomUniquePtr {$/;"	c	file:
DATA_LENGTH	serial/python/packet.py	/^    DATA_LENGTH = 4 $/;"	v	class:LegacyElkaPacket
DEC	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdC/CMakeCCompilerId.c	/^#define DEC(/;"	d	file:
DEC	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define DEC(/;"	d	file:
DECL_NPY_API	src/pybind11/include/pybind11/numpy.h	/^#define DECL_NPY_API(/;"	d
DEV_PROP_ELKA_SIDE	src/elka_comm/common/elka.h	/^#define DEV_PROP_ELKA_SIDE /;"	d
DEV_PROP_FLIGHT_CONTROLLER	src/elka_comm/common/elka.h	/^#define DEV_PROP_FLIGHT_CONTROLLER /;"	d
DEV_PROP_GROUND_STATION	src/elka_comm/common/elka.h	/^#define DEV_PROP_GROUND_STATION /;"	d
DEV_PROP_HAS_CAMERA	src/elka_comm/common/elka.h	/^#define DEV_PROP_HAS_CAMERA /;"	d
DEV_PROP_HAS_MOTORS	src/elka_comm/common/elka.h	/^#define DEV_PROP_HAS_MOTORS /;"	d
DEV_PROP_HW_CONNECTED	src/elka_comm/common/elka.h	/^#define DEV_PROP_HW_CONNECTED /;"	d
DEV_PROP_PERFORM_LOCALIZATION	src/elka_comm/common/elka.h	/^#define DEV_PROP_PERFORM_LOCALIZATION /;"	d
DEV_PROP_POSIX_SIDE	src/elka_comm/common/elka.h	/^#define DEV_PROP_POSIX_SIDE /;"	d
DEV_PROP_QURT_SIDE	src/elka_comm/common/elka.h	/^#define DEV_PROP_QURT_SIDE /;"	d
DEV_PROP_SENSE_LOCATION	src/elka_comm/common/elka.h	/^#define DEV_PROP_SENSE_LOCATION /;"	d
DEV_PROP_SPIN_MOTORS	src/elka_comm/common/elka.h	/^#define DEV_PROP_SPIN_MOTORS /;"	d
DEV_PROP_TRANSMISSION_CTL	src/elka_comm/common/elka.h	/^#define DEV_PROP_TRANSMISSION_CTL /;"	d
DEV_PROP_USE_CAMERA	src/elka_comm/common/elka.h	/^#define DEV_PROP_USE_CAMERA /;"	d
DEV_PROP_WIRELESS_CONNECTED	src/elka_comm/common/elka.h	/^#define DEV_PROP_WIRELESS_CONNECTED /;"	d
DR	src/pybind11/tests/test_virtual_functions.py	/^    class DR(m.D_Repeat):$/;"	c	function:test_inheriting_repeat	file:
DT	src/pybind11/tests/test_virtual_functions.py	/^    class DT(m.D_Tpl):$/;"	c	function:test_inheriting_repeat	file:
DT2	src/pybind11/tests/test_virtual_functions.py	/^    class DT2(DT):$/;"	c	function:test_inheriting_repeat	file:
DURATION	tools/genmsg/src/genmsg/msgs.py	/^DURATION = 'duration'$/;"	v
DURATION_MSG	tools/genmsg/src/genmsg/msgs.py	/^DURATION_MSG = "int32 secs\\nint32 nsecs"$/;"	v
D_METHODS	src/pybind11/tests/test_virtual_functions.cpp	/^#define D_METHODS /;"	d	file:
D_Repeat	src/pybind11/tests/test_virtual_functions.cpp	/^class D_Repeat : public C_Repeat {$/;"	c	file:
D_Tpl	src/pybind11/tests/test_virtual_functions.cpp	/^class D_Tpl : public C_Tpl { D_METHODS };$/;"	c	file:
DataPlotter	serial/python/parse_vispy.py	/^class DataPlotter(object):$/;"	c
Default arguments	src/pybind11/docs/basics.rst	/^Default arguments$/;"	s	chapter:First steps
Default arguments revisited	src/pybind11/docs/advanced/functions.rst	/^Default arguments revisited$/;"	s	chapter:Functions
DenseMatrixC	src/pybind11/tests/test_eigen.cpp	/^    typedef Eigen::Matrix<float, Eigen::Dynamic, Eigen::Dynamic> DenseMatrixC;$/;"	t	function:__anon898d062d0102	typeref:typename:Eigen::Matrix<float,Eigen::Dynamic,Eigen::Dynamic>	file:
DenseMatrixR	src/pybind11/tests/test_eigen.cpp	/^    typedef Eigen::Matrix<float, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor> DenseMatrixR;$/;"	t	function:__anon898d062d0102	typeref:typename:Eigen::Matrix<float,Eigen::Dynamic,Eigen::Dynamic,Eigen::RowMajor>	file:
DependentGuard	src/pybind11/tests/test_call_policies.cpp	/^    DependentGuard() { enabled = CustomGuard::enabled; }$/;"	f	struct:DependentGuard	file:
DependentGuard	src/pybind11/tests/test_call_policies.cpp	/^struct DependentGuard {$/;"	s	file:
Derived	src/pybind11/tests/test_call_policies.py	/^    class Derived(Parent):$/;"	c	function:test_alive_gc_derived	file:
Derived	src/pybind11/tests/test_call_policies.py	/^    class Derived(Parent, Child):$/;"	c	function:test_alive_gc_multi_derived	file:
DerivedClass1	src/pybind11/tests/test_class.cpp	/^    struct DerivedClass1 : BaseClass { };$/;"	s	function:TEST_SUBMODULE	file:
DerivedClass2	src/pybind11/tests/test_class.cpp	/^    struct DerivedClass2 : BaseClass { };$/;"	s	function:TEST_SUBMODULE	file:
DerivedPTMFBuffer	src/pybind11/tests/test_buffers.cpp	/^struct DerivedPTMFBuffer : public PTMFBuffer { };$/;"	s	file:
DerivedWidget	src/pybind11/tests/test_embed/test_interpreter.py	/^class DerivedWidget(Widget):$/;"	c
DestructionTester	src/pybind11/tests/test_methods_and_attributes.cpp	/^    DestructionTester() { print_default_created(this); }$/;"	f	class:DestructionTester	file:
DestructionTester	src/pybind11/tests/test_methods_and_attributes.cpp	/^    DestructionTester(DestructionTester &&) { print_move_created(this); }$/;"	f	class:DestructionTester	file:
DestructionTester	src/pybind11/tests/test_methods_and_attributes.cpp	/^    DestructionTester(const DestructionTester &) { print_copy_created(this); }$/;"	f	class:DestructionTester	file:
DestructionTester	src/pybind11/tests/test_methods_and_attributes.cpp	/^class DestructionTester {$/;"	c	file:
Developer documenation	tools/genmsg/doc/developer.rst	/^Developer documenation$/;"	c
DeviceRoute	src/elka_comm/common/elka_comm.cpp	/^elka::DeviceRoute::DeviceRoute() {$/;"	f	class:elka::DeviceRoute
DeviceRoute	src/elka_comm/common/elka_comm.cpp	/^elka::DeviceRoute::DeviceRoute(DeviceRoute *dr) {$/;"	f	class:elka::DeviceRoute
DeviceRoute	src/elka_comm/common/elka_comm.cpp	/^elka::DeviceRoute::DeviceRoute(std::vector<dev_id_t> *route,$/;"	f	class:elka::DeviceRoute
DeviceRoute	src/elka_comm/common/elka_comm.h	/^struct elka::DeviceRoute {$/;"	s	class:elka
DiagIterator	src/pybind11/tools/clang/cindex.py	/^        class DiagIterator:$/;"	c	member:TranslationUnit.diagnostics	file:
Diagnostic	src/pybind11/tools/clang/cindex.py	/^class Diagnostic(object):$/;"	c
DiagnosticsItr	src/pybind11/tools/clang/cindex.py	/^        class DiagnosticsItr:$/;"	c	member:CodeCompletionResults.diagnostics	file:
DiffType	src/pybind11/include/pybind11/stl_bind.h	/^    using DiffType = typename Vector::difference_type;$/;"	t	function:vector_modifiers	typeref:typename:Vector::difference_type
Direct access	src/pybind11/docs/advanced/pycpp/numpy.rst	/^Direct access$/;"	s	chapter:NumPy
DispatchIssue	src/pybind11/tests/test_virtual_functions.cpp	/^struct DispatchIssue : Base {$/;"	s	file:
DocstringTestFoo	src/pybind11/tests/test_docstring_options.cpp	/^struct DocstringTestFoo {$/;"	s	file:
DoesntBreak1	src/pybind11/tests/test_class.cpp	/^typedef py::class_<BreaksBase<1>, std::unique_ptr<BreaksBase<1>>, BreaksTramp<1>> DoesntBreak1;$/;"	t	typeref:typename:py::class_<BreaksBase<1>,std::unique_ptr<BreaksBase<1>>,BreaksTramp<1>>	file:
DoesntBreak2	src/pybind11/tests/test_class.cpp	/^typedef py::class_<BreaksBase<2>, BreaksTramp<2>, std::unique_ptr<BreaksBase<2>>> DoesntBreak2;$/;"	t	typeref:typename:py::class_<BreaksBase<2>,BreaksTramp<2>,std::unique_ptr<BreaksBase<2>>>	file:
DoesntBreak3	src/pybind11/tests/test_class.cpp	/^typedef py::class_<BreaksBase<3>, std::unique_ptr<BreaksBase<3>>> DoesntBreak3;$/;"	t	typeref:typename:py::class_<BreaksBase<3>,std::unique_ptr<BreaksBase<3>>>	file:
DoesntBreak4	src/pybind11/tests/test_class.cpp	/^typedef py::class_<BreaksBase<4>, BreaksTramp<4>> DoesntBreak4;$/;"	t	typeref:typename:py::class_<BreaksBase<4>,BreaksTramp<4>>	file:
DoesntBreak5	src/pybind11/tests/test_class.cpp	/^typedef py::class_<BreaksBase<5>> DoesntBreak5;$/;"	t	typeref:typename:py::class_<BreaksBase<5>>	file:
DoesntBreak6	src/pybind11/tests/test_class.cpp	/^typedef py::class_<BreaksBase<6>, std::shared_ptr<BreaksBase<6>>, BreaksTramp<6>> DoesntBreak6;$/;"	t	typeref:typename:py::class_<BreaksBase<6>,std::shared_ptr<BreaksBase<6>>,BreaksTramp<6>>	file:
DoesntBreak7	src/pybind11/tests/test_class.cpp	/^typedef py::class_<BreaksBase<7>, BreaksTramp<7>, std::shared_ptr<BreaksBase<7>>> DoesntBreak7;$/;"	t	typeref:typename:py::class_<BreaksBase<7>,BreaksTramp<7>,std::shared_ptr<BreaksBase<7>>>	file:
DoesntBreak8	src/pybind11/tests/test_class.cpp	/^typedef py::class_<BreaksBase<8>, std::shared_ptr<BreaksBase<8>>> DoesntBreak8;$/;"	t	typeref:typename:py::class_<BreaksBase<8>,std::shared_ptr<BreaksBase<8>>>	file:
Dog	src/pybind11/tests/test_class.cpp	/^        Dog(const std::string &name) : Pet(name, "dog") {}$/;"	f	class:TEST_SUBMODULE::Dog	file:
Dog	src/pybind11/tests/test_class.cpp	/^    class Dog : public Pet {$/;"	c	function:TEST_SUBMODULE	file:
Dupe1	src/pybind11/tests/test_modules.cpp	/^        class Dupe1 { };$/;"	c	function:__anonb208c0fe0102::__anonb208c0fe0202	file:
Dupe2	src/pybind11/tests/test_modules.cpp	/^        class Dupe2 { };$/;"	c	function:__anonb208c0fe0102::__anonb208c0fe0202	file:
Dupe3	src/pybind11/tests/test_modules.cpp	/^        class Dupe3 { };$/;"	c	function:__anonb208c0fe0102::__anonb208c0fe0202	file:
DupeException	src/pybind11/tests/test_modules.cpp	/^        class DupeException { };$/;"	c	function:__anonb208c0fe0102::__anonb208c0fe0202	file:
Dynamic	src/pybind11/include/pybind11/numpy.h	/^    static constexpr bool Dynamic = Dims < 0;$/;"	m	class:unchecked_reference	typeref:typename:constexpr bool
Dynamic attributes	src/pybind11/docs/classes.rst	/^Dynamic attributes$/;"	s	chapter:Object-oriented code
DynamicClass	src/pybind11/tests/test_methods_and_attributes.cpp	/^    DynamicClass() { print_default_created(this); }$/;"	f	class:DynamicClass	file:
DynamicClass	src/pybind11/tests/test_methods_and_attributes.cpp	/^class DynamicClass {$/;"	c	file:
EFirstEntry	src/pybind11/tests/test_constants_and_functions.cpp	/^enum MyEnum { EFirstEntry = 1, ESecondEntry };$/;"	e	enum:MyEnum	file:
EFirstMode	src/pybind11/tests/test_enum.cpp	/^        EFirstMode = 1,$/;"	e	enum:ClassWithUnscopedEnum::EMode	file:
ELKA_COMM_H	src/elka_comm/common/elka_comm.h	/^#define ELKA_COMM_H$/;"	d
ELKA_DEFINES_H	inc/elka_defines.h	/^#define ELKA_DEFINES_H$/;"	d
ELKA_DEVICES_H	src/elka_comm/gnd_station/elka_devices.h	/^#define ELKA_DEVICES_H$/;"	d
ELKA_ERROR	inc/elka_defines.h	/^#define ELKA_ERROR /;"	d
ELKA_H	src/elka_comm/common/elka.h	/^#define ELKA_H$/;"	d
ELKA_LOG_H	inc/elka_log.h	/^#define ELKA_LOG_H$/;"	d
ELKA_MANAGER_H	src/elka_comm/posix/elka_manager.h	/^#define ELKA_MANAGER_H$/;"	d
ELKA_OK	inc/elka_defines.h	/^#define ELKA_OK /;"	d
ELKA_POSIX_DEVICES_H	src/elka_comm/posix/elka_devices.h	/^#define ELKA_POSIX_DEVICES_H$/;"	d
ELKA_POSIX_H	src/elka_comm/posix/elka_posix.h	/^#define ELKA_POSIX_H$/;"	d
ELKA_SIDE	src/elka_comm/common/elka.h	/^#define ELKA_SIDE /;"	d
EMode	src/pybind11/tests/test_enum.cpp	/^    enum EMode {$/;"	g	class:ClassWithUnscopedEnum	file:
EOne	src/pybind11/tests/test_enum.cpp	/^    EOne = 1,$/;"	e	enum:UnscopedEnum	file:
EQUALS	build_elka_data_collection/Makefile	/^EQUALS = =$/;"	m
EQUALS	build_elka_data_collection/msg/Makefile	/^EQUALS = =$/;"	m
EQUALS	build_elka_data_collection/src/Makefile	/^EQUALS = =$/;"	m
EQUALS	build_elka_data_collection/src/elka_comm/common/Makefile	/^EQUALS = =$/;"	m
EQUALS	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^EQUALS = =$/;"	m
EQUALS	build_elka_data_collection/src/pybind11/Makefile	/^EQUALS = =$/;"	m
ERROR	src/elka_comm/qurt/status.h	/^#define ERROR /;"	d
ERROR_CANNOTLOADDATABASE	src/pybind11/tools/clang/cindex.py	/^    ERROR_CANNOTLOADDATABASE = 1$/;"	v	class:CompilationDatabaseError
ERROR_INVALID_TU	src/pybind11/tools/clang/cindex.py	/^    ERROR_INVALID_TU = 3$/;"	v	class:TranslationUnitSaveError
ERROR_TRANSLATION_ERRORS	src/pybind11/tools/clang/cindex.py	/^    ERROR_TRANSLATION_ERRORS = 2$/;"	v	class:TranslationUnitSaveError
ERROR_UNKNOWN	src/pybind11/tools/clang/cindex.py	/^    ERROR_UNKNOWN = 0$/;"	v	class:CompilationDatabaseError
ERROR_UNKNOWN	src/pybind11/tools/clang/cindex.py	/^    ERROR_UNKNOWN = 1$/;"	v	class:TranslationUnitSaveError
ESecondEntry	src/pybind11/tests/test_constants_and_functions.cpp	/^enum MyEnum { EFirstEntry = 1, ESecondEntry };$/;"	e	enum:MyEnum	file:
ESecondMode	src/pybind11/tests/test_enum.cpp	/^        ESecondMode$/;"	e	enum:ClassWithUnscopedEnum::EMode	file:
ETwo	src/pybind11/tests/test_enum.cpp	/^    ETwo$/;"	e	enum:UnscopedEnum	file:
EXT_MSG	tools/genmsg/src/genmsg/base.py	/^EXT_MSG = '.msg'$/;"	v
EXT_SRV	tools/genmsg/src/genmsg/base.py	/^EXT_SRV = '.srv'$/;"	v
E_nc	src/pybind11/tests/test_stl_binders.cpp	/^    explicit E_nc(int i) : value{i} {}$/;"	f	class:E_nc	file:
E_nc	src/pybind11/tests/test_stl_binders.cpp	/^class E_nc {$/;"	c	file:
Eigen	src/pybind11/docs/advanced/cast/eigen.rst	/^Eigen$/;"	c
EigenConformable	src/pybind11/include/pybind11/eigen.h	/^    EigenConformable(EigenIndex r, EigenIndex c, EigenIndex stride)$/;"	f	struct:EigenConformable
EigenConformable	src/pybind11/include/pybind11/eigen.h	/^    EigenConformable(EigenIndex r, EigenIndex c,$/;"	f	struct:EigenConformable
EigenConformable	src/pybind11/include/pybind11/eigen.h	/^    EigenConformable(bool fits = false) : conformable{fits} {}$/;"	f	struct:EigenConformable
EigenConformable	src/pybind11/include/pybind11/eigen.h	/^template <bool EigenRowMajor> struct EigenConformable {$/;"	s
EigenDMap	src/pybind11/include/pybind11/eigen.h	/^template <typename MatrixType> using EigenDMap = Eigen::Map<MatrixType, 0, EigenDStride>;$/;"	t	typeref:typename:Eigen::Map<MatrixType,0,EigenDStride>
EigenDRef	src/pybind11/include/pybind11/eigen.h	/^template <typename MatrixType> using EigenDRef = Eigen::Ref<MatrixType, 0, EigenDStride>;$/;"	t	typeref:typename:Eigen::Ref<MatrixType,0,EigenDStride>
EigenDStride	src/pybind11/include/pybind11/eigen.h	/^using EigenDStride = Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>;$/;"	t	typeref:typename:Eigen::Stride<Eigen::Dynamic,Eigen::Dynamic>
EigenIndex	src/pybind11/include/pybind11/eigen.h	/^using EigenIndex = Eigen::Index;$/;"	t	typeref:typename:Eigen::Index
EigenProps	src/pybind11/include/pybind11/eigen.h	/^template <typename Type_> struct EigenProps {$/;"	s
El	src/pybind11/tests/test_stl_binders.cpp	/^    El(int v) : a(v) { }$/;"	f	class:El	file:
El	src/pybind11/tests/test_stl_binders.cpp	/^class El {$/;"	c	file:
ElementA	src/pybind11/tests/test_smart_ptr.cpp	/^    ElementA(int v) : v(v) { }$/;"	f	struct:ElementA	file:
ElementA	src/pybind11/tests/test_smart_ptr.cpp	/^struct ElementA : ElementBase {$/;"	s	file:
ElementBase	src/pybind11/tests/test_smart_ptr.cpp	/^struct ElementBase { virtual void foo() { } \/* Force creation of virtual table *\/ };$/;"	s	file:
ElementList	src/pybind11/tests/test_smart_ptr.cpp	/^struct ElementList {$/;"	s	file:
ElkaBufferMsg	src/elka_comm/common/elka_comm.cpp	/^elka::ElkaBufferMsg::ElkaBufferMsg(msg_id_t msg_id,$/;"	f	class:elka::ElkaBufferMsg
ElkaBufferMsg	src/elka_comm/common/elka_comm.h	/^struct elka::ElkaBufferMsg {$/;"	s	class:elka
ElkaPacket	serial/python/packet.py	/^class ElkaPacket(object):$/;"	c
Embedding the Python interpreter	src/pybind11/docs/compiling.rst	/^Embedding the Python interpreter$/;"	S	section:Building with CMake
Embedding the interpreter	src/pybind11/docs/advanced/embedding.rst	/^Embedding the interpreter$/;"	c
Embedding the interpreter	src/pybind11/docs/reference.rst	/^Embedding the interpreter$/;"	s	chapter:Reference
Enumerations and internal types	src/pybind11/docs/classes.rst	/^Enumerations and internal types$/;"	s	chapter:Object-oriented code
Error	src/pybind11/tools/clang/cindex.py	/^    Error   = 3$/;"	v	class:Diagnostic
Evaluating Python expressions from strings and files	src/pybind11/docs/advanced/pycpp/utilities.rst	/^Evaluating Python expressions from strings and files$/;"	s	chapter:Utilities
ExampleMandA	src/pybind11/tests/test_methods_and_attributes.cpp	/^    ExampleMandA() { print_default_created(this); }$/;"	f	class:ExampleMandA	file:
ExampleMandA	src/pybind11/tests/test_methods_and_attributes.cpp	/^    ExampleMandA(ExampleMandA &&e) : value(e.value) { print_move_created(this); }$/;"	f	class:ExampleMandA	file:
ExampleMandA	src/pybind11/tests/test_methods_and_attributes.cpp	/^    ExampleMandA(const ExampleMandA &e) : value(e.value) { print_copy_created(this); }$/;"	f	class:ExampleMandA	file:
ExampleMandA	src/pybind11/tests/test_methods_and_attributes.cpp	/^    ExampleMandA(int value) : value(value) { print_created(this, value); }$/;"	f	class:ExampleMandA	file:
ExampleMandA	src/pybind11/tests/test_methods_and_attributes.cpp	/^class ExampleMandA {$/;"	c	file:
ExampleVirt	src/pybind11/tests/test_virtual_functions.cpp	/^    ExampleVirt(ExampleVirt &&e) : state(e.state) { print_move_created(this); e.state = 0; }$/;"	f	class:ExampleVirt	file:
ExampleVirt	src/pybind11/tests/test_virtual_functions.cpp	/^    ExampleVirt(const ExampleVirt &e) : state(e.state) { print_copy_created(this); }$/;"	f	class:ExampleVirt	file:
ExampleVirt	src/pybind11/tests/test_virtual_functions.cpp	/^    ExampleVirt(int state) : state(state) { print_created(this, state); }$/;"	f	class:ExampleVirt	file:
ExampleVirt	src/pybind11/tests/test_virtual_functions.cpp	/^class ExampleVirt  {$/;"	c	file:
Examples	tools/genmsg/doc/developer.rst	/^Examples$/;"	s	chapter:Developer documenation
Exceptions	src/pybind11/docs/advanced/exceptions.rst	/^Exceptions$/;"	c
Exceptions	src/pybind11/docs/reference.rst	/^Exceptions$/;"	s	chapter:Reference
Execute	src/pybind11/tests/test_enum.cpp	/^    Execute = 1$/;"	e	enum:Flags	file:
Executing Python code	src/pybind11/docs/advanced/embedding.rst	/^Executing Python code$/;"	s	chapter:Embedding the interpreter
Explicit conversions	src/pybind11/docs/advanced/cast/strings.rst	/^Explicit conversions$/;"	S	section:Returning C++ strings to Python
Exporting variables	src/pybind11/docs/basics.rst	/^Exporting variables$/;"	s	chapter:First steps
Extended trampoline class functionality	src/pybind11/docs/advanced/classes.rst	/^Extended trampoline class functionality$/;"	s	chapter:Classes
ExtendedExampleVirt	src/pybind11/tests/test_virtual_functions.py	/^    class ExtendedExampleVirt(m.ExampleVirt):$/;"	c	function:test_override	file:
ExtendedExampleVirt2	src/pybind11/tests/test_virtual_functions.py	/^    class ExtendedExampleVirt2(ExtendedExampleVirt):$/;"	c	function:test_override	file:
ExtractionThread	src/pybind11/tools/mkdoc.py	/^class ExtractionThread(Thread):$/;"	c
Failing rather than copying	src/pybind11/docs/advanced/cast/eigen.rst	/^Failing rather than copying$/;"	s	chapter:Eigen
Fatal	src/pybind11/tools/clang/cindex.py	/^    Fatal   = 4$/;"	v	class:Diagnostic
Field	tools/genmsg/src/genmsg/msgs.py	/^class Field(object):$/;"	c
File	src/pybind11/tools/clang/cindex.py	/^class File(ClangObject):$/;"	c
FileInclusion	src/pybind11/tools/clang/cindex.py	/^class FileInclusion(object):$/;"	c
First steps	src/pybind11/docs/basics.rst	/^First steps$/;"	c
FixIt	src/pybind11/tools/clang/cindex.py	/^class FixIt(object):$/;"	c
FixItIterator	src/pybind11/tools/clang/cindex.py	/^        class FixItIterator:$/;"	c	member:Diagnostic.fixits	file:
FixedMatrixC	src/pybind11/tests/test_eigen.cpp	/^    typedef Eigen::Matrix<float, 5, 6> FixedMatrixC;$/;"	t	function:__anon898d062d0102	typeref:typename:Eigen::Matrix<float,5,6>	file:
FixedMatrixR	src/pybind11/tests/test_eigen.cpp	/^    typedef Eigen::Matrix<float, 5, 6, Eigen::RowMajor> FixedMatrixR;$/;"	t	function:__anon898d062d0102	typeref:typename:Eigen::Matrix<float,5,6,Eigen::RowMajor>	file:
Flags	src/pybind11/tests/test_enum.cpp	/^enum Flags {$/;"	g	file:
Foo	tools/genmsg/test/test_genmsg_base.py	/^    class Foo(object):$/;"	c	function:test_plog	file:
Foo	tools/genmsg/test/test_genmsg_msg_loader.py	/^    class Foo(object): pass$/;"	c	function:test_load_depends_srv	file:
FourColMatrixC	src/pybind11/tests/test_eigen.cpp	/^    typedef Eigen::Matrix<float, Eigen::Dynamic, 4> FourColMatrixC;$/;"	t	function:__anon898d062d0102	typeref:typename:Eigen::Matrix<float,Eigen::Dynamic,4>	file:
FourColMatrixR	src/pybind11/tests/test_eigen.cpp	/^    typedef Eigen::Matrix<float, Eigen::Dynamic, 4> FourColMatrixR;$/;"	t	function:__anon898d062d0102	typeref:typename:Eigen::Matrix<float,Eigen::Dynamic,4>	file:
FourRowMatrixC	src/pybind11/tests/test_eigen.cpp	/^    typedef Eigen::Matrix<float, 4, Eigen::Dynamic> FourRowMatrixC;$/;"	t	function:__anon898d062d0102	typeref:typename:Eigen::Matrix<float,4,Eigen::Dynamic>	file:
FourRowMatrixR	src/pybind11/tests/test_eigen.cpp	/^    typedef Eigen::Matrix<float, 4, Eigen::Dynamic> FourRowMatrixR;$/;"	t	function:__anon898d062d0102	typeref:typename:Eigen::Matrix<float,4,Eigen::Dynamic>	file:
Frequently asked questions	src/pybind11/docs/faq.rst	/^Frequently asked questions$/;"	c
FtdiUartThread	serial/python/ftdi_uart.py	/^class FtdiUartThread(QThread):$/;"	c
FuncType	src/pybind11/include/pybind11/pybind11.h	/^        using FuncType = typename detail::remove_class<decltype(&detail::remove_reference_t<Func/;"	t	class:cpp_function
FunctionType	src/pybind11/include/pybind11/pybind11.h	/^        using FunctionType = Return (*)(Args...);$/;"	t	function:cpp_function::initialize
Functional	src/pybind11/docs/advanced/cast/functional.rst	/^Functional$/;"	c
Functions	src/pybind11/docs/advanced/functions.rst	/^Functions$/;"	c
General notes regarding convenience macros	src/pybind11/docs/advanced/misc.rst	/^General notes regarding convenience macros$/;"	s	chapter:Miscellaneous
Generating binding code automatically	src/pybind11/docs/compiling.rst	/^Generating binding code automatically$/;"	s	chapter:Build systems
Generating documentation using Sphinx	src/pybind11/docs/advanced/misc.rst	/^Generating documentation using Sphinx$/;"	s	chapter:Miscellaneous
Generator Scripts	tools/genmsg/doc/developer.rst	/^Generator Scripts$/;"	s	chapter:Developer documenation
Getting started	src/pybind11/docs/advanced/embedding.rst	/^Getting started$/;"	s	chapter:Embedding the interpreter
Global Interpreter Lock (GIL)	src/pybind11/docs/advanced/misc.rst	/^Global Interpreter Lock (GIL)$/;"	s	chapter:Miscellaneous
Goodies	src/pybind11/docs/intro.rst	/^Goodies$/;"	s	chapter:About this project
Grapheme clusters	src/pybind11/docs/advanced/cast/strings.rst	/^Grapheme clusters$/;"	S	section:Character literals
GroundPort	src/elka_comm/gnd_station/elka_devices.cpp	/^elka::GroundPort::GroundPort(uint8_t port_num, uint8_t port_type,$/;"	f	class:elka::GroundPort
GroundPort	src/elka_comm/gnd_station/elka_devices.h	/^class elka::GroundPort : public elka::CommPort {$/;"	c	class:elka
Guard	src/pybind11/include/pybind11/pybind11.h	/^            using Guard = detail::extract_guard_t<Extra...>;$/;"	t	function:cpp_function::initialize::__anon866f615b0502	typeref:typename:detail::extract_guard_t<Extra...>
HAVE_ROUND	src/pybind11/include/pybind11/common.h	/^#    define HAVE_ROUND /;"	d
HEADER	tools/genmsg/src/genmsg/msgs.py	/^HEADER   = 'Header'$/;"	v
HEADER_FULL_NAME	tools/genmsg/src/genmsg/msgs.py	/^HEADER_FULL_NAME = 'std_msgs\/Header'$/;"	v
HEX	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdC/CMakeCCompilerId.c	/^#define HEX(/;"	d	file:
HEX	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define HEX(/;"	d	file:
Hamster	src/pybind11/tests/test_class.cpp	/^        Hamster(const std::string &name) : Pet(name, "rodent") {}$/;"	f	class:TEST_SUBMODULE::Hamster	file:
Hamster	src/pybind11/tests/test_class.cpp	/^    class Hamster : public Pet {$/;"	c	function:TEST_SUBMODULE	file:
Header and namespace conventions	src/pybind11/docs/basics.rst	/^Header and namespace conventions$/;"	s	chapter:First steps
HeldByDefaultHolder	src/pybind11/tests/test_smart_ptr.cpp	/^    struct HeldByDefaultHolder { };$/;"	s	function:__anon0cf8aa410302	file:
How can I create smaller binaries?	src/pybind11/docs/faq.rst	/^How can I create smaller binaries?$/;"	s	chapter:Frequently asked questions
How can I reduce the build time?	src/pybind11/docs/faq.rst	/^How can I reduce the build time?$/;"	s	chapter:Frequently asked questions
I18NSPHINXOPTS	src/pybind11/docs/Makefile	/^I18NSPHINXOPTS  = $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .$/;"	m
I801B1	src/pybind11/tests/test_multiple_inheritance.cpp	/^struct I801B1 { int a = 1; virtual ~I801B1() = default; };$/;"	s	file:
I801B2	src/pybind11/tests/test_multiple_inheritance.cpp	/^struct I801B2 { int b = 2; virtual ~I801B2() = default; };$/;"	s	file:
I801B3	src/pybind11/tests/test_multiple_inheritance.cpp	/^struct I801B3 { int c = 3; virtual ~I801B3() = default; };$/;"	s	file:
I801C	src/pybind11/tests/test_multiple_inheritance.cpp	/^struct I801C : I801B1, I801B2 {};$/;"	s	file:
I801D	src/pybind11/tests/test_multiple_inheritance.cpp	/^struct I801D : I801C {}; \/\/ Indirect MI$/;"	s	file:
I801E	src/pybind11/tests/test_multiple_inheritance.cpp	/^struct I801E : I801B3, I801D {};$/;"	s	file:
ID_EXPECTING_ACK	src/elka_comm/common/elka.h	/^#define ID_EXPECTING_ACK /;"	d
ID_MAX	src/elka_comm/common/elka.h	/^#define ID_MAX /;"	d
ID_VOID_MAIN	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdC/CMakeCCompilerId.c	/^# define ID_VOID_MAIN$/;"	d	file:
INCL_DEFAULT	tools/px_generate_uorb_topic_files.py	/^INCL_DEFAULT = ['std_msgs:.\/msg\/std_msgs']$/;"	v
INET_COMM	src/elka_comm/gnd_station/inet_comm.h	/^#define INET_COMM$/;"	d
INET_COMM	src/elka_comm/posix/inet_comm.h	/^#define INET_COMM$/;"	d
IODELIM	tools/genmsg/src/genmsg/base.py	/^IODELIM   = '---'$/;"	v
Ignored	src/pybind11/tools/clang/cindex.py	/^    Ignored = 0$/;"	v	class:Diagnostic
Implicit conversions	src/pybind11/docs/advanced/classes.rst	/^Implicit conversions$/;"	s	chapter:Classes
Importing modules	src/pybind11/docs/advanced/embedding.rst	/^Importing modules$/;"	s	chapter:Embedding the interpreter
IncType	src/pybind11/tests/pybind11_tests.h	/^    IncType(const IncType &other) : IncType(other.value() + 1) { }$/;"	f	class:IncType
IncType	src/pybind11/tests/pybind11_tests.h	/^class IncType : public UserType {$/;"	c
Index	src/pybind11/include/pybind11/eigen.h	/^    typedef typename Type::Index Index;$/;"	t	struct:type_caster	typeref:typename:Type::Index
Index	src/pybind11/tools/clang/cindex.py	/^class Index(ClangObject):$/;"	c
Inheritance	src/pybind11/docs/classes.rst	/^Inheritance$/;"	s	chapter:Object-oriented code
Initializer	src/pybind11/tests/pybind11_tests.h	/^    using Initializer = void (*)(py::module &);$/;"	t	class:test_initializer
Instance and static fields	src/pybind11/docs/classes.rst	/^Instance and static fields$/;"	s	chapter:Object-oriented code
IntPairs	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    IntPairs(std::vector<std::pair<int, int>> data) : data_(std::move(data)) {}$/;"	f	class:IntPairs	file:
IntPairs	src/pybind11/tests/test_sequences_and_iterators.cpp	/^class IntPairs {$/;"	c	file:
Interpreter lifetime	src/pybind11/docs/advanced/embedding.rst	/^Interpreter lifetime$/;"	s	chapter:Embedding the interpreter
InvalidMsgSpec	tools/genmsg/src/genmsg/base.py	/^class InvalidMsgSpec(Exception):$/;"	c
It	src/pybind11/include/pybind11/pytypes.h	/^    using It = generic_iterator;$/;"	t	class:generic_iterator	typeref:typename:generic_iterator
ItType	src/pybind11/include/pybind11/stl_bind.h	/^    using ItType   = typename Vector::iterator;$/;"	t	function:vector_accessor	typeref:typename:Vector::iterator
ItType	src/pybind11/include/pybind11/stl_bind.h	/^    using ItType   = typename Vector::iterator;$/;"	t	typeref:typename:Vector::iterator
KWClass	src/pybind11/tests/test_kwargs_and_defaults.cpp	/^struct KWClass {$/;"	s	file:
Keep alive	src/pybind11/docs/advanced/functions.rst	/^Keep alive$/;"	S	section:Additional call policies
KeyType	src/pybind11/include/pybind11/stl_bind.h	/^    using KeyType = typename Map::key_type;$/;"	t	function:NAMESPACE_END	typeref:typename:Map::key_type
KeyType	src/pybind11/include/pybind11/stl_bind.h	/^    using KeyType = typename Map::key_type;$/;"	t	function:map_assignment	typeref:typename:Map::key_type
Keyword and default arguments	src/pybind11/docs/classes.rst	/^Keyword and default arguments$/;"	s	chapter:Object-oriented code
Keyword arguments	src/pybind11/docs/basics.rst	/^Keyword arguments$/;"	s	chapter:First steps
Kind	src/pybind11/tools/clang/cindex.py	/^    class Kind:$/;"	c	class:CompletionChunk
LOG_DEBUG	inc/elka_log.h	/^#define LOG_DEBUG(/;"	d
LOG_ERR	inc/elka_log.h	/^#define LOG_ERR(/;"	d
LOG_INFO	inc/elka_log.h	/^#define LOG_INFO(/;"	d
LOG_WARN	inc/elka_log.h	/^#define LOG_WARN(/;"	d
L_type	src/pybind11/include/pybind11/operators.h	/^        using L_type = conditional_t<std::is_same<L, self_t>::value, Base, L>;$/;"	t	function:op_::execute	typeref:typename:conditional_t<std::is_same<L,self_t>::value,Base,L>
L_type	src/pybind11/include/pybind11/operators.h	/^        using L_type = conditional_t<std::is_same<L, self_t>::value, Base, L>;$/;"	t	function:op_::execute_cast	typeref:typename:conditional_t<std::is_same<L,self_t>::value,Base,L>
LegacyElkaPacket	serial/python/packet.py	/^class LegacyElkaPacket(object):$/;"	c
LibclangError	src/pybind11/tools/clang/cindex.py	/^class LibclangError(Exception):$/;"	c
Limitations	src/pybind11/docs/limitations.rst	/^Limitations$/;"	c
Limitations involving reference arguments	src/pybind11/docs/faq.rst	/^Limitations involving reference arguments$/;"	s	chapter:Frequently asked questions
Linux/MacOS	src/pybind11/docs/basics.rst	/^Linux\/MacOS$/;"	S	section:Compiling the test cases
List of all builtin conversions	src/pybind11/docs/advanced/cast/overview.rst	/^List of all builtin conversions$/;"	s	chapter:Overview
Literals	src/pybind11/docs/reference.rst	/^Literals$/;"	s	chapter:Reference
MAX_CHANNELS	serial/python/packet.py	/^    MAX_CHANNELS = 18$/;"	v	class:SpektrumPacket
MAX_ELKA_DEVS	src/elka_comm/common/elka.h	/^#define MAX_ELKA_DEVS /;"	d
MAX_LENGTH	serial/python/packet.py	/^    MAX_LENGTH = 261$/;"	v	class:ElkaPacket
MAX_MSG_LEN	src/elka_comm/common/elka.h	/^#define MAX_MSG_LEN /;"	d
MAX_MSG_NUM	build_elka_data_collection/inc/uORB/topics/elka_msg_ack.h	/^	static const uint16_t MAX_MSG_NUM = 65535;$/;"	m	struct:elka_msg_ack_s	typeref:typename:const uint16_t
MAX_MSG_NUM	build_elka_data_collection/inc/uORB/topics/elka_msg_ack.h	/^#define MAX_MSG_NUM /;"	d
MAX_MSG_NUM	build_elka_data_collection/topics_temporary_header/elka_msg_ack.h	/^	static const uint16_t MAX_MSG_NUM = 65535;$/;"	m	struct:elka_msg_ack_s	typeref:typename:const uint16_t
MAX_MSG_NUM	build_elka_data_collection/topics_temporary_header/elka_msg_ack.h	/^#define MAX_MSG_NUM /;"	d
MAX_NAME_LEN	src/elka_comm/common/elka.h	/^#define MAX_NAME_LEN /;"	d
MAX_NUM_RETRIES	src/elka_comm/common/elka.h	/^#define MAX_NUM_RETRIES /;"	d
MAX_SERIAL_PORTS	src/elka_comm/common/elka.h	/^#define MAX_SERIAL_PORTS /;"	d
MAX_UART_DEV_NUM	src/elka_comm/qurt/platform.h	/^#define MAX_UART_DEV_NUM /;"	d
MAX_UART_PORTS	src/elka_comm/qurt/snapdragon_uart.h	/^#define MAX_UART_PORTS /;"	d
MESSAGE_LENGTH	src/elka_comm/common/elka.h	/^#define MESSAGE_LENGTH /;"	d
MESSAGE_TYPE	src/elka_comm/common/elka.h	/^#define MESSAGE_TYPE /;"	d
MI1	src/pybind11/tests/test_multiple_inheritance.py	/^    class MI1(Base1, Base2):$/;"	c	function:test_multiple_inheritance_python	file:
MI2	src/pybind11/tests/test_multiple_inheritance.py	/^    class MI2(B1, Base1, Base2):$/;"	c	function:test_multiple_inheritance_python	file:
MI3	src/pybind11/tests/test_multiple_inheritance.py	/^    class MI3(MI2):$/;"	c	function:test_multiple_inheritance_python	file:
MI4	src/pybind11/tests/test_multiple_inheritance.py	/^    class MI4(MI3, Base2):$/;"	c	function:test_multiple_inheritance_python	file:
MI5	src/pybind11/tests/test_multiple_inheritance.py	/^    class MI5(Base2, B1, Base1):$/;"	c	function:test_multiple_inheritance_python	file:
MI6	src/pybind11/tests/test_multiple_inheritance.py	/^    class MI6(Base2, B1):$/;"	c	function:test_multiple_inheritance_python	file:
MI7	src/pybind11/tests/test_multiple_inheritance.py	/^    class MI7(B4, MI6):$/;"	c	function:test_multiple_inheritance_python	file:
MI8	src/pybind11/tests/test_multiple_inheritance.py	/^    class MI8(MI6, B3):$/;"	c	function:test_multiple_inheritance_python	file:
MI8b	src/pybind11/tests/test_multiple_inheritance.py	/^    class MI8b(B3, MI6):$/;"	c	function:test_multiple_inheritance_python	file:
MIMany117	src/pybind11/tests/test_multiple_inheritance.py	/^    class MIMany117(MIMany14, MIMany58, MIMany916, BaseN17):$/;"	c	function:test_multiple_inheritance_python_many_bases	file:
MIMany14	src/pybind11/tests/test_multiple_inheritance.py	/^    class MIMany14(BaseN1, BaseN2, BaseN3, BaseN4):$/;"	c	function:test_multiple_inheritance_python_many_bases	file:
MIMany19	src/pybind11/tests/test_multiple_inheritance.py	/^    class MIMany19(MIMany14, MIMany58, BaseN9):$/;"	c	function:test_multiple_inheritance_python_many_bases	file:
MIMany58	src/pybind11/tests/test_multiple_inheritance.py	/^    class MIMany58(BaseN5, BaseN6, BaseN7, BaseN8):$/;"	c	function:test_multiple_inheritance_python_many_bases	file:
MIMany916	src/pybind11/tests/test_multiple_inheritance.py	/^    class MIMany916(BaseN9, BaseN10, BaseN11, BaseN12, BaseN13, BaseN14, BaseN15, BaseN16):$/;"	c	function:test_multiple_inheritance_python_many_bases	file:
MIType	src/pybind11/tests/test_multiple_inheritance.cpp	/^    MIType(int i, int j) : Base12(i, j) { }$/;"	f	struct:MIType	file:
MIType	src/pybind11/tests/test_multiple_inheritance.cpp	/^struct MIType : Base12 {$/;"	s	file:
MITypePy	src/pybind11/tests/test_multiple_inheritance.py	/^    class MITypePy(Base1, Base2):$/;"	c	function:test_multiple_inheritance_mix1	file:
MITypePy	src/pybind11/tests/test_multiple_inheritance.py	/^    class MITypePy(Base1, Base2):$/;"	c	function:test_multiple_inheritance_mix2	file:
MITypePy	src/pybind11/tests/test_multiple_inheritance.py	/^    class MITypePy(Base12a):$/;"	c	function:test_multiple_inheritance_virtbase	file:
MODULES_UORB_UORBTOPICS_H_	inc/uORB/uORBTopics.h	/^#define MODULES_UORB_UORBTOPICS_H_$/;"	d
MSG_ACK	src/elka_comm/common/elka.h	/^#define MSG_ACK /;"	d
MSG_ACK_LENGTH	src/elka_comm/common/elka.h	/^#define MSG_ACK_LENGTH /;"	d
MSG_DIR	tools/genmsg/src/genmsg/base.py	/^MSG_DIR = 'msg'$/;"	v
MSG_ELKA_CTL	src/elka_comm/common/elka.h	/^#define MSG_ELKA_CTL /;"	d
MSG_FAILED	src/elka_comm/common/elka.h	/^#define MSG_FAILED /;"	d
MSG_ID_SIZE	src/elka_comm/common/elka.h	/^#define MSG_ID_SIZE /;"	d
MSG_MOTOR_CMD	src/elka_comm/common/elka.h	/^#define MSG_MOTOR_CMD /;"	d
MSG_NULL	src/elka_comm/common/elka.h	/^#define MSG_NULL /;"	d
MSG_NUM_LEN	src/elka_comm/common/elka.h	/^#define MSG_NUM_LEN /;"	d
MSG_NUM_SIZE	src/elka_comm/common/elka.h	/^#define MSG_NUM_SIZE /;"	d
MSG_OFFSET	build_elka_data_collection/inc/uORB/topics/elka_msg.h	/^	static const uint8_t MSG_OFFSET = 11;$/;"	m	struct:elka_msg_s	typeref:typename:const uint8_t
MSG_OFFSET	build_elka_data_collection/inc/uORB/topics/elka_msg.h	/^#define MSG_OFFSET /;"	d
MSG_OFFSET	build_elka_data_collection/topics_temporary_header/elka_msg.h	/^	static const uint8_t MSG_OFFSET = 11;$/;"	m	struct:elka_msg_s	typeref:typename:const uint8_t
MSG_OFFSET	build_elka_data_collection/topics_temporary_header/elka_msg.h	/^#define MSG_OFFSET /;"	d
MSG_PORT_CTL	src/elka_comm/common/elka.h	/^#define MSG_PORT_CTL /;"	d
MSG_ROUTE_CHANGED	src/elka_comm/common/elka.h	/^#define MSG_ROUTE_CHANGED /;"	d
MSG_ROUTE_DEV_PROPS	src/elka_comm/common/elka.h	/^#define MSG_ROUTE_DEV_PROPS /;"	d
MSG_ROUTE_HB	src/elka_comm/common/elka.h	/^#define MSG_ROUTE_HB /;"	d
MSG_ROUTE_REQUEST_HB	src/elka_comm/common/elka.h	/^#define MSG_ROUTE_REQUEST_HB /;"	d
MSG_ROUTE_TABLE	src/elka_comm/common/elka.h	/^#define MSG_ROUTE_TABLE /;"	d
MSG_STATE_LENGTH	src/elka_comm/common/elka.h	/^#define MSG_STATE_LENGTH /;"	d
MSG_TYPE_TO_CPP	tools/gencpp/src/gencpp/__init__.py	/^MSG_TYPE_TO_CPP = {'byte': 'int8_t',$/;"	v
Macros	src/pybind11/docs/reference.rst	/^Macros$/;"	s	chapter:Reference
MainWindow	serial/python/gui.py	/^class MainWindow(QtGui.QWidget):$/;"	c
Making opaque types	src/pybind11/docs/advanced/cast/stl.rst	/^Making opaque types$/;"	s	chapter:STL containers
Manager	src/elka_comm/posix/elka_manager.cpp	/^elka::Manager::Manager() {$/;"	f	class:elka::Manager
Manager	src/elka_comm/posix/elka_manager.h	/^class elka::Manager {$/;"	c	class:elka
Manager	src/elka_comm/qurt/snapdragon_uart_manager.cpp	/^uart::Manager::Manager() {$/;"	f	class:uart::Manager
Manager	src/elka_comm/qurt/snapdragon_uart_manager.h	/^class uart::Manager {$/;"	c	class:uart
MapType	src/pybind11/include/pybind11/eigen.h	/^    using MapType = Eigen::Map<PlainObjectType, 0, StrideType>;$/;"	t	struct:type_caster	typeref:typename:Eigen::Map<PlainObjectType,0,StrideType>
MappedType	src/pybind11/include/pybind11/stl_bind.h	/^    using MappedType = typename Map::mapped_type;$/;"	t	function:NAMESPACE_END	typeref:typename:Map::mapped_type
MappedType	src/pybind11/include/pybind11/stl_bind.h	/^    using MappedType = typename Map::mapped_type;$/;"	t	function:map_assignment	typeref:typename:Map::mapped_type
Matrix	src/pybind11/include/pybind11/eigen.h	/^    using Matrix = Eigen::Matrix<typename Type::Scalar, Type::RowsAtCompileTime, Type::ColsAtCom/;"	t	struct:type_caster	typeref:typename:Eigen::Matrix<typename Type::Scalar,Type::RowsAtCompileTime,Type::ColsAtCompileTime>
Matrix	src/pybind11/tests/test_buffers.cpp	/^    Matrix(Matrix &&s) : m_rows(s.m_rows), m_cols(s.m_cols), m_data(s.m_data) {$/;"	f	class:Matrix	file:
Matrix	src/pybind11/tests/test_buffers.cpp	/^    Matrix(const Matrix &s) : m_rows(s.m_rows), m_cols(s.m_cols) {$/;"	f	class:Matrix	file:
Matrix	src/pybind11/tests/test_buffers.cpp	/^    Matrix(ssize_t rows, ssize_t cols) : m_rows(rows), m_cols(cols) {$/;"	f	class:Matrix	file:
Matrix	src/pybind11/tests/test_buffers.cpp	/^class Matrix {$/;"	c	file:
MatrixXdR	src/pybind11/tests/test_eigen.cpp	/^using MatrixXdR = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor>;$/;"	t	typeref:typename:Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic,Eigen::RowMajor>	file:
MetaclassOverride	src/pybind11/tests/test_methods_and_attributes.cpp	/^    struct MetaclassOverride { };$/;"	s	function:__anon943d96910102	file:
Miscellaneous	src/pybind11/docs/advanced/misc.rst	/^Miscellaneous$/;"	c
MismatchBase1	src/pybind11/tests/test_class.cpp	/^    struct MismatchBase1 { };$/;"	s	function:TEST_SUBMODULE	file:
MismatchBase2	src/pybind11/tests/test_class.cpp	/^    struct MismatchBase2 { };$/;"	s	function:TEST_SUBMODULE	file:
MismatchDerived1	src/pybind11/tests/test_class.cpp	/^    struct MismatchDerived1 : MismatchBase1 { };$/;"	s	function:TEST_SUBMODULE	file:
MismatchDerived2	src/pybind11/tests/test_class.cpp	/^    struct MismatchDerived2 : MismatchBase2 { };$/;"	s	function:TEST_SUBMODULE	file:
Module Destructors	src/pybind11/docs/advanced/misc.rst	/^Module Destructors$/;"	s	chapter:Miscellaneous
Module size	src/pybind11/docs/benchmark.rst	/^Module size$/;"	s	chapter:Benchmark
Movable	src/pybind11/tests/test_virtual_functions.cpp	/^    Movable(Movable &&m) { value = std::move(m.value); print_move_created(this); }$/;"	f	class:Movable	file:
Movable	src/pybind11/tests/test_virtual_functions.cpp	/^    Movable(const Movable &m) { value = m.value; print_copy_created(this); }$/;"	f	class:Movable	file:
Movable	src/pybind11/tests/test_virtual_functions.cpp	/^    Movable(int a, int b) : value{a+b} { print_created(this, a, b); }$/;"	f	class:Movable	file:
Movable	src/pybind11/tests/test_virtual_functions.cpp	/^class Movable {$/;"	c	file:
MovableObject	src/pybind11/tests/test_callbacks.cpp	/^  MovableObject(MovableObject &&o) : valid(o.valid) { o.valid = false; }$/;"	f	struct:MovableObject	file:
MovableObject	src/pybind11/tests/test_callbacks.cpp	/^struct MovableObject {$/;"	s	file:
MoveIssue1	src/pybind11/tests/test_copy_move.cpp	/^        MoveIssue1(int v) : v{v} {}$/;"	f	struct:__anon79d098d60102::MoveIssue1	file:
MoveIssue1	src/pybind11/tests/test_copy_move.cpp	/^    struct MoveIssue1 {$/;"	s	function:__anon79d098d60102	file:
MoveIssue2	src/pybind11/tests/test_copy_move.cpp	/^        MoveIssue2(int v) : v{v} {}$/;"	f	struct:__anon79d098d60102::MoveIssue2	file:
MoveIssue2	src/pybind11/tests/test_copy_move.cpp	/^    struct MoveIssue2 {$/;"	s	function:__anon79d098d60102	file:
MoveOnlyInt	src/pybind11/tests/test_copy_move.cpp	/^    MoveOnlyInt() { print_default_created(this); }$/;"	f	class:MoveOnlyInt	file:
MoveOnlyInt	src/pybind11/tests/test_copy_move.cpp	/^    MoveOnlyInt(MoveOnlyInt &&m) { print_move_created(this, m.value); std::swap(value, m.value);/;"	f	class:MoveOnlyInt	file:
MoveOnlyInt	src/pybind11/tests/test_copy_move.cpp	/^    MoveOnlyInt(int v) : value{std::move(v)} { print_created(this, value); }$/;"	f	class:MoveOnlyInt	file:
MoveOnlyInt	src/pybind11/tests/test_copy_move.cpp	/^class MoveOnlyInt {$/;"	c	file:
MoveOrCopyInt	src/pybind11/tests/test_copy_move.cpp	/^    MoveOrCopyInt() { print_default_created(this); }$/;"	f	class:MoveOrCopyInt	file:
MoveOrCopyInt	src/pybind11/tests/test_copy_move.cpp	/^    MoveOrCopyInt(MoveOrCopyInt &&m) { print_move_created(this, m.value); std::swap(value, m.val/;"	f	class:MoveOrCopyInt	file:
MoveOrCopyInt	src/pybind11/tests/test_copy_move.cpp	/^    MoveOrCopyInt(const MoveOrCopyInt &c) { print_copy_created(this, c.value); value = c.value; /;"	f	class:MoveOrCopyInt	file:
MoveOrCopyInt	src/pybind11/tests/test_copy_move.cpp	/^    MoveOrCopyInt(int v) : value{std::move(v)} { print_created(this, value); }$/;"	f	class:MoveOrCopyInt	file:
MoveOrCopyInt	src/pybind11/tests/test_copy_move.cpp	/^class MoveOrCopyInt {$/;"	c	file:
MoveOutContainer	src/pybind11/tests/test_stl.cpp	/^    struct MoveOutContainer {$/;"	s	function:TEST_SUBMODULE	file:
MsgContext	tools/genmsg/src/genmsg/msg_loader.py	/^class MsgContext(object):$/;"	c
MsgGenerationException	tools/genmsg/src/genmsg/base.py	/^class MsgGenerationException(Exception):$/;"	c
MsgNotFound	tools/genmsg/src/genmsg/msg_loader.py	/^class MsgNotFound(Exception):$/;"	c
MsgSpec	tools/genmsg/src/genmsg/msgs.py	/^class MsgSpec(object):$/;"	c
Multiple Inheritance	src/pybind11/docs/advanced/classes.rst	/^Multiple Inheritance$/;"	s	chapter:Classes
MyBase	src/pybind11/tests/test_class.cpp	/^    struct MyBase {$/;"	s	function:TEST_SUBMODULE	file:
MyClass	src/pybind11/tests/test_callbacks.py	/^    class MyClass:$/;"	c	function:test_bound_method_callback	file:
MyDerived	src/pybind11/tests/test_class.cpp	/^    struct MyDerived : MyBase {$/;"	s	function:TEST_SUBMODULE	file:
MyEnum	src/pybind11/tests/test_constants_and_functions.cpp	/^enum MyEnum { EFirstEntry = 1, ESecondEntry };$/;"	g	file:
MyException	src/pybind11/tests/test_exceptions.cpp	/^    explicit MyException(const char * m) : message{m} {}$/;"	f	class:MyException	file:
MyException	src/pybind11/tests/test_exceptions.cpp	/^class MyException : public std::exception {$/;"	c	file:
MyException2	src/pybind11/tests/test_exceptions.cpp	/^    explicit MyException2(const char * m) : message{m} {}$/;"	f	class:MyException2	file:
MyException2	src/pybind11/tests/test_exceptions.cpp	/^class MyException2 : public std::exception {$/;"	c	file:
MyException3	src/pybind11/tests/test_exceptions.cpp	/^    explicit MyException3(const char * m) : message{m} {}$/;"	f	class:MyException3	file:
MyException3	src/pybind11/tests/test_exceptions.cpp	/^class MyException3 {$/;"	c	file:
MyException4	src/pybind11/tests/test_exceptions.cpp	/^    explicit MyException4(const char * m) : message{m} {}$/;"	f	class:MyException4	file:
MyException4	src/pybind11/tests/test_exceptions.cpp	/^class MyException4 : public std::exception {$/;"	c	file:
MyException5	src/pybind11/tests/test_exceptions.cpp	/^    explicit MyException5(const std::string &what) : std::logic_error(what) {}$/;"	f	class:MyException5	file:
MyException5	src/pybind11/tests/test_exceptions.cpp	/^class MyException5 : public std::logic_error {$/;"	c	file:
MyException5_1	src/pybind11/tests/test_exceptions.cpp	/^class MyException5_1 : public MyException5 {$/;"	c	file:
MyObject1	src/pybind11/tests/test_smart_ptr.cpp	/^    MyObject1(int value) : value(value) {$/;"	f	class:MyObject1	file:
MyObject1	src/pybind11/tests/test_smart_ptr.cpp	/^class MyObject1 : public Object {$/;"	c	file:
MyObject2	src/pybind11/tests/test_smart_ptr.cpp	/^    MyObject2(int value) : value(value) {$/;"	f	class:MyObject2	file:
MyObject2	src/pybind11/tests/test_smart_ptr.cpp	/^class MyObject2 {$/;"	c	file:
MyObject3	src/pybind11/tests/test_smart_ptr.cpp	/^    MyObject3(int value) : value(value) {$/;"	f	class:MyObject3	file:
MyObject3	src/pybind11/tests/test_smart_ptr.cpp	/^class MyObject3 : public std::enable_shared_from_this<MyObject3> {$/;"	c	file:
MyObject4	src/pybind11/tests/test_smart_ptr.cpp	/^    MyObject4(int value) : value{value} {$/;"	f	class:MyObject4	file:
MyObject4	src/pybind11/tests/test_smart_ptr.cpp	/^class MyObject4 {$/;"	c	file:
MyObject5	src/pybind11/tests/test_smart_ptr.cpp	/^    MyObject5(int value) : value{value} {$/;"	f	class:MyObject5	file:
MyObject5	src/pybind11/tests/test_smart_ptr.cpp	/^class MyObject5 { \/\/ managed by huge_unique_ptr$/;"	c	file:
N	src/pybind11/include/pybind11/numpy.h	/^    static constexpr size_t N = sizeof...(Args);$/;"	m	struct:vectorize_helper	typeref:typename:constexpr size_t
NAMESPACE_BEGIN	src/pybind11/include/pybind11/common.h	/^#  define NAMESPACE_BEGIN(/;"	d
NAMESPACE_END	src/pybind11/include/pybind11/cast.h	/^NAMESPACE_END(detail)$/;"	f
NAMESPACE_END	src/pybind11/include/pybind11/common.h	/^#  define NAMESPACE_END(/;"	d
NAMESPACE_END	src/pybind11/include/pybind11/stl_bind.h	/^NAMESPACE_END(detail)$/;"	f
NCVirt	src/pybind11/tests/test_virtual_functions.cpp	/^class NCVirt {$/;"	c	file:
NCVirtExt	src/pybind11/tests/test_virtual_functions.py	/^    class NCVirtExt(m.NCVirt):$/;"	c	function:test_move_support	file:
NCVirtExt2	src/pybind11/tests/test_virtual_functions.py	/^    class NCVirtExt2(m.NCVirt):$/;"	c	function:test_move_support	file:
NCVirtTrampoline	src/pybind11/tests/test_virtual_functions.cpp	/^class NCVirtTrampoline : public NCVirt {$/;"	c	file:
NO_BUF	src/elka_comm/common/elka.h	/^#define NO_BUF /;"	d
NPY_ARRAY_ALIGNED_	src/pybind11/include/pybind11/numpy.h	/^        NPY_ARRAY_ALIGNED_ = 0x0100,$/;"	e	enum:npy_api::constants
NPY_ARRAY_C_CONTIGUOUS_	src/pybind11/include/pybind11/numpy.h	/^        NPY_ARRAY_C_CONTIGUOUS_ = 0x0001,$/;"	e	enum:npy_api::constants
NPY_ARRAY_ENSUREARRAY_	src/pybind11/include/pybind11/numpy.h	/^        NPY_ARRAY_ENSUREARRAY_ = 0x0040,$/;"	e	enum:npy_api::constants
NPY_ARRAY_FORCECAST_	src/pybind11/include/pybind11/numpy.h	/^        NPY_ARRAY_FORCECAST_ = 0x0010,$/;"	e	enum:npy_api::constants
NPY_ARRAY_F_CONTIGUOUS_	src/pybind11/include/pybind11/numpy.h	/^        NPY_ARRAY_F_CONTIGUOUS_ = 0x0002,$/;"	e	enum:npy_api::constants
NPY_ARRAY_OWNDATA_	src/pybind11/include/pybind11/numpy.h	/^        NPY_ARRAY_OWNDATA_ = 0x0004,$/;"	e	enum:npy_api::constants
NPY_ARRAY_WRITEABLE_	src/pybind11/include/pybind11/numpy.h	/^        NPY_ARRAY_WRITEABLE_ = 0x0400,$/;"	e	enum:npy_api::constants
NPY_BOOL_	src/pybind11/include/pybind11/numpy.h	/^        NPY_BOOL_ = 0,$/;"	e	enum:npy_api::constants
NPY_BYTE_	src/pybind11/include/pybind11/numpy.h	/^        NPY_BYTE_, NPY_UBYTE_,$/;"	e	enum:npy_api::constants
NPY_CDOUBLE_	src/pybind11/include/pybind11/numpy.h	/^        NPY_CFLOAT_, NPY_CDOUBLE_, NPY_CLONGDOUBLE_,$/;"	e	enum:npy_api::constants
NPY_CFLOAT_	src/pybind11/include/pybind11/numpy.h	/^        NPY_CFLOAT_, NPY_CDOUBLE_, NPY_CLONGDOUBLE_,$/;"	e	enum:npy_api::constants
NPY_CLONGDOUBLE_	src/pybind11/include/pybind11/numpy.h	/^        NPY_CFLOAT_, NPY_CDOUBLE_, NPY_CLONGDOUBLE_,$/;"	e	enum:npy_api::constants
NPY_DOUBLE_	src/pybind11/include/pybind11/numpy.h	/^        NPY_FLOAT_, NPY_DOUBLE_, NPY_LONGDOUBLE_,$/;"	e	enum:npy_api::constants
NPY_FLOAT_	src/pybind11/include/pybind11/numpy.h	/^        NPY_FLOAT_, NPY_DOUBLE_, NPY_LONGDOUBLE_,$/;"	e	enum:npy_api::constants
NPY_INT_	src/pybind11/include/pybind11/numpy.h	/^        NPY_INT_, NPY_UINT_,$/;"	e	enum:npy_api::constants
NPY_LONGDOUBLE_	src/pybind11/include/pybind11/numpy.h	/^        NPY_FLOAT_, NPY_DOUBLE_, NPY_LONGDOUBLE_,$/;"	e	enum:npy_api::constants
NPY_LONGLONG_	src/pybind11/include/pybind11/numpy.h	/^        NPY_LONGLONG_, NPY_ULONGLONG_,$/;"	e	enum:npy_api::constants
NPY_LONG_	src/pybind11/include/pybind11/numpy.h	/^        NPY_LONG_, NPY_ULONG_,$/;"	e	enum:npy_api::constants
NPY_OBJECT_	src/pybind11/include/pybind11/numpy.h	/^        NPY_OBJECT_ = 17,$/;"	e	enum:npy_api::constants
NPY_SHORT_	src/pybind11/include/pybind11/numpy.h	/^        NPY_SHORT_, NPY_USHORT_,$/;"	e	enum:npy_api::constants
NPY_STRING_	src/pybind11/include/pybind11/numpy.h	/^        NPY_STRING_, NPY_UNICODE_, NPY_VOID_$/;"	e	enum:npy_api::constants
NPY_UBYTE_	src/pybind11/include/pybind11/numpy.h	/^        NPY_BYTE_, NPY_UBYTE_,$/;"	e	enum:npy_api::constants
NPY_UINT_	src/pybind11/include/pybind11/numpy.h	/^        NPY_INT_, NPY_UINT_,$/;"	e	enum:npy_api::constants
NPY_ULONGLONG_	src/pybind11/include/pybind11/numpy.h	/^        NPY_LONGLONG_, NPY_ULONGLONG_,$/;"	e	enum:npy_api::constants
NPY_ULONG_	src/pybind11/include/pybind11/numpy.h	/^        NPY_LONG_, NPY_ULONG_,$/;"	e	enum:npy_api::constants
NPY_UNICODE_	src/pybind11/include/pybind11/numpy.h	/^        NPY_STRING_, NPY_UNICODE_, NPY_VOID_$/;"	e	enum:npy_api::constants
NPY_USHORT_	src/pybind11/include/pybind11/numpy.h	/^        NPY_SHORT_, NPY_USHORT_,$/;"	e	enum:npy_api::constants
NPY_VOID_	src/pybind11/include/pybind11/numpy.h	/^        NPY_STRING_, NPY_UNICODE_, NPY_VOID_$/;"	e	enum:npy_api::constants
NUM_OUTPUTS	build_elka_data_collection/inc/uORB/topics/elka_msg.h	/^	static const uint8_t NUM_OUTPUTS = 4;$/;"	m	struct:elka_msg_s	typeref:typename:const uint8_t
NUM_OUTPUTS	build_elka_data_collection/inc/uORB/topics/elka_msg.h	/^#define NUM_OUTPUTS /;"	d
NUM_OUTPUTS	build_elka_data_collection/topics_temporary_header/elka_msg.h	/^	static const uint8_t NUM_OUTPUTS = 4;$/;"	m	struct:elka_msg_s	typeref:typename:const uint8_t
NUM_OUTPUTS	build_elka_data_collection/topics_temporary_header/elka_msg.h	/^#define NUM_OUTPUTS /;"	d
NUM_RETRIES_SIZE	src/elka_comm/common/elka.h	/^#define NUM_RETRIES_SIZE /;"	d
NVectorized	src/pybind11/include/pybind11/numpy.h	/^    static constexpr size_t NVectorized = constexpr_sum(vectorize_arg<Args>::vectorize...);$/;"	m	struct:vectorize_helper	typeref:typename:constexpr size_t
NestA	src/pybind11/tests/test_operator_overloading.cpp	/^struct NestA : NestABase {$/;"	s	file:
NestABase	src/pybind11/tests/test_operator_overloading.cpp	/^struct NestABase {$/;"	s	file:
NestB	src/pybind11/tests/test_operator_overloading.cpp	/^struct NestB {$/;"	s	file:
NestC	src/pybind11/tests/test_operator_overloading.cpp	/^struct NestC {$/;"	s	file:
NoAssign	src/pybind11/tests/test_stl.cpp	/^    explicit NoAssign(int value = 0) : value(value) { }$/;"	f	struct:NoAssign	file:
NoAssign	src/pybind11/tests/test_stl.cpp	/^struct NoAssign {$/;"	s	file:
NoConstructor	src/pybind11/tests/test_class.cpp	/^    struct NoConstructor {$/;"	s	function:TEST_SUBMODULE	file:
Non-converting arguments	src/pybind11/docs/advanced/functions.rst	/^Non-converting arguments$/;"	s	chapter:Functions
Non-public destructors	src/pybind11/docs/advanced/classes.rst	/^Non-public destructors$/;"	s	chapter:Classes
NonCopyable	src/pybind11/tests/test_virtual_functions.cpp	/^    NonCopyable(NonCopyable &&o) { value = std::move(o.value); print_move_created(this); }$/;"	f	class:NonCopyable	file:
NonCopyable	src/pybind11/tests/test_virtual_functions.cpp	/^    NonCopyable(int a, int b) : value{new int(a*b)} { print_created(this, a, b); }$/;"	f	class:NonCopyable	file:
NonCopyable	src/pybind11/tests/test_virtual_functions.cpp	/^class NonCopyable {$/;"	c	file:
NonPODClass	src/pybind11/tests/test_numpy_vectorize.cpp	/^    NonPODClass(int v) : value{v} {}$/;"	f	struct:NonPODClass	file:
NonPODClass	src/pybind11/tests/test_numpy_vectorize.cpp	/^struct NonPODClass {$/;"	s	file:
NonZeroIterator	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    NonZeroIterator(const T* ptr) : ptr_(ptr) {}$/;"	f	class:NonZeroIterator	file:
NonZeroIterator	src/pybind11/tests/test_sequences_and_iterators.cpp	/^class NonZeroIterator {$/;"	c	file:
NonZeroSentinel	src/pybind11/tests/test_sequences_and_iterators.cpp	/^class NonZeroSentinel {};$/;"	c	file:
NoneTester	src/pybind11/tests/test_methods_and_attributes.cpp	/^class NoneTester { public: int answer = 42; };$/;"	c	file:
NotRegistered	src/pybind11/tests/test_methods_and_attributes.cpp	/^class NotRegistered {};$/;"	c	file:
Note	src/pybind11/tools/clang/cindex.py	/^    Note    = 1$/;"	v	class:Diagnostic
NumPy	src/pybind11/docs/advanced/pycpp/numpy.rst	/^NumPy$/;"	c
ORB_DECLARE	inc/uORB/uORB.h	/^# define ORB_DECLARE(/;"	d
ORB_DEFINE	inc/uORB/uORB.h	/^#define ORB_DEFINE(/;"	d
ORB_ID	inc/uORB/uORB.h	/^#define ORB_ID(/;"	d
ORB_ID_VEHICLE_ATTITUDE_CONTROLS	inc/uORB/uORB.h	/^#define ORB_ID_VEHICLE_ATTITUDE_CONTROLS /;"	d
ORB_MULTI_MAX_INSTANCES	inc/uORB/uORB.h	/^#define ORB_MULTI_MAX_INSTANCES	/;"	d
ORB_PRIO	inc/uORB/uORB.h	/^enum ORB_PRIO {$/;"	g
ORB_PRIO_DEFAULT	inc/uORB/uORB.h	/^	ORB_PRIO_DEFAULT = 75,$/;"	e	enum:ORB_PRIO
ORB_PRIO_HIGH	inc/uORB/uORB.h	/^	ORB_PRIO_HIGH = 100,$/;"	e	enum:ORB_PRIO
ORB_PRIO_LOW	inc/uORB/uORB.h	/^	ORB_PRIO_LOW = 50,$/;"	e	enum:ORB_PRIO
ORB_PRIO_MAX	inc/uORB/uORB.h	/^	ORB_PRIO_MAX = 255$/;"	e	enum:ORB_PRIO
ORB_PRIO_MIN	inc/uORB/uORB.h	/^	ORB_PRIO_MIN = 1, \/\/ leave 0 free for other purposes, eg. marking an uninitialized value$/;"	e	enum:ORB_PRIO
ORB_PRIO_VERY_HIGH	inc/uORB/uORB.h	/^	ORB_PRIO_VERY_HIGH = 125,$/;"	e	enum:ORB_PRIO
ORB_PRIO_VERY_LOW	inc/uORB/uORB.h	/^	ORB_PRIO_VERY_LOW = 25,$/;"	e	enum:ORB_PRIO
OUTPUT_FILE_EXT	tools/px_generate_uorb_topic_files.py	/^OUTPUT_FILE_EXT = ['.h', '.cpp']$/;"	v
Object	src/pybind11/tests/object.h	/^    Object() { print_default_created(this); }$/;"	f	class:Object
Object	src/pybind11/tests/object.h	/^    Object(const Object &) : m_refCount(0) { print_copy_created(this); }$/;"	f	class:Object
Object	src/pybind11/tests/object.h	/^class Object {$/;"	c
Object-oriented code	src/pybind11/docs/classes.rst	/^Object-oriented code$/;"	c
Operator overloading	src/pybind11/docs/advanced/classes.rst	/^Operator overloading$/;"	s	chapter:Classes
Output	src/pybind11/tests/conftest.py	/^class Output(object):$/;"	c
Overload resolution order	src/pybind11/docs/advanced/functions.rst	/^Overload resolution order$/;"	s	chapter:Functions
Overloaded methods	src/pybind11/docs/classes.rst	/^Overloaded methods$/;"	s	chapter:Object-oriented code
OverrideTest	src/pybind11/tests/test_virtual_functions.cpp	/^        explicit OverrideTest(const std::string &v) : v{v} {}$/;"	f	class:TEST_SUBMODULE::OverrideTest	file:
OverrideTest	src/pybind11/tests/test_virtual_functions.cpp	/^    class OverrideTest {$/;"	c	function:TEST_SUBMODULE	file:
Overriding virtual functions in Python	src/pybind11/docs/advanced/classes.rst	/^Overriding virtual functions in Python$/;"	s	chapter:Classes
Overview	src/pybind11/docs/advanced/cast/overview.rst	/^Overview$/;"	c
PACKAGE	tools/px_generate_uorb_topic_files.py	/^PACKAGE = 'px4'$/;"	v
PACKET_LENGTH	serial/python/packet.py	/^    PACKET_LENGTH = sum(element_lengths.values()) -\\$/;"	v	class:SpektrumPacket
PAPER	src/pybind11/docs/Makefile	/^PAPER         =$/;"	m
PAPER	tools/genmsg/doc/Makefile	/^PAPER         =$/;"	m
PAPEROPT_a4	src/pybind11/docs/Makefile	/^PAPEROPT_a4     = -D latex_paper_size=a4$/;"	m
PAPEROPT_a4	tools/genmsg/doc/Makefile	/^PAPEROPT_a4     = -D latex_paper_size=a4$/;"	m
PAPEROPT_letter	src/pybind11/docs/Makefile	/^PAPEROPT_letter = -D latex_paper_size=letter$/;"	m
PAPEROPT_letter	tools/genmsg/doc/Makefile	/^PAPEROPT_letter = -D latex_paper_size=letter$/;"	m
PARSE_CACHE_COMPLETION_RESULTS	src/pybind11/tools/clang/cindex.py	/^    PARSE_CACHE_COMPLETION_RESULTS = 8$/;"	v	class:TranslationUnit
PARSE_DETAILED_PROCESSING_RECORD	src/pybind11/tools/clang/cindex.py	/^    PARSE_DETAILED_PROCESSING_RECORD = 1$/;"	v	class:TranslationUnit
PARSE_INCLUDE_BRIEF_COMMENTS_IN_CODE_COMPLETION	src/pybind11/tools/clang/cindex.py	/^    PARSE_INCLUDE_BRIEF_COMMENTS_IN_CODE_COMPLETION = 128$/;"	v	class:TranslationUnit
PARSE_INCOMPLETE	src/pybind11/tools/clang/cindex.py	/^    PARSE_INCOMPLETE = 2$/;"	v	class:TranslationUnit
PARSE_NONE	src/pybind11/tools/clang/cindex.py	/^    PARSE_NONE = 0$/;"	v	class:TranslationUnit
PARSE_PRECOMPILED_PREAMBLE	src/pybind11/tools/clang/cindex.py	/^    PARSE_PRECOMPILED_PREAMBLE = 4$/;"	v	class:TranslationUnit
PARSE_SKIP_FUNCTION_BODIES	src/pybind11/tools/clang/cindex.py	/^    PARSE_SKIP_FUNCTION_BODIES = 64$/;"	v	class:TranslationUnit
PKG	tools/genmsg/test/test_genmsg_msgs.py	/^PKG = 'genmsg'$/;"	v
PLATFORM_ID	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	file:
PORT_NONE	src/elka_comm/common/elka.h	/^#define PORT_NONE /;"	d
PORT_NUM	src/elka_comm/common/elka.h	/^#define PORT_NUM /;"	d
PORT_RADIO	src/elka_comm/common/elka.h	/^#define PORT_RADIO /;"	d
PORT_TYPE	src/elka_comm/common/elka.h	/^#define PORT_TYPE /;"	d
PORT_UART	src/elka_comm/common/elka.h	/^#define PORT_UART /;"	d
PORT_WIFI	src/elka_comm/common/elka.h	/^#define PORT_WIFI /;"	d
POSIX_SIDE	src/elka_comm/common/elka.h	/^#define POSIX_SIDE /;"	d
PRDIT	src/elka_comm/common/elka.h	/^#define PRDIT /;"	d
PRDIT	src/elka_comm/common/elka_comm.cpp	/^#define PRDIT /;"	d	file:
PRDPT	src/elka_comm/common/elka.h	/^#define PRDPT /;"	d
PRDPT	src/elka_comm/common/elka_comm.cpp	/^#define PRDPT /;"	d	file:
PRIMITIVE_TYPES	tools/genmsg/src/genmsg/msgs.py	/^PRIMITIVE_TYPES = ['int8','uint8','int16','uint16','int32','uint32','int64','uint64','float32','/;"	v
PRINT_LIST	src/pybind11/tools/mkdoc.py	/^PRINT_LIST = [$/;"	v
PRIORITY_QUEUE	src/elka_comm/common/elka.h	/^#define PRIORITY_QUEUE /;"	d
PRMIT	src/elka_comm/common/elka.h	/^#define PRMIT /;"	d
PRMIT	src/elka_comm/common/elka_comm.cpp	/^#define PRMIT /;"	d	file:
PRN_SEPARATOR	tools/genmsg/src/genmsg/names.py	/^PRN_SEPARATOR = '\/'$/;"	v
PROC_SIDE	src/elka_comm/common/elka.h	/^#define PROC_SIDE /;"	d
PTMFBuffer	src/pybind11/tests/test_buffers.cpp	/^struct PTMFBuffer {$/;"	s	file:
PX4Port	src/elka_comm/posix/elka_devices.cpp	/^elka::PX4Port::PX4Port(uint8_t port_num, uint8_t port_type,$/;"	f	class:elka::PX4Port
PX4Port	src/elka_comm/posix/elka_devices.h	/^class elka::PX4Port : public elka::CommPort {$/;"	c	class:elka
PYBIND11_BASEN	src/pybind11/tests/test_multiple_inheritance.cpp	/^    #define PYBIND11_BASEN(/;"	d	file:
PYBIND11_BINARY_OPERATOR	src/pybind11/include/pybind11/operators.h	/^#define PYBIND11_BINARY_OPERATOR(/;"	d
PYBIND11_BYTES_AS_STRING	src/pybind11/include/pybind11/common.h	/^#define PYBIND11_BYTES_AS_STRING /;"	d
PYBIND11_BYTES_AS_STRING_AND_SIZE	src/pybind11/include/pybind11/common.h	/^#define PYBIND11_BYTES_AS_STRING_AND_SIZE /;"	d
PYBIND11_BYTES_CHECK	src/pybind11/include/pybind11/common.h	/^#define PYBIND11_BYTES_CHECK /;"	d
PYBIND11_BYTES_FROM_STRING	src/pybind11/include/pybind11/common.h	/^#define PYBIND11_BYTES_FROM_STRING /;"	d
PYBIND11_BYTES_FROM_STRING_AND_SIZE	src/pybind11/include/pybind11/common.h	/^#define PYBIND11_BYTES_FROM_STRING_AND_SIZE /;"	d
PYBIND11_BYTES_NAME	src/pybind11/include/pybind11/common.h	/^#define PYBIND11_BYTES_NAME /;"	d
PYBIND11_BYTES_SIZE	src/pybind11/include/pybind11/common.h	/^#define PYBIND11_BYTES_SIZE /;"	d
PYBIND11_CONSTEXPR_DESCR	src/pybind11/include/pybind11/descr.h	/^#define PYBIND11_CONSTEXPR_DESCR$/;"	d
PYBIND11_CPP14	src/pybind11/include/pybind11/common.h	/^#    define PYBIND11_CPP14$/;"	d
PYBIND11_CPP17	src/pybind11/include/pybind11/common.h	/^#      define PYBIND11_CPP17$/;"	d
PYBIND11_DEBUG_MARKER	src/pybind11/include/pybind11/common.h	/^#    define PYBIND11_DEBUG_MARKER$/;"	d
PYBIND11_DECLARE_HOLDER_TYPE	src/pybind11/include/pybind11/cast.h	/^#define PYBIND11_DECLARE_HOLDER_TYPE(/;"	d
PYBIND11_DECL_CHAR_FMT	src/pybind11/include/pybind11/numpy.h	/^#define PYBIND11_DECL_CHAR_FMT /;"	d
PYBIND11_DEPRECATED	src/pybind11/include/pybind11/common.h	/^#  define PYBIND11_DEPRECATED(/;"	d
PYBIND11_DESCR	src/pybind11/include/pybind11/descr.h	/^#define PYBIND11_DESCR /;"	d
PYBIND11_EMBEDDED_MODULE	src/pybind11/include/pybind11/embed.h	/^#define PYBIND11_EMBEDDED_MODULE(/;"	d
PYBIND11_EMBEDDED_MODULE	src/pybind11/tests/test_cmake_build/embed.cpp	/^PYBIND11_EMBEDDED_MODULE(test_cmake_build, m) {$/;"	f
PYBIND11_EMBEDDED_MODULE	src/pybind11/tests/test_embed/test_interpreter.cpp	/^PYBIND11_EMBEDDED_MODULE(widget_module, m) {$/;"	f
PYBIND11_EMBEDDED_MODULE_IMPL	src/pybind11/include/pybind11/embed.h	/^#  define PYBIND11_EMBEDDED_MODULE_IMPL(/;"	d
PYBIND11_EVAL	src/pybind11/include/pybind11/numpy.h	/^#define PYBIND11_EVAL(/;"	d
PYBIND11_EVAL0	src/pybind11/include/pybind11/numpy.h	/^#define PYBIND11_EVAL0(/;"	d
PYBIND11_EVAL1	src/pybind11/include/pybind11/numpy.h	/^#define PYBIND11_EVAL1(/;"	d
PYBIND11_EVAL2	src/pybind11/include/pybind11/numpy.h	/^#define PYBIND11_EVAL2(/;"	d
PYBIND11_EVAL3	src/pybind11/include/pybind11/numpy.h	/^#define PYBIND11_EVAL3(/;"	d
PYBIND11_EVAL4	src/pybind11/include/pybind11/numpy.h	/^#define PYBIND11_EVAL4(/;"	d
PYBIND11_EXPAND_SIDE_EFFECTS	src/pybind11/include/pybind11/common.h	/^#define PYBIND11_EXPAND_SIDE_EFFECTS(/;"	d
PYBIND11_EXPORT	src/pybind11/include/pybind11/common.h	/^#    define PYBIND11_EXPORT /;"	d
PYBIND11_FIELD_DESCRIPTOR	src/pybind11/include/pybind11/numpy.h	/^#define PYBIND11_FIELD_DESCRIPTOR(/;"	d
PYBIND11_FIELD_DESCRIPTOR_EX	src/pybind11/include/pybind11/numpy.h	/^#define PYBIND11_FIELD_DESCRIPTOR_EX(/;"	d
PYBIND11_FROM_STRING	src/pybind11/include/pybind11/common.h	/^#define PYBIND11_FROM_STRING /;"	d
PYBIND11_HAS_EXP_OPTIONAL	src/pybind11/include/pybind11/stl.h	/^#    define PYBIND11_HAS_EXP_OPTIONAL /;"	d
PYBIND11_HAS_OPTIONAL	src/pybind11/include/pybind11/stl.h	/^#    define PYBIND11_HAS_OPTIONAL /;"	d
PYBIND11_HAS_OPTIONAL	src/pybind11/include/pybind11/stl.h	/^#  define PYBIND11_HAS_OPTIONAL /;"	d
PYBIND11_HAS_STRING_VIEW	src/pybind11/include/pybind11/cast.h	/^#      define PYBIND11_HAS_STRING_VIEW$/;"	d
PYBIND11_HAS_STRING_VIEW	src/pybind11/include/pybind11/cast.h	/^#    define PYBIND11_HAS_STRING_VIEW$/;"	d
PYBIND11_HAS_VARIANT	src/pybind11/include/pybind11/stl.h	/^#    define PYBIND11_HAS_VARIANT /;"	d
PYBIND11_HAS_VARIANT	src/pybind11/include/pybind11/stl.h	/^#  define PYBIND11_HAS_VARIANT /;"	d
PYBIND11_INPLACE_OPERATOR	src/pybind11/include/pybind11/operators.h	/^#define PYBIND11_INPLACE_OPERATOR(/;"	d
PYBIND11_INSTANCE_METHOD_CHECK	src/pybind11/include/pybind11/common.h	/^#define PYBIND11_INSTANCE_METHOD_CHECK /;"	d
PYBIND11_INSTANCE_METHOD_GET_FUNCTION	src/pybind11/include/pybind11/common.h	/^#define PYBIND11_INSTANCE_METHOD_GET_FUNCTION /;"	d
PYBIND11_INSTANCE_METHOD_NEW	src/pybind11/include/pybind11/common.h	/^#define PYBIND11_INSTANCE_METHOD_NEW(/;"	d
PYBIND11_INTERNALS_ID	src/pybind11/include/pybind11/common.h	/^#define PYBIND11_INTERNALS_ID /;"	d
PYBIND11_LONG_AS_LONGLONG	src/pybind11/include/pybind11/common.h	/^#define PYBIND11_LONG_AS_LONGLONG(/;"	d
PYBIND11_LONG_CHECK	src/pybind11/include/pybind11/common.h	/^#define PYBIND11_LONG_CHECK(/;"	d
PYBIND11_MAKE_OPAQUE	src/pybind11/include/pybind11/cast.h	/^#define PYBIND11_MAKE_OPAQUE(/;"	d
PYBIND11_MAP2_LIST	src/pybind11/include/pybind11/numpy.h	/^#define PYBIND11_MAP2_LIST(/;"	d
PYBIND11_MAP2_LIST0	src/pybind11/include/pybind11/numpy.h	/^#define PYBIND11_MAP2_LIST0(/;"	d
PYBIND11_MAP2_LIST1	src/pybind11/include/pybind11/numpy.h	/^#define PYBIND11_MAP2_LIST1(/;"	d
PYBIND11_MAP2_LIST_NEXT	src/pybind11/include/pybind11/numpy.h	/^#define PYBIND11_MAP2_LIST_NEXT(/;"	d
PYBIND11_MAP2_LIST_NEXT1	src/pybind11/include/pybind11/numpy.h	/^#define PYBIND11_MAP2_LIST_NEXT1(/;"	d
PYBIND11_MAP_COMMA	src/pybind11/include/pybind11/numpy.h	/^#define PYBIND11_MAP_COMMA /;"	d
PYBIND11_MAP_END	src/pybind11/include/pybind11/numpy.h	/^#define PYBIND11_MAP_END(/;"	d
PYBIND11_MAP_GET_END	src/pybind11/include/pybind11/numpy.h	/^#define PYBIND11_MAP_GET_END(/;"	d
PYBIND11_MAP_LIST	src/pybind11/include/pybind11/numpy.h	/^#define PYBIND11_MAP_LIST(/;"	d
PYBIND11_MAP_LIST0	src/pybind11/include/pybind11/numpy.h	/^#define PYBIND11_MAP_LIST0(/;"	d
PYBIND11_MAP_LIST1	src/pybind11/include/pybind11/numpy.h	/^#define PYBIND11_MAP_LIST1(/;"	d
PYBIND11_MAP_LIST_NEXT	src/pybind11/include/pybind11/numpy.h	/^#define PYBIND11_MAP_LIST_NEXT(/;"	d
PYBIND11_MAP_LIST_NEXT1	src/pybind11/include/pybind11/numpy.h	/^#define PYBIND11_MAP_LIST_NEXT1(/;"	d
PYBIND11_MAP_NEXT	src/pybind11/include/pybind11/numpy.h	/^#define PYBIND11_MAP_NEXT(/;"	d
PYBIND11_MAP_NEXT0	src/pybind11/include/pybind11/numpy.h	/^#define PYBIND11_MAP_NEXT0(/;"	d
PYBIND11_MAP_NEXT1	src/pybind11/include/pybind11/numpy.h	/^#define PYBIND11_MAP_NEXT1(/;"	d
PYBIND11_MAP_OUT	src/pybind11/include/pybind11/numpy.h	/^#define PYBIND11_MAP_OUT$/;"	d
PYBIND11_MODULE	src/elka_comm/common/elka_comm.cpp	/^PYBIND11_MODULE(elka_comm__common, m) {$/;"	f
PYBIND11_MODULE	src/pybind11/include/pybind11/common.h	/^#define PYBIND11_MODULE(/;"	d
PYBIND11_MODULE	src/pybind11/tests/pybind11_tests.cpp	/^PYBIND11_MODULE(pybind11_tests, m) {$/;"	f
PYBIND11_MODULE	src/pybind11/tests/test_cmake_build/main.cpp	/^PYBIND11_MODULE(test_cmake_build, m) {$/;"	f
PYBIND11_NOINLINE	src/pybind11/include/pybind11/common.h	/^#  define PYBIND11_NOINLINE /;"	d
PYBIND11_NUMPY_DTYPE	src/pybind11/include/pybind11/numpy.h	/^# define PYBIND11_NUMPY_DTYPE(/;"	d
PYBIND11_NUMPY_DTYPE	src/pybind11/include/pybind11/numpy.h	/^#define PYBIND11_NUMPY_DTYPE(/;"	d
PYBIND11_NUMPY_DTYPE_EX	src/pybind11/include/pybind11/numpy.h	/^# define PYBIND11_NUMPY_DTYPE_EX(/;"	d
PYBIND11_NUMPY_DTYPE_EX	src/pybind11/include/pybind11/numpy.h	/^#define PYBIND11_NUMPY_DTYPE_EX(/;"	d
PYBIND11_OBJECT	src/pybind11/include/pybind11/pytypes.h	/^#define PYBIND11_OBJECT(/;"	d
PYBIND11_OBJECT_COMMON	src/pybind11/include/pybind11/pytypes.h	/^#define PYBIND11_OBJECT_COMMON(/;"	d
PYBIND11_OBJECT_CVT	src/pybind11/include/pybind11/pytypes.h	/^#define PYBIND11_OBJECT_CVT(/;"	d
PYBIND11_OBJECT_DEFAULT	src/pybind11/include/pybind11/pytypes.h	/^#define PYBIND11_OBJECT_DEFAULT(/;"	d
PYBIND11_OVERLOAD	src/pybind11/include/pybind11/pybind11.h	/^#define PYBIND11_OVERLOAD(/;"	d
PYBIND11_OVERLOAD_CAST	src/pybind11/include/pybind11/common.h	/^#define PYBIND11_OVERLOAD_CAST /;"	d
PYBIND11_OVERLOAD_INT	src/pybind11/include/pybind11/pybind11.h	/^#define PYBIND11_OVERLOAD_INT(/;"	d
PYBIND11_OVERLOAD_NAME	src/pybind11/include/pybind11/pybind11.h	/^#define PYBIND11_OVERLOAD_NAME(/;"	d
PYBIND11_OVERLOAD_PURE	src/pybind11/include/pybind11/pybind11.h	/^#define PYBIND11_OVERLOAD_PURE(/;"	d
PYBIND11_OVERLOAD_PURE_NAME	src/pybind11/include/pybind11/pybind11.h	/^#define PYBIND11_OVERLOAD_PURE_NAME(/;"	d
PYBIND11_PACKED	src/pybind11/tests/test_numpy_dtypes.cpp	/^#define PYBIND11_PACKED(/;"	d	file:
PYBIND11_PLUGIN	src/pybind11/include/pybind11/common.h	/^#define PYBIND11_PLUGIN(/;"	d
PYBIND11_PLUGIN_IMPL	src/pybind11/include/pybind11/common.h	/^#define PYBIND11_PLUGIN_IMPL(/;"	d
PYBIND11_RUNTIME_EXCEPTION	src/pybind11/include/pybind11/common.h	/^#define PYBIND11_RUNTIME_EXCEPTION(/;"	d
PYBIND11_SLICE_OBJECT	src/pybind11/include/pybind11/common.h	/^#define PYBIND11_SLICE_OBJECT /;"	d
PYBIND11_STRINGIFY	src/pybind11/include/pybind11/common.h	/^#define PYBIND11_STRINGIFY(/;"	d
PYBIND11_STRING_NAME	src/pybind11/include/pybind11/common.h	/^#define PYBIND11_STRING_NAME /;"	d
PYBIND11_STR_TYPE	src/pybind11/include/pybind11/common.h	/^#define PYBIND11_STR_TYPE /;"	d
PYBIND11_TOSTRING	src/pybind11/include/pybind11/common.h	/^#define PYBIND11_TOSTRING(/;"	d
PYBIND11_TRY_NEXT_OVERLOAD	src/pybind11/include/pybind11/common.h	/^#define PYBIND11_TRY_NEXT_OVERLOAD /;"	d
PYBIND11_TYPE_CASTER	src/pybind11/include/pybind11/cast.h	/^#define PYBIND11_TYPE_CASTER(/;"	d
PYBIND11_UNARY_OPERATOR	src/pybind11/include/pybind11/operators.h	/^#define PYBIND11_UNARY_OPERATOR(/;"	d
PYBIND11_VERSION_MAJOR	src/pybind11/include/pybind11/common.h	/^#define PYBIND11_VERSION_MAJOR /;"	d
PYBIND11_VERSION_MINOR	src/pybind11/include/pybind11/common.h	/^#define PYBIND11_VERSION_MINOR /;"	d
PYBIND11_VERSION_PATCH	src/pybind11/include/pybind11/common.h	/^#define PYBIND11_VERSION_PATCH /;"	d
PacketTypeException	serial/python/exceptions.py	/^class PacketTypeException(Exception):$/;"	c
Parent	src/pybind11/tests/test_call_policies.cpp	/^    Parent() { py::print("Allocating parent."); }$/;"	f	class:Parent	file:
Parent	src/pybind11/tests/test_call_policies.cpp	/^class Parent {$/;"	c	file:
ParentGC	src/pybind11/tests/test_call_policies.cpp	/^class ParentGC : public Parent {$/;"	c	file:
Parse	serial/python/parse.py	/^class Parse(QThread):$/;"	c
PartialNestedStruct	src/pybind11/tests/test_numpy_dtypes.cpp	/^struct PartialNestedStruct {$/;"	s	file:
PartialStruct	src/pybind11/tests/test_numpy_dtypes.cpp	/^struct PartialStruct {$/;"	s	file:
Partitioning code over multiple extension modules	src/pybind11/docs/advanced/misc.rst	/^Partitioning code over multiple extension modules$/;"	s	chapter:Miscellaneous
Pass-by-reference	src/pybind11/docs/advanced/cast/eigen.rst	/^Pass-by-reference$/;"	s	chapter:Eigen
Pass-by-value	src/pybind11/docs/advanced/cast/eigen.rst	/^Pass-by-value$/;"	s	chapter:Eigen
Passing Python strings to C++	src/pybind11/docs/advanced/cast/strings.rst	/^Passing Python strings to C++$/;"	s	chapter:Strings, bytes and Unicode conversions
Passing bytes to C++	src/pybind11/docs/advanced/cast/strings.rst	/^Passing bytes to C++$/;"	S	section:Passing Python strings to C++
Passing extra arguments to ``def`` or ``class_``	src/pybind11/docs/reference.rst	/^Passing extra arguments to ``def`` or ``class_``$/;"	s	chapter:Reference
Payload	src/pybind11/tests/test_callbacks.cpp	/^    Payload() {$/;"	f	struct:Payload	file:
Payload	src/pybind11/tests/test_callbacks.cpp	/^    Payload(Payload &&) {$/;"	f	struct:Payload	file:
Payload	src/pybind11/tests/test_callbacks.cpp	/^    Payload(const Payload &) {$/;"	f	struct:Payload	file:
Payload	src/pybind11/tests/test_callbacks.cpp	/^struct Payload {$/;"	s	file:
Pet	src/pybind11/tests/test_class.cpp	/^        Pet(const std::string &name, const std::string &species)$/;"	f	class:TEST_SUBMODULE::Pet	file:
Pet	src/pybind11/tests/test_class.cpp	/^    class Pet {$/;"	c	function:TEST_SUBMODULE	file:
Pickleable	src/pybind11/tests/test_pickling.cpp	/^    Pickleable(const std::string &value) : m_value(value) { }$/;"	f	class:Pickleable	file:
Pickleable	src/pybind11/tests/test_pickling.cpp	/^class Pickleable {$/;"	c	file:
PickleableWithDict	src/pybind11/tests/test_pickling.cpp	/^    PickleableWithDict(const std::string &value) : value(value) { }$/;"	f	class:PickleableWithDict	file:
PickleableWithDict	src/pybind11/tests/test_pickling.cpp	/^class PickleableWithDict {$/;"	c	file:
Pickling support	src/pybind11/docs/advanced/classes.rst	/^Pickling support$/;"	s	chapter:Classes
PlotData	serial/python/gui.py	/^class PlotData(object):$/;"	c
PrivateOpNew	src/pybind11/tests/test_copy_move.cpp	/^struct PrivateOpNew {$/;"	s	file:
Provided conversions	src/pybind11/docs/advanced/cast/chrono.rst	/^Provided conversions$/;"	s	chapter:Chrono
Providing cmake code to catkin	tools/genmsg/doc/developer.rst	/^Providing cmake code to catkin$/;"	s	chapter:Developer documenation
PyA	src/pybind11/tests/test_virtual_functions.cpp	/^        PyA() { py::print("PyA.PyA()"); }$/;"	f	struct:TEST_SUBMODULE::PyA	file:
PyA	src/pybind11/tests/test_virtual_functions.cpp	/^    struct PyA : A {$/;"	s	function:TEST_SUBMODULE	file:
PyA2	src/pybind11/tests/test_virtual_functions.cpp	/^        PyA2() { py::print("PyA2.PyA2()"); }$/;"	f	struct:TEST_SUBMODULE::PyA2	file:
PyA2	src/pybind11/tests/test_virtual_functions.cpp	/^    struct PyA2 : A2 {$/;"	s	function:TEST_SUBMODULE	file:
PyA_Repeat	src/pybind11/tests/test_virtual_functions.cpp	/^class PyA_Repeat : public A_Repeat {$/;"	c	file:
PyA_Tpl	src/pybind11/tests/test_virtual_functions.cpp	/^class PyA_Tpl : public Base {$/;"	c	file:
PyArrayDescr_Check_	src/pybind11/include/pybind11/numpy.h	/^    bool PyArrayDescr_Check_(PyObject *obj) const {$/;"	f	struct:npy_api	typeref:typename:bool
PyArrayDescr_Proxy	src/pybind11/include/pybind11/numpy.h	/^struct PyArrayDescr_Proxy {$/;"	s
PyArrayDescr_Type_	src/pybind11/include/pybind11/numpy.h	/^    PyTypeObject *PyArrayDescr_Type_;$/;"	m	struct:npy_api	typeref:typename:PyTypeObject *
PyArray_Check_	src/pybind11/include/pybind11/numpy.h	/^    bool PyArray_Check_(PyObject *obj) const {$/;"	f	struct:npy_api	typeref:typename:bool
PyArray_CopyInto_	src/pybind11/include/pybind11/numpy.h	/^    int (*PyArray_CopyInto_)(PyObject *, PyObject *);$/;"	m	struct:npy_api	typeref:typename:int (*)(PyObject *,PyObject *)
PyArray_DescrConverter_	src/pybind11/include/pybind11/numpy.h	/^    int (*PyArray_DescrConverter_) (PyObject *, PyObject **);$/;"	m	struct:npy_api	typeref:typename:int (*)(PyObject *,PyObject **)
PyArray_DescrFromScalar_	src/pybind11/include/pybind11/numpy.h	/^    PyObject *(*PyArray_DescrFromScalar_)(PyObject *);$/;"	m	struct:npy_api	typeref:typename:PyObject * (*)(PyObject *)
PyArray_DescrFromType_	src/pybind11/include/pybind11/numpy.h	/^    PyObject *(*PyArray_DescrFromType_)(int);$/;"	m	struct:npy_api	typeref:typename:PyObject * (*)(int)
PyArray_DescrNewFromType_	src/pybind11/include/pybind11/numpy.h	/^    PyObject *(*PyArray_DescrNewFromType_)(int);$/;"	m	struct:npy_api	typeref:typename:PyObject * (*)(int)
PyArray_Dims	src/pybind11/include/pybind11/numpy.h	/^    } PyArray_Dims;$/;"	t	struct:npy_api	typeref:struct:npy_api::__anonc556634c0108
PyArray_EquivTypes_	src/pybind11/include/pybind11/numpy.h	/^    bool (*PyArray_EquivTypes_) (PyObject *, PyObject *);$/;"	m	struct:npy_api	typeref:typename:bool (*)(PyObject *,PyObject *)
PyArray_FromAny_	src/pybind11/include/pybind11/numpy.h	/^    PyObject *(*PyArray_FromAny_) (PyObject *, PyObject *, int, int, int, PyObject *);$/;"	m	struct:npy_api	typeref:typename:PyObject * (*)(PyObject *,PyObject *,int,int,int,PyObject *)
PyArray_GetArrayParamsFromObject_	src/pybind11/include/pybind11/numpy.h	/^    int (*PyArray_GetArrayParamsFromObject_)(PyObject *, PyObject *, char, PyObject **, int *,$/;"	m	struct:npy_api	typeref:typename:int (*)(PyObject *,PyObject *,char,PyObject **,int *,Py_ssize_t *,PyObject **,PyObject *)
PyArray_GetNDArrayCFeatureVersion_	src/pybind11/include/pybind11/numpy.h	/^    unsigned int (*PyArray_GetNDArrayCFeatureVersion_)();$/;"	m	struct:npy_api	typeref:typename:unsigned int (*)()
PyArray_NewCopy_	src/pybind11/include/pybind11/numpy.h	/^    PyObject *(*PyArray_NewCopy_)(PyObject *, int);$/;"	m	struct:npy_api	typeref:typename:PyObject * (*)(PyObject *,int)
PyArray_NewFromDescr_	src/pybind11/include/pybind11/numpy.h	/^    PyObject *(*PyArray_NewFromDescr_)$/;"	m	struct:npy_api	typeref:typename:PyObject * (*)(PyTypeObject *,PyObject *,int,Py_intptr_t *,Py_intptr_t *,void *,int,PyObject *)
PyArray_Proxy	src/pybind11/include/pybind11/numpy.h	/^struct PyArray_Proxy {$/;"	s
PyArray_Resize_	src/pybind11/include/pybind11/numpy.h	/^    PyObject* (*PyArray_Resize_)(PyObject*, PyArray_Dims*, int, int);$/;"	m	struct:npy_api	typeref:typename:PyObject * (*)(PyObject *,PyArray_Dims *,int,int)
PyArray_SetBaseObject_	src/pybind11/include/pybind11/numpy.h	/^    int (*PyArray_SetBaseObject_)(PyObject *, PyObject *);$/;"	m	struct:npy_api	typeref:typename:int (*)(PyObject *,PyObject *)
PyArray_Squeeze_	src/pybind11/include/pybind11/numpy.h	/^    PyObject *(*PyArray_Squeeze_)(PyObject *);$/;"	m	struct:npy_api	typeref:typename:PyObject * (*)(PyObject *)
PyArray_Type_	src/pybind11/include/pybind11/numpy.h	/^    PyTypeObject *PyArray_Type_;$/;"	m	struct:npy_api	typeref:typename:PyTypeObject *
PyB_Repeat	src/pybind11/tests/test_virtual_functions.cpp	/^class PyB_Repeat : public B_Repeat {$/;"	c	file:
PyB_Tpl	src/pybind11/tests/test_virtual_functions.cpp	/^class PyB_Tpl : public PyA_Tpl<Base> {$/;"	c	file:
PyC_Repeat	src/pybind11/tests/test_virtual_functions.cpp	/^class PyC_Repeat : public C_Repeat {$/;"	c	file:
PyClass1	src/pybind11/tests/test_virtual_functions.py	/^    class PyClass1(m.DispatchIssue):$/;"	c	function:test_dispatch_issue	file:
PyClass2	src/pybind11/tests/test_virtual_functions.py	/^    class PyClass2(m.DispatchIssue):$/;"	c	function:test_dispatch_issue	file:
PyD_Repeat	src/pybind11/tests/test_virtual_functions.cpp	/^class PyD_Repeat : public D_Repeat {$/;"	c	file:
PyDateTime_DELTA_GET_DAYS	src/pybind11/include/pybind11/chrono.h	/^#define PyDateTime_DELTA_GET_DAYS(/;"	d
PyDateTime_DELTA_GET_MICROSECONDS	src/pybind11/include/pybind11/chrono.h	/^#define PyDateTime_DELTA_GET_MICROSECONDS(/;"	d
PyDateTime_DELTA_GET_SECONDS	src/pybind11/include/pybind11/chrono.h	/^#define PyDateTime_DELTA_GET_SECONDS(/;"	d
PyExampleVirt	src/pybind11/tests/test_virtual_functions.cpp	/^class PyExampleVirt : public ExampleVirt {$/;"	c	file:
PyIterable_Check	src/pybind11/include/pybind11/pytypes.h	/^inline bool PyIterable_Check(PyObject *obj) {$/;"	f	typeref:typename:bool
PyNone_Check	src/pybind11/include/pybind11/pytypes.h	/^inline bool PyNone_Check(PyObject *o) { return o == Py_None; }$/;"	f	typeref:typename:bool
PyOverrideTest	src/pybind11/tests/test_virtual_functions.cpp	/^    class PyOverrideTest : public OverrideTest {$/;"	c	function:TEST_SUBMODULE	file:
PyUnicode_Check_Permissive	src/pybind11/include/pybind11/pytypes.h	/^inline bool PyUnicode_Check_Permissive(PyObject *o) { return PyUnicode_Check(o) || PYBIND11_BYTE/;"	f	typeref:typename:bool
PyVoidArrType_Type_	src/pybind11/include/pybind11/numpy.h	/^    PyTypeObject *PyVoidArrType_Type_;$/;"	m	struct:npy_api	typeref:typename:PyTypeObject *
PyVoidScalarObject_Proxy	src/pybind11/include/pybind11/numpy.h	/^struct PyVoidScalarObject_Proxy {$/;"	s
PyWidget	src/pybind11/tests/test_embed/test_interpreter.cpp	/^class PyWidget final : public Widget {$/;"	c	file:
Python C++ interface	src/pybind11/docs/advanced/pycpp/index.rst	/^Python C++ interface$/;"	c
Python build-in functions	src/pybind11/docs/reference.rst	/^Python build-in functions$/;"	s	chapter:Reference
Python objects as arguments	src/pybind11/docs/advanced/functions.rst	/^Python objects as arguments$/;"	s	chapter:Functions
Python types	src/pybind11/docs/advanced/pycpp/object.rst	/^Python types$/;"	c
PythonCallInDestructor	src/pybind11/tests/test_exceptions.cpp	/^    PythonCallInDestructor(const py::dict &d) : d(d) {}$/;"	f	struct:PythonCallInDestructor	file:
PythonCallInDestructor	src/pybind11/tests/test_exceptions.cpp	/^struct PythonCallInDestructor {$/;"	s	file:
PythonDerivedDynamicClass	src/pybind11/tests/test_methods_and_attributes.py	/^    class PythonDerivedDynamicClass(DynamicClass):$/;"	c	function:test_dynamic_attributes	file:
QURT_SIDE	src/elka_comm/common/elka.h	/^#define QURT_SIDE /;"	d
RAND_MAX_32	src/elka_comm/common/elka.cpp	/^#define RAND_MAX_32 /;"	d	file:
RECEIVER_ID	src/elka_comm/common/elka.h	/^#define RECEIVER_ID /;"	d
RECEIVER_PARAMS	src/elka_comm/common/elka.h	/^#define RECEIVER_PARAMS /;"	d
RECENT_ACKS_LEN	src/elka_comm/common/elka.h	/^#define RECENT_ACKS_LEN /;"	d
RECURSE_LIST	src/pybind11/tools/mkdoc.py	/^RECURSE_LIST = [$/;"	v
RESOURCE_NAME_LEGAL_CHARS_P	tools/genmsg/src/genmsg/names.py	/^RESOURCE_NAME_LEGAL_CHARS_P = re.compile('^[A-Za-z][\\w_\\\/]*$') $/;"	v
RM	build_elka_data_collection/Makefile	/^RM = \/opt\/cmake-3.4.3-Linux-x86_64\/bin\/cmake -E remove -f$/;"	m
RM	build_elka_data_collection/msg/Makefile	/^RM = \/opt\/cmake-3.4.3-Linux-x86_64\/bin\/cmake -E remove -f$/;"	m
RM	build_elka_data_collection/src/Makefile	/^RM = \/opt\/cmake-3.4.3-Linux-x86_64\/bin\/cmake -E remove -f$/;"	m
RM	build_elka_data_collection/src/elka_comm/common/Makefile	/^RM = \/opt\/cmake-3.4.3-Linux-x86_64\/bin\/cmake -E remove -f$/;"	m
RM	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^RM = \/opt\/cmake-3.4.3-Linux-x86_64\/bin\/cmake -E remove -f$/;"	m
RM	build_elka_data_collection/src/pybind11/Makefile	/^RM = \/opt\/cmake-3.4.3-Linux-x86_64\/bin\/cmake -E remove -f$/;"	m
RValueCaster	src/pybind11/tests/pybind11_tests.h	/^struct RValueCaster {};$/;"	s
R_type	src/pybind11/include/pybind11/operators.h	/^        using R_type = conditional_t<std::is_same<R, self_t>::value, Base, R>;$/;"	t	function:op_::execute	typeref:typename:conditional_t<std::is_same<R,self_t>::value,Base,R>
R_type	src/pybind11/include/pybind11/operators.h	/^        using R_type = conditional_t<std::is_same<R, self_t>::value, Base, R>;$/;"	t	function:op_::execute_cast	typeref:typename:conditional_t<std::is_same<R,self_t>::value,Base,R>
Rabbit	src/pybind11/tests/test_class.cpp	/^        Rabbit(const std::string &name) : Pet(name, "parrot") {}$/;"	f	class:TEST_SUBMODULE::Rabbit	file:
Rabbit	src/pybind11/tests/test_class.cpp	/^    class Rabbit : public Pet {$/;"	c	function:TEST_SUBMODULE	file:
RangeIterator	src/pybind11/tools/clang/cindex.py	/^        class RangeIterator:$/;"	c	member:Diagnostic.ranges	file:
Read	src/pybind11/tests/test_enum.cpp	/^    Read = 4,$/;"	e	enum:Flags	file:
RefQualifierKind	src/pybind11/tools/clang/cindex.py	/^class RefQualifierKind(BaseEnumeration):$/;"	c
Reference	src/pybind11/docs/reference.rst	/^Reference$/;"	c
References	src/pybind11/docs/advanced/cast/strings.rst	/^References$/;"	s	chapter:Strings, bytes and Unicode conversions
RegisteredDerived	src/pybind11/tests/test_methods_and_attributes.cpp	/^class RegisteredDerived : public UnregisteredBase {$/;"	c	file:
Registering custom translators	src/pybind11/docs/advanced/exceptions.rst	/^Registering custom translators$/;"	s	chapter:Exceptions
Return C++ strings without conversion	src/pybind11/docs/advanced/cast/strings.rst	/^Return C++ strings without conversion$/;"	S	section:Returning C++ strings to Python
Return value policies	src/pybind11/docs/advanced/functions.rst	/^Return value policies$/;"	s	chapter:Functions
ReturnTester	src/pybind11/tests/test_eigen.cpp	/^        ReturnTester() { print_created(this); }$/;"	f	class:__anon898d062d0102::ReturnTester	file:
ReturnTester	src/pybind11/tests/test_eigen.cpp	/^    class ReturnTester {$/;"	c	function:__anon898d062d0102	file:
Returning C++ strings to Python	src/pybind11/docs/advanced/cast/strings.rst	/^Returning C++ strings to Python$/;"	s	chapter:Strings, bytes and Unicode conversions
Returning values to Python	src/pybind11/docs/advanced/cast/eigen.rst	/^Returning values to Python$/;"	s	chapter:Eigen
SENDER_ID	src/elka_comm/common/elka.h	/^#define SENDER_ID /;"	d
SENDER_PARAMS	src/elka_comm/common/elka.h	/^#define SENDER_PARAMS /;"	d
SEP	tools/genmsg/src/genmsg/base.py	/^SEP = '\/'$/;"	v
SERIAL_SIZE_OF_DATA_BUFFER	src/elka_comm/qurt/platform.h	/^#define SERIAL_SIZE_OF_DATA_BUFFER /;"	d
SERIAL_WRITE_DELAY_USEC	src/elka_comm/qurt/platform.h	/^#define SERIAL_WRITE_DELAY_USEC /;"	d
SERVER	src/elka_comm/gnd_station/inet_comm.h	/^#define SERVER /;"	d
SERVER	src/elka_comm/posix/inet_comm.h	/^#define SERVER /;"	d
SERVER_SIDE	src/elka_comm/gnd_station/inet_comm.h	/^#define SERVER_SIDE /;"	d
SERVER_SIDE	src/elka_comm/posix/inet_comm.h	/^#define SERVER_SIDE /;"	d
SET_TEST_VALS	src/pybind11/tests/test_numpy_dtypes.cpp	/^#define SET_TEST_VALS(/;"	d	file:
SHELL	build_elka_data_collection/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build_elka_data_collection/msg/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build_elka_data_collection/src/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build_elka_data_collection/src/elka_comm/common/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build_elka_data_collection/src/pybind11/Makefile	/^SHELL = \/bin\/sh$/;"	m
SIMULATE_ID	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_VERSION_MAJOR	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MINOR	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SNAPDRAGON_UART_DEVICES_H	src/elka_comm/qurt/snapdragon_uart_devices.h	/^#define SNAPDRAGON_UART_DEVICES_H$/;"	d
SNAPDRAGON_UART_H	src/elka_comm/qurt/snapdragon_uart.h	/^#define SNAPDRAGON_UART_H$/;"	d
SNAPDRAGON_UART_MANAGER_H	src/elka_comm/qurt/snapdragon_uart_manager.h	/^#define SNAPDRAGON_UART_MANAGER_H$/;"	d
SPHINXBUILD	src/pybind11/docs/Makefile	/^SPHINXBUILD   = sphinx-build$/;"	m
SPHINXBUILD	tools/genmsg/doc/Makefile	/^SPHINXBUILD   = sphinx-build$/;"	m
SPHINXOPTS	src/pybind11/docs/Makefile	/^SPHINXOPTS    =$/;"	m
SPHINXOPTS	tools/genmsg/doc/Makefile	/^SPHINXOPTS    =$/;"	m
SRV_DIR	tools/genmsg/src/genmsg/base.py	/^SRV_DIR = 'srv'$/;"	v
STATE_NULL	src/elka_comm/common/elka.h	/^#define STATE_NULL /;"	d
STATE_PAUSE	src/elka_comm/common/elka.h	/^#define STATE_PAUSE /;"	d
STATE_RESUME	src/elka_comm/common/elka.h	/^#define STATE_RESUME /;"	d
STATE_START	src/elka_comm/common/elka.h	/^#define STATE_START /;"	d
STATE_STOP	src/elka_comm/common/elka.h	/^#define STATE_STOP /;"	d
STL containers	src/pybind11/docs/advanced/cast/stl.rst	/^STL containers$/;"	c
STRINGIFY	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY(/;"	d	file:
STRINGIFY	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY(/;"	d	file:
STRINGIFY_HELPER	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY_HELPER(/;"	d	file:
STRINGIFY_HELPER	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY_HELPER(/;"	d	file:
SUCCESS	src/elka_comm/qurt/status.h	/^#define SUCCESS /;"	d
SUFFIXES	build_elka_data_collection/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build_elka_data_collection/msg/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build_elka_data_collection/src/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build_elka_data_collection/src/elka_comm/common/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build_elka_data_collection/src/pybind11/Makefile	/^SUFFIXES =$/;"	m
SanitizedString	src/pybind11/tests/conftest.py	/^class SanitizedString(object):$/;"	c
Scalar	src/pybind11/include/pybind11/eigen.h	/^    typedef typename Type::Scalar Scalar;$/;"	t	struct:type_caster	typeref:typename:Type::Scalar
Scalar	src/pybind11/include/pybind11/eigen.h	/^    using Scalar = typename Type::Scalar;$/;"	t	struct:EigenProps	typeref:typename:Type::Scalar
Scalar	src/pybind11/include/pybind11/eigen.h	/^    using Scalar = typename Type::Scalar;$/;"	t	struct:type_caster	typeref:typename:Type::Scalar
Scalar	src/pybind11/include/pybind11/eigen.h	/^    using Scalar = typename props::Scalar;$/;"	t	struct:type_caster	typeref:typename:props::Scalar
Scalar	src/pybind11/include/pybind11/pybind11.h	/^    using Scalar = typename std::underlying_type<Type>::type;$/;"	t	class:enum_	typeref:typename:std::underlying_type<Type>::type
ScopedEnum	src/pybind11/tests/test_enum.cpp	/^enum class ScopedEnum {$/;"	g	file:
Sequence	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    Sequence(Sequence &&s) : m_size(s.m_size), m_data(s.m_data) {$/;"	f	class:Sequence	file:
Sequence	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    Sequence(const Sequence &s) : m_size(s.m_size) {$/;"	f	class:Sequence	file:
Sequence	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    Sequence(const std::vector<float> &value) : m_size(value.size()) {$/;"	f	class:Sequence	file:
Sequence	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    Sequence(size_t size) : m_size(size) {$/;"	f	class:Sequence	file:
Sequence	src/pybind11/tests/test_sequences_and_iterators.cpp	/^class Sequence {$/;"	c	file:
SerialBuffer	src/elka_comm/common/elka_comm.cpp	/^elka::SerialBuffer::SerialBuffer(dev_id_t port_id,$/;"	f	class:elka::SerialBuffer
SerialBuffer	src/elka_comm/common/elka_comm.h	/^struct elka::SerialBuffer {$/;"	s	class:elka
Setup	src/pybind11/docs/benchmark.rst	/^Setup$/;"	s	chapter:Benchmark
ShapeContainer	src/pybind11/include/pybind11/numpy.h	/^    using ShapeContainer = detail::any_container<ssize_t>;$/;"	t	class:array	typeref:typename:detail::any_container<ssize_t>
SharedFromThisRef	src/pybind11/tests/test_smart_ptr.cpp	/^struct SharedFromThisRef {$/;"	s	file:
SharedFromThisVBase	src/pybind11/tests/test_smart_ptr.cpp	/^struct SharedFromThisVBase : std::enable_shared_from_this<SharedFromThisVBase> {$/;"	s	file:
SharedFromThisVirt	src/pybind11/tests/test_smart_ptr.cpp	/^struct SharedFromThisVirt : virtual SharedFromThisVBase {};$/;"	s	file:
SharedPtrRef	src/pybind11/tests/test_smart_ptr.cpp	/^struct SharedPtrRef {$/;"	s	file:
SimpleStruct	src/pybind11/tests/test_numpy_dtypes.cpp	/^struct SimpleStruct {$/;"	s	file:
SimpleValue	src/pybind11/tests/test_methods_and_attributes.cpp	/^struct SimpleValue { int value = 1; };$/;"	s	file:
SizeType	src/pybind11/include/pybind11/stl_bind.h	/^    using SizeType = typename Vector::size_type;$/;"	t	function:vector_accessor	typeref:typename:Vector::size_type
SizeType	src/pybind11/include/pybind11/stl_bind.h	/^    using SizeType = typename Vector::size_type;$/;"	t	function:vector_modifiers	typeref:typename:Vector::size_type
SizeType	src/pybind11/include/pybind11/stl_bind.h	/^    using SizeType = typename Vector::size_type;$/;"	t	typeref:typename:Vector::size_type
Smart pointers	src/pybind11/docs/advanced/smart_ptrs.rst	/^Smart pointers$/;"	c
SourceLocation	src/pybind11/tools/clang/cindex.py	/^class SourceLocation(Structure):$/;"	c
SourceRange	src/pybind11/tools/clang/cindex.py	/^class SourceRange(Structure):$/;"	c
SparseMatrixC	src/pybind11/tests/test_eigen.cpp	/^    typedef Eigen::SparseMatrix<float> SparseMatrixC;$/;"	t	function:__anon898d062d0102	typeref:typename:Eigen::SparseMatrix<float>	file:
SparseMatrixR	src/pybind11/tests/test_eigen.cpp	/^    typedef Eigen::SparseMatrix<float, Eigen::RowMajor> SparseMatrixR;$/;"	t	function:__anon898d062d0102	typeref:typename:Eigen::SparseMatrix<float,Eigen::RowMajor>	file:
SpektrumPacket	serial/python/packet.py	/^class SpektrumPacket(object):$/;"	c
SpellingCache	src/pybind11/tools/clang/cindex.py	/^SpellingCache = {$/;"	v
SquareMatrix	src/pybind11/tests/test_buffers.cpp	/^    SquareMatrix(ssize_t n) : Matrix(n, n) { }$/;"	f	class:SquareMatrix	file:
SquareMatrix	src/pybind11/tests/test_buffers.cpp	/^class SquareMatrix : public Matrix {$/;"	c	file:
SrvSpec	tools/genmsg/src/genmsg/srvs.py	/^class SrvSpec(object):$/;"	c
Static properties	src/pybind11/docs/advanced/classes.rst	/^Static properties$/;"	s	chapter:Classes
Storage orders	src/pybind11/docs/advanced/cast/eigen.rst	/^Storage orders$/;"	s	chapter:Eigen
StorageClass	src/pybind11/tools/clang/cindex.py	/^class StorageClass(object):$/;"	c
StorageIndex	src/pybind11/include/pybind11/eigen.h	/^    typedef remove_reference_t<decltype(*std::declval<Type>().outerIndexPtr())> StorageIndex;$/;"	t	struct:type_caster
StrIssue	src/pybind11/tests/test_methods_and_attributes.cpp	/^    StrIssue(int i) : val{i} {}$/;"	f	struct:StrIssue	file:
StrIssue	src/pybind11/tests/test_methods_and_attributes.cpp	/^struct StrIssue {$/;"	s	file:
StrideType	src/pybind11/include/pybind11/eigen.h	/^    using StrideType = typename eigen_extract_stride<Type>::type;$/;"	t	struct:EigenProps	typeref:typename:eigen_extract_stride<Type>::type
StridesContainer	src/pybind11/include/pybind11/numpy.h	/^    using StridesContainer = detail::any_container<ssize_t>;$/;"	t	class:array	typeref:typename:detail::any_container<ssize_t>
StringCaster	src/pybind11/include/pybind11/cast.h	/^    using StringCaster = type_caster<StringType>;$/;"	t	struct:type_caster	typeref:typename:type_caster<StringType>
StringList	src/pybind11/tests/test_opaque_types.cpp	/^typedef std::vector<std::string> StringList;$/;"	t	typeref:typename:std::vector<std::string>	file:
StringMap	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    StringMap(std::unordered_map<std::string, std::string> init)$/;"	f	class:StringMap	file:
StringMap	src/pybind11/tests/test_sequences_and_iterators.cpp	/^class StringMap {$/;"	c	file:
StringStruct	src/pybind11/tests/test_numpy_dtypes.cpp	/^struct StringStruct {$/;"	s	file:
StringType	src/pybind11/include/pybind11/cast.h	/^    using StringType = std::basic_string<CharT>;$/;"	t	struct:type_caster	typeref:typename:std::basic_string<CharT>
Strings, bytes and Unicode conversions	src/pybind11/docs/advanced/cast/strings.rst	/^Strings, bytes and Unicode conversions$/;"	c
Structured types	src/pybind11/docs/advanced/pycpp/numpy.rst	/^Structured types$/;"	s	chapter:NumPy
Sub-interpreter support	src/pybind11/docs/advanced/embedding.rst	/^Sub-interpreter support$/;"	s	chapter:Embedding the interpreter
SubTestObject	src/pybind11/tests/test_pytypes.py	/^    class SubTestObject:$/;"	c	function:test_accessors	file:
Supported compilers	src/pybind11/docs/intro.rst	/^Supported compilers$/;"	s	chapter:About this project
Supported data types	src/pybind11/docs/basics.rst	/^Supported data types$/;"	s	chapter:First steps
T	src/pybind11/include/pybind11/stl_bind.h	/^    using T = typename Vector::value_type;$/;"	t	function:vector_accessor	typeref:typename:Vector::value_type
T	src/pybind11/include/pybind11/stl_bind.h	/^    using T = typename Vector::value_type;$/;"	t	function:vector_buffer	typeref:typename:Vector::value_type
T	src/pybind11/include/pybind11/stl_bind.h	/^    using T = typename Vector::value_type;$/;"	t	function:vector_if_equal_operator	typeref:typename:Vector::value_type
T	src/pybind11/include/pybind11/stl_bind.h	/^    using T = typename Vector::value_type;$/;"	t	function:vector_modifiers	typeref:typename:Vector::value_type
T	src/pybind11/include/pybind11/stl_bind.h	/^    using T = typename Vector::value_type;$/;"	t	typeref:typename:Vector::value_type
TEMPLATE_FILE	tools/px_generate_uorb_topic_files.py	/^TEMPLATE_FILE = ['msg.h.template', 'msg.cpp.template']$/;"	v
TEST_CTX	tools/genmsg/test/test_genmsg_gentools.py	/^TEST_CTX = 'rosgraph_msgs'$/;"	v
TEST_SUBMODULE	src/pybind11/tests/pybind11_tests.h	/^#define TEST_SUBMODULE(/;"	d
TEST_SUBMODULE	src/pybind11/tests/test_builtin_casters.cpp	/^TEST_SUBMODULE(builtin_casters, m) {$/;"	f
TEST_SUBMODULE	src/pybind11/tests/test_class.cpp	/^TEST_SUBMODULE(class_, m) {$/;"	f
TEST_SUBMODULE	src/pybind11/tests/test_pytypes.cpp	/^TEST_SUBMODULE(pytypes, m) {$/;"	f
TEST_SUBMODULE	src/pybind11/tests/test_stl.cpp	/^TEST_SUBMODULE(stl, m) {$/;"	f
TEST_SUBMODULE	src/pybind11/tests/test_virtual_functions.cpp	/^TEST_SUBMODULE(virtual_functions, m) {$/;"	f
TIME	tools/genmsg/src/genmsg/msgs.py	/^TIME     = 'time'$/;"	v
TIME_MSG	tools/genmsg/src/genmsg/msgs.py	/^TIME_MSG     = "uint32 secs\\nuint32 nsecs"$/;"	v
TOPICS_LIST_TEMPLATE_FILE	tools/px_generate_uorb_topic_files.py	/^TOPICS_LIST_TEMPLATE_FILE = 'uORBTopics.cpp.template'$/;"	v
TOPICS_TOKEN	tools/px_generate_uorb_topic_files.py	/^TOPICS_TOKEN = '# TOPICS '$/;"	v
TYPE_EXPECTING_ACK	src/elka_comm/common/elka.h	/^#define TYPE_EXPECTING_ACK /;"	d
TemplateArgumentKind	src/pybind11/tools/clang/cindex.py	/^class TemplateArgumentKind(BaseEnumeration):$/;"	c
TestObject	src/pybind11/tests/test_pytypes.py	/^    class TestObject:$/;"	c	function:test_accessors	file:
TestPropRVP	src/pybind11/tests/test_methods_and_attributes.cpp	/^struct TestPropRVP {$/;"	s	file:
TestProperties	src/pybind11/tests/test_methods_and_attributes.cpp	/^struct TestProperties {$/;"	s	file:
TestPropertiesOverride	src/pybind11/tests/test_methods_and_attributes.cpp	/^struct TestPropertiesOverride : TestProperties {$/;"	s	file:
The Python interpreter immediately crashes when importing my module	src/pybind11/docs/faq.rst	/^The Python interpreter immediately crashes when importing my module$/;"	s	chapter:Frequently asked questions
Three	src/pybind11/tests/test_enum.cpp	/^    Three$/;"	e	enum:ScopedEnum	file:
Token	src/pybind11/tools/clang/cindex.py	/^class Token(Structure):$/;"	c
TokenGroup	src/pybind11/tools/clang/cindex.py	/^class TokenGroup(object):$/;"	c
TokenKind	src/pybind11/tools/clang/cindex.py	/^class TokenKind(object):$/;"	c
TokenKinds	src/pybind11/tools/clang/enumerations.py	/^TokenKinds = [$/;"	v
TplCtorClass	src/pybind11/tests/test_stl.cpp	/^    template <typename T> TplCtorClass(const T &) { }$/;"	f	struct:TplCtorClass	file:
TplCtorClass	src/pybind11/tests/test_stl.cpp	/^struct TplCtorClass {$/;"	s	file:
TrailingPaddingStruct	src/pybind11/tests/test_numpy_dtypes.cpp	/^struct TrailingPaddingStruct {$/;"	s	file:
TranslationUnit	src/pybind11/tools/clang/cindex.py	/^class TranslationUnit(ClangObject):$/;"	c
TranslationUnitLoadError	src/pybind11/tools/clang/cindex.py	/^class TranslationUnitLoadError(Exception):$/;"	c
TranslationUnitSaveError	src/pybind11/tools/clang/cindex.py	/^class TranslationUnitSaveError(Exception):$/;"	c
Two	src/pybind11/tests/test_enum.cpp	/^    Two = 2,$/;"	e	enum:ScopedEnum	file:
Type	src/pybind11/include/pybind11/eigen.h	/^    using Type = Eigen::Ref<PlainObjectType, 0, StrideType>;$/;"	t	struct:type_caster	typeref:typename:Eigen::Ref<PlainObjectType,0,StrideType>
Type	src/pybind11/include/pybind11/eigen.h	/^    using Type = Type_;$/;"	t	struct:EigenProps	typeref:typename:Type_
Type	src/pybind11/include/pybind11/stl.h	/^    using Type = V<Ts...>;$/;"	t	struct:variant_caster	typeref:typename:V<Ts...>
Type	src/pybind11/tests/test_methods_and_attributes.py	/^    from pybind11_tests import TestProperties as Type$/;"	x	function:test_static_cls	file:
Type	src/pybind11/tests/test_methods_and_attributes.py	/^    from pybind11_tests import TestProperties as Type$/;"	x	function:test_static_properties	file:
Type	src/pybind11/tools/clang/cindex.py	/^class Type(Structure):$/;"	c
Type conversions	src/pybind11/docs/advanced/cast/index.rst	/^Type conversions$/;"	c
TypeKind	src/pybind11/tools/clang/cindex.py	/^class TypeKind(BaseEnumeration):$/;"	c
TypeOverride	src/pybind11/tests/test_methods_and_attributes.py	/^    from pybind11_tests import TestPropertiesOverride as TypeOverride$/;"	x	function:test_static_properties	file:
UARTPort	src/elka_comm/qurt/snapdragon_uart_devices.cpp	/^uart::UARTPort::UARTPort(uint8_t port_num, uint8_t buf_t,$/;"	f	class:uart::UARTPort
UARTPort	src/elka_comm/qurt/snapdragon_uart_devices.h	/^class uart::UARTPort : public elka::CommPort {$/;"	c	class:uart
UINT16_MAX	src/elka_comm/common/elka.h	/^#define UINT16_MAX /;"	d
UTF_N	src/pybind11/include/pybind11/cast.h	/^    static constexpr size_t UTF_N = 8 * sizeof(CharT);$/;"	m	struct:string_caster	typeref:typename:constexpr size_t
UnboundStruct	src/pybind11/tests/test_numpy_dtypes.cpp	/^struct UnboundStruct { };$/;"	s	file:
Unordered	src/pybind11/tests/conftest.py	/^class Unordered(Output):$/;"	c
UnregisteredBase	src/pybind11/tests/test_methods_and_attributes.cpp	/^class UnregisteredBase {$/;"	c	file:
UnregisteredType	src/pybind11/tests/pybind11_tests.h	/^struct UnregisteredType { };$/;"	s
UnscopedEnum	src/pybind11/tests/test_enum.cpp	/^enum UnscopedEnum {$/;"	g	file:
User macro reference	tools/genmsg/doc/usermacros.rst	/^User macro reference$/;"	c
UserType	src/pybind11/tests/pybind11_tests.h	/^    UserType(int i) : i(i) { }$/;"	f	class:UserType
UserType	src/pybind11/tests/pybind11_tests.h	/^class UserType {$/;"	c
Using Python's print function in C++	src/pybind11/docs/advanced/pycpp/utilities.rst	/^Using Python's print function in C++$/;"	s	chapter:Utilities
Utilities	src/pybind11/docs/advanced/pycpp/utilities.rst	/^Utilities$/;"	c
V	src/pybind11/tests/test_stl.cpp	/^        using V = std::variant<int, std::string>;$/;"	t	function:TEST_SUBMODULE::__anon8ef0fcf82102	typeref:typename:std::variant<int,std::string>	file:
VStruct	src/pybind11/tests/test_stl_binders.cpp	/^struct VStruct {$/;"	s	file:
VUndeclStruct	src/pybind11/tests/test_stl_binders.cpp	/^struct VUndeclStruct { \/\/dtype not declared for this version$/;"	s	file:
Value	src/pybind11/tests/test_stl.cpp	/^        struct Value { int value; };$/;"	s	struct:TEST_SUBMODULE::MoveOutContainer	file:
Vanilla	src/pybind11/tests/test_multiple_inheritance.cpp	/^struct Vanilla {$/;"	s	file:
VanillaDictMix1	src/pybind11/tests/test_multiple_inheritance.cpp	/^struct VanillaDictMix1 : Vanilla, WithDict { };$/;"	s	file:
VanillaDictMix2	src/pybind11/tests/test_multiple_inheritance.cpp	/^struct VanillaDictMix2 : WithDict, Vanilla { };$/;"	s	file:
VanillaStaticMix1	src/pybind11/tests/test_multiple_inheritance.cpp	/^struct VanillaStaticMix1 : Vanilla, WithStatic1, WithStatic2 {$/;"	s	file:
VanillaStaticMix2	src/pybind11/tests/test_multiple_inheritance.cpp	/^struct VanillaStaticMix2 : WithStatic1, Vanilla, WithStatic2 {$/;"	s	file:
Vector2	src/pybind11/tests/test_operator_overloading.cpp	/^    Vector2(Vector2 &&v) : x(v.x), y(v.y) { print_move_created(this); v.x = v.y = 0; }$/;"	f	class:Vector2	file:
Vector2	src/pybind11/tests/test_operator_overloading.cpp	/^    Vector2(const Vector2 &v) : x(v.x), y(v.y) { print_copy_created(this); }$/;"	f	class:Vector2	file:
Vector2	src/pybind11/tests/test_operator_overloading.cpp	/^    Vector2(float x, float y) : x(x), y(y) { print_created(this, toString()); }$/;"	f	class:Vector2	file:
Vector2	src/pybind11/tests/test_operator_overloading.cpp	/^class Vector2 {$/;"	c	file:
VectorizeTestClass	src/pybind11/tests/test_numpy_vectorize.cpp	/^    VectorizeTestClass(int v) : value{v} {};$/;"	f	struct:VectorizeTestClass	file:
VectorizeTestClass	src/pybind11/tests/test_numpy_vectorize.cpp	/^struct VectorizeTestClass {$/;"	s	file:
Vectorizing functions	src/pybind11/docs/advanced/pycpp/numpy.rst	/^Vectorizing functions$/;"	s	chapter:NumPy
Vectors versus column/row matrices	src/pybind11/docs/advanced/cast/eigen.rst	/^Vectors versus column\/row matrices$/;"	s	chapter:Eigen
Warning	src/pybind11/tools/clang/cindex.py	/^    Warning = 2$/;"	v	class:Diagnostic
Wide character strings	src/pybind11/docs/advanced/cast/strings.rst	/^Wide character strings$/;"	s	chapter:Strings, bytes and Unicode conversions
Widget	src/pybind11/tests/test_embed/test_interpreter.cpp	/^    Widget(std::string message) : message(message) { }$/;"	f	class:Widget	file:
Widget	src/pybind11/tests/test_embed/test_interpreter.cpp	/^class Widget {$/;"	c	file:
Windows	src/pybind11/docs/basics.rst	/^Windows$/;"	S	section:Compiling the test cases
With reference counting	src/pybind11/docs/reference.rst	/^With reference counting$/;"	S	section:Convenience classes for arbitrary Python types
WithDict	src/pybind11/tests/test_multiple_inheritance.cpp	/^struct WithDict { };$/;"	s	file:
WithStatic1	src/pybind11/tests/test_multiple_inheritance.cpp	/^struct WithStatic1 {$/;"	s	file:
WithStatic2	src/pybind11/tests/test_multiple_inheritance.cpp	/^struct WithStatic2 {$/;"	s	file:
Without reference counting	src/pybind11/docs/reference.rst	/^Without reference counting$/;"	S	section:Convenience classes for arbitrary Python types
Working with ancient Visual Studio 2009 builds on Windows	src/pybind11/docs/faq.rst	/^Working with ancient Visual Studio 2009 builds on Windows$/;"	s	chapter:Frequently asked questions
Write	src/pybind11/tests/test_enum.cpp	/^    Write = 2,$/;"	e	enum:Flags	file:
X	src/pybind11/tests/test_numpy_dtypes.cpp	/^enum E2 : uint8_t { X = 1, Y = 2 };$/;"	e	enum:uint8_t	file:
Y	src/pybind11/tests/test_numpy_dtypes.cpp	/^enum E2 : uint8_t { X = 1, Y = 2 };$/;"	e	enum:uint8_t	file:
_	src/pybind11/include/pybind11/descr.h	/^constexpr enable_if_t<B, descr<Size1 - 1, 0>> _(char const(&text1)[Size1], char const(&)[Size2])/;"	f	typeref:typename:enable_if_t<B,descr<Size1-1,0>>
_	src/pybind11/include/pybind11/descr.h	/^constexpr enable_if_t<B, descr<SizeA1, SizeA2>> _(descr<SizeA1, SizeA2> d, descr<SizeB1, SizeB2>/;"	f	typeref:typename:enable_if_t<B,descr<SizeA1,SizeA2>>
_	src/pybind11/include/pybind11/descr.h	/^template <size_t Size> auto constexpr _() -> decltype(int_to_str<Size \/ 10, Size % 10>::digits)/;"	f	typeref:typename:auto constexpr
_	src/pybind11/include/pybind11/descr.h	/^template <size_t Size> constexpr descr<Size - 1, 0> _(char const(&text)[Size]) {$/;"	f	typeref:typename:descr<Size-1,0>
_	src/pybind11/include/pybind11/descr.h	/^template <typename Type> constexpr descr<1, 1> _() {$/;"	f	typeref:typename:descr<1,1>
_CXString	src/pybind11/tools/clang/cindex.py	/^class _CXString(Structure):$/;"	c
_CXUnsavedFile	src/pybind11/tools/clang/cindex.py	/^class _CXUnsavedFile(Structure):$/;"	c
_DEBUG	src/pybind11/include/pybind11/common.h	/^#    define _DEBUG$/;"	d
_Py_atomic_address	src/pybind11/include/pybind11/common.h	/^    struct _Py_atomic_address { void *value; };$/;"	s
_UORB_UORB_H	inc/uORB/uORB.h	/^#define _UORB_UORB_H$/;"	d
__BEGIN_DECLS	inc/systemlib/visibility.h	/^#  define __BEGIN_DECLS	/;"	d
__BEGIN_DECLS	inc/systemlib/visibility.h	/^#  define __BEGIN_DECLS$/;"	d
__END_DECLS	inc/systemlib/visibility.h	/^#  define __END_DECLS	/;"	d
__END_DECLS	inc/systemlib/visibility.h	/^#  define __END_DECLS$/;"	d
__EXPORT	inc/systemlib/visibility.h	/^#define __EXPORT /;"	d
__OBJECT_H	src/pybind11/tests/object.h	/^#define __OBJECT_H$/;"	d
__PRIVATE	inc/systemlib/visibility.h	/^#define __PRIVATE /;"	d
__STDC_FORMAT_MACROS	src/elka_comm/common/elka.h	/^#define __STDC_FORMAT_MACROS$/;"	d
__SYSTEMLIB_VISIBILITY_H	inc/systemlib/visibility.h	/^#define __SYSTEMLIB_VISIBILITY_H$/;"	d
__all__	src/pybind11/tools/clang/__init__.py	/^__all__ = ['cindex']$/;"	v
__all__	src/pybind11/tools/clang/cindex.py	/^__all__ = [$/;"	v
__all__	src/pybind11/tools/clang/enumerations.py	/^__all__ = ['TokenKinds']$/;"	v
__anon011113d60102	src/pybind11/tests/test_pickling.cpp	/^test_initializer pickling([](py::module &m) {$/;"	f	file:
__anon011113d60202	src/pybind11/tests/test_pickling.cpp	/^        .def("__getstate__", [](const Pickleable &p) {$/;"	f	function:__anon011113d60102	file:
__anon011113d60302	src/pybind11/tests/test_pickling.cpp	/^        .def("__setstate__", [](Pickleable &p, py::tuple t) {$/;"	f	function:__anon011113d60102	file:
__anon011113d60402	src/pybind11/tests/test_pickling.cpp	/^        .def("__getstate__", [](py::object self) {$/;"	f	function:__anon011113d60102	file:
__anon011113d60502	src/pybind11/tests/test_pickling.cpp	/^        .def("__setstate__", [](py::object self, py::tuple t) {$/;"	f	function:__anon011113d60102	file:
__anon041afed60102	src/pybind11/tests/test_numpy_dtypes.cpp	/^    auto fill = [](py::array arr) {$/;"	f	function:test_array_ctors	file:
__anon041afed60202	src/pybind11/tests/test_numpy_dtypes.cpp	/^test_initializer numpy_dtypes([](py::module &m) {$/;"	f	file:
__anon041afed60302	src/pybind11/tests/test_numpy_dtypes.cpp	/^    m.def("f_simple", [](SimpleStruct s) { return s.uint_ * 10; });$/;"	f	function:__anon041afed60202	file:
__anon041afed60402	src/pybind11/tests/test_numpy_dtypes.cpp	/^    m.def("f_packed", [](PackedStruct s) { return s.uint_ * 10; });$/;"	f	function:__anon041afed60202	file:
__anon041afed60502	src/pybind11/tests/test_numpy_dtypes.cpp	/^    m.def("f_nested", [](NestedStruct s) { return s.a.uint_ * 10; });$/;"	f	function:__anon041afed60202	file:
__anon041afed60602	src/pybind11/tests/test_numpy_dtypes.cpp	/^    m.def("register_dtype", []() { PYBIND11_NUMPY_DTYPE(SimpleStruct, bool_, uint_, float_, ldbl/;"	f	function:__anon041afed60202	file:
__anon05cac15f0102	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    auto assert_equal = [&checks](py::handle a, py::handle b) {$/;"	f	function:test_random_access_iterator	file:
__anon05cac15f0202	src/pybind11/tests/test_sequences_and_iterators.cpp	/^test_initializer sequences_and_iterators([](py::module &pm) {$/;"	f	file:
__anon05cac15f0302	src/pybind11/tests/test_sequences_and_iterators.cpp	/^       .def("__getitem__", [](const Sequence &s, size_t i) {$/;"	f	function:__anon05cac15f0202	file:
__anon05cac15f0402	src/pybind11/tests/test_sequences_and_iterators.cpp	/^       .def("__setitem__", [](Sequence &s, size_t i, float v) {$/;"	f	function:__anon05cac15f0202	file:
__anon05cac15f0502	src/pybind11/tests/test_sequences_and_iterators.cpp	/^       .def("__iter__", [](const Sequence &s) { return py::make_iterator(s.begin(), s.end()); },$/;"	f	function:__anon05cac15f0202	file:
__anon05cac15f0602	src/pybind11/tests/test_sequences_and_iterators.cpp	/^       .def("__contains__", [](const Sequence &s, float v) { return s.contains(v); })$/;"	f	function:__anon05cac15f0202	file:
__anon05cac15f0702	src/pybind11/tests/test_sequences_and_iterators.cpp	/^       .def("__reversed__", [](const Sequence &s) -> Sequence { return s.reversed(); })$/;"	f	function:__anon05cac15f0202	typeref:typename:Sequence	file:
__anon05cac15f0802	src/pybind11/tests/test_sequences_and_iterators.cpp	/^       .def("__getitem__", [](const Sequence &s, py::slice slice) -> Sequence* {$/;"	f	function:__anon05cac15f0202	typeref:typename:Sequence *	file:
__anon05cac15f0902	src/pybind11/tests/test_sequences_and_iterators.cpp	/^       .def("__setitem__", [](Sequence &s, py::slice slice, const Sequence &value) {$/;"	f	function:__anon05cac15f0202	file:
__anon05cac15f0a02	src/pybind11/tests/test_sequences_and_iterators.cpp	/^        .def("__getitem__", [](const StringMap &map, std::string key) {$/;"	f	function:__anon05cac15f0202	file:
__anon05cac15f0b02	src/pybind11/tests/test_sequences_and_iterators.cpp	/^        .def("__iter__", [](const StringMap &map) { return py::make_key_iterator(map.begin(), ma/;"	f	function:__anon05cac15f0202	file:
__anon05cac15f0c02	src/pybind11/tests/test_sequences_and_iterators.cpp	/^        .def("items", [](const StringMap &map) { return py::make_iterator(map.begin(), map.end()/;"	f	function:__anon05cac15f0202	file:
__anon05cac15f0d02	src/pybind11/tests/test_sequences_and_iterators.cpp	/^        .def("nonzero", [](const IntPairs& s) {$/;"	f	function:__anon05cac15f0202	file:
__anon05cac15f0e02	src/pybind11/tests/test_sequences_and_iterators.cpp	/^        .def("nonzero_keys", [](const IntPairs& s) {$/;"	f	function:__anon05cac15f0202	file:
__anon05cac15f0f02	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    m.def("object_to_list", [](py::object o) {$/;"	f	function:__anon05cac15f0202	file:
__anon05cac15f1002	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    m.def("iterator_to_list", [](py::iterator it) {$/;"	f	function:__anon05cac15f0202	file:
__anon05cac15f1102	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    m.def("count_none", [](py::object o) {$/;"	f	function:__anon05cac15f0202	file:
__anon05cac15f1202	src/pybind11/tests/test_sequences_and_iterators.cpp	/^        return std::count_if(o.begin(), o.end(), [](py::handle h) { return h.is_none(); });$/;"	f	function:__anon05cac15f0202::__anon05cac15f1102	file:
__anon05cac15f1302	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    m.def("find_none", [](py::object o) {$/;"	f	function:__anon05cac15f0202	file:
__anon05cac15f1402	src/pybind11/tests/test_sequences_and_iterators.cpp	/^        auto it = std::find_if(o.begin(), o.end(), [](py::handle h) { return h.is_none(); });$/;"	f	function:__anon05cac15f0202::__anon05cac15f1302	file:
__anon05cac15f1502	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    m.def("count_nonzeros", [](py::dict d) {$/;"	f	function:__anon05cac15f0202	file:
__anon05cac15f1602	src/pybind11/tests/test_sequences_and_iterators.cpp	/^       return std::count_if(d.begin(), d.end(), [](std::pair<py::handle, py::handle> p) {$/;"	f	function:__anon05cac15f0202::__anon05cac15f1502	file:
__anon05cac15f1702	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    m.def("tuple_iterator", [](py::tuple x) { return test_random_access_iterator(x); });$/;"	f	function:__anon05cac15f0202	file:
__anon05cac15f1802	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    m.def("list_iterator", [](py::list x) { return test_random_access_iterator(x); });$/;"	f	function:__anon05cac15f0202	file:
__anon05cac15f1902	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    m.def("sequence_iterator", [](py::sequence x) { return test_random_access_iterator(x); });$/;"	f	function:__anon05cac15f0202	file:
__anon05cac15f1a02	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    m.def("iterator_passthrough", [](py::iterator s) -> py::iterator {$/;"	f	function:__anon05cac15f0202	typeref:typename:py::iterator	file:
__anon05cac15f1b02	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    m.def("make_iterator_1", []() { return py::make_iterator<py::return_value_policy::copy>(list/;"	f	function:__anon05cac15f0202	file:
__anon05cac15f1c02	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    m.def("make_iterator_2", []() { return py::make_iterator<py::return_value_policy::automatic>/;"	f	function:__anon05cac15f0202	file:
__anon06075a8d0102	src/pybind11/tests/test_eval.cpp	/^test_initializer eval([](py::module &m) {$/;"	f	file:
__anon06075a8d0202	src/pybind11/tests/test_eval.cpp	/^    m.def("test_eval_statements", [global]() {$/;"	f	function:__anon06075a8d0102	file:
__anon06075a8d0302	src/pybind11/tests/test_eval.cpp	/^        local["call_test"] = py::cpp_function([&]() -> int {$/;"	f	function:__anon06075a8d0102::__anon06075a8d0202	typeref:typename:int	file:
__anon06075a8d0402	src/pybind11/tests/test_eval.cpp	/^    m.def("test_eval", [global]() {$/;"	f	function:__anon06075a8d0102	file:
__anon06075a8d0502	src/pybind11/tests/test_eval.cpp	/^    m.def("test_eval_single_statement", []() {$/;"	f	function:__anon06075a8d0102	file:
__anon06075a8d0602	src/pybind11/tests/test_eval.cpp	/^        local["call_test"] = py::cpp_function([&]() -> int {$/;"	f	function:__anon06075a8d0102::__anon06075a8d0502	typeref:typename:int	file:
__anon06075a8d0702	src/pybind11/tests/test_eval.cpp	/^    m.def("test_eval_file", [global](py::str filename) {$/;"	f	function:__anon06075a8d0102	file:
__anon06075a8d0802	src/pybind11/tests/test_eval.cpp	/^        local["call_test2"] = py::cpp_function([&](int value) { val_out = value; });$/;"	f	function:__anon06075a8d0102::__anon06075a8d0702	file:
__anon06075a8d0902	src/pybind11/tests/test_eval.cpp	/^    m.def("test_eval_failure", []() {$/;"	f	function:__anon06075a8d0102	file:
__anon06075a8d0a02	src/pybind11/tests/test_eval.cpp	/^    m.def("test_eval_file_failure", []() {$/;"	f	function:__anon06075a8d0102	file:
__anon0649a7f00102	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("string_roundtrip", [](const char *s) { return s; });$/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f00202	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("good_utf8_string", []() { return std::string(u8"Say utf8\\u203d \\U0001f382 \\U0001d4/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f00302	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("good_utf16_string", [=]() { return std::u16string({ b16, ib16, cake16_1, cake16_2, ma/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f00402	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("good_utf32_string", [=]() { return std::u32string({ a32, mathbfA32, cake32, ib32, z32/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f00502	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("good_wchar_string", [=]() { return wstr; }); \/\/ a‽𝐀z$/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f00602	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("bad_utf8_string", []()  { return std::string("abc\\xd0" "def"); });$/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f00702	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("bad_utf16_string", [=]() { return std::u16string({ b16, char16_t(0xd800), z16 }); });$/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f00802	src/pybind11/tests/test_builtin_casters.cpp	/^        m.def("bad_utf32_string", [=]() { return std::u32string({ a32, char32_t(0xd800), z32 });/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f00902	src/pybind11/tests/test_builtin_casters.cpp	/^        m.def("bad_wchar_string", [=]() { return std::wstring({ wchar_t(0x61), wchar_t(0xd800) }/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f00a02	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("u8_Z", []() -> char { return 'Z'; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:char	file:
__anon0649a7f00b02	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("u8_eacute", []() -> char { return '\\xe9'; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:char	file:
__anon0649a7f00c02	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("u16_ibang", [=]() -> char16_t { return ib16; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:char16_t	file:
__anon0649a7f00d02	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("u32_mathbfA", [=]() -> char32_t { return mathbfA32; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:char32_t	file:
__anon0649a7f00e02	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("wchar_heart", []() -> wchar_t { return 0x2665; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:wchar_t	file:
__anon0649a7f00f02	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("ord_char", [](char c) -> int { return static_cast<unsigned char>(c); });$/;"	f	function:TEST_SUBMODULE	typeref:typename:int	file:
__anon0649a7f01002	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("ord_char16", [](char16_t c) -> uint16_t { return c; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:uint16_t	file:
__anon0649a7f01102	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("ord_char32", [](char32_t c) -> uint32_t { return c; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:uint32_t	file:
__anon0649a7f01202	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("ord_wchar", [](wchar_t c) -> int { return c; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:int	file:
__anon0649a7f01302	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("strlen", [](char *s) { return strlen(s); });$/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f01402	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("string_length", [](std::string s) { return s.length(); });$/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f01502	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("string_view_print",   [](std::string_view s)    { py::print(s, s.size()); });$/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f01602	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("string_view16_print", [](std::u16string_view s) { py::print(s, s.size()); });$/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f01702	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("string_view32_print", [](std::u32string_view s) { py::print(s, s.size()); });$/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f01802	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("string_view_chars",   [](std::string_view s)    { py::list l; for (auto c : s) l.appe/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f01902	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("string_view16_chars", [](std::u16string_view s) { py::list l; for (auto c : s) l.appe/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f01a02	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("string_view32_chars", [](std::u32string_view s) { py::list l; for (auto c : s) l.appe/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f01b02	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("string_view_return",   []() { return std::string_view(u8"utf8 secret \\U0001f382"); }/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f01c02	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("string_view16_return", []() { return std::u16string_view(u"utf16 secret \\U0001f382")/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f01d02	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("string_view32_return", []() { return std::u32string_view(U"utf32 secret \\U0001f382")/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f01e02	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("i32_str", [](std::int32_t v) { return std::to_string(v); });$/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f01f02	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("u32_str", [](std::uint32_t v) { return std::to_string(v); });$/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f02002	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("i64_str", [](std::int64_t v) { return std::to_string(v); });$/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f02102	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("u64_str", [](std::uint64_t v) { return std::to_string(v); });$/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f02202	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("pair_passthrough", [](std::pair<bool, std::string> input) {$/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f02302	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("tuple_passthrough", [](std::tuple<bool, std::string, int> input) {$/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f02402	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("empty_tuple", []() { return std::tuple<>(); });$/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f02502	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("rvalue_pair", []() { return std::make_pair(RValueCaster{}, RValueCaster{}); });$/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f02602	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("lvalue_pair", []() -> const decltype(lvpair) & { return lvpair; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:const decltype (lvpair)&	file:
__anon0649a7f02702	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("rvalue_tuple", []() { return std::make_tuple(RValueCaster{}, RValueCaster{}, RValueCa/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f02802	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("lvalue_tuple", []() -> const decltype(lvtuple) & { return lvtuple; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:const decltype (lvtuple)&	file:
__anon0649a7f02902	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("rvalue_nested", []() {$/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f02a02	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("lvalue_nested", []() -> const decltype(lvnested) & { return lvnested; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:const decltype (lvnested)&	file:
__anon0649a7f02b02	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("return_none_string", []() -> std::string * { return nullptr; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:std::string *	file:
__anon0649a7f02c02	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("return_none_char",   []() -> const char *  { return nullptr; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:const char *	file:
__anon0649a7f02d02	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("return_none_bool",   []() -> bool *        { return nullptr; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:bool *	file:
__anon0649a7f02e02	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("return_none_int",    []() -> int *         { return nullptr; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:int *	file:
__anon0649a7f02f02	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("return_none_float",  []() -> float *       { return nullptr; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:float *	file:
__anon0649a7f03002	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("defer_none_cstring", [](char *) { return false; });$/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f03102	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("defer_none_cstring", [](py::none) { return true; });$/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f03202	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("defer_none_custom", [](UserType *) { return false; });$/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f03302	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("defer_none_custom", [](py::none) { return true; });$/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f03402	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("nodefer_none_void", [](void *) { return true; });$/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f03502	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("nodefer_none_void", [](py::none) { return false; });$/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f03602	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("load_nullptr_t", [](std::nullptr_t) {}); \/\/ not useful, but it should still compile$/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f03702	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("cast_nullptr_t", []() { return std::nullptr_t{}; });$/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f03802	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("refwrap_builtin", [](std::reference_wrapper<int> p) { return 10 * p.get(); });$/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f03902	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("refwrap_usertype", [](std::reference_wrapper<UserType> p) { return p.get().value(); }/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f03a02	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("refwrap_list", [](bool copy) {$/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f03b02	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("refwrap_iiw", [](const IncType &w) { return w.value(); });$/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f03c02	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("refwrap_call_iiw", [](IncType &w, py::function f) {$/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f03d02	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("complex_cast", [](float x) { return "{}"_s.format(x); });$/;"	f	function:TEST_SUBMODULE	file:
__anon0649a7f03e02	src/pybind11/tests/test_builtin_casters.cpp	/^    m.def("complex_cast", [](std::complex<float> x) { return "({}, {})"_s.format(x.real(), x.ima/;"	f	function:TEST_SUBMODULE	file:
__anon0cf8aa410102	src/pybind11/tests/test_smart_ptr.cpp	/^test_initializer smart_ptr([](py::module &m) {$/;"	f	file:
__anon0cf8aa410202	src/pybind11/tests/test_smart_ptr.cpp	/^        []() -> bool {$/;"	f	function:__anon0cf8aa410102	typeref:typename:bool	file:
__anon0cf8aa410302	src/pybind11/tests/test_smart_ptr.cpp	/^test_initializer smart_ptr_and_references([](py::module &pm) {$/;"	f	file:
__anon0cf8aa410402	src/pybind11/tests/test_smart_ptr.cpp	/^        .def_property_readonly("copy", [](const SharedPtrRef &s) { return s.value; },$/;"	f	function:__anon0cf8aa410302	file:
__anon0cf8aa410502	src/pybind11/tests/test_smart_ptr.cpp	/^        .def_property_readonly("holder_copy", [](const SharedPtrRef &s) { return s.shared; },$/;"	f	function:__anon0cf8aa410302	file:
__anon0cf8aa410602	src/pybind11/tests/test_smart_ptr.cpp	/^        .def("set_ref", [](SharedPtrRef &, const A &) { return true; })$/;"	f	function:__anon0cf8aa410302	file:
__anon0cf8aa410702	src/pybind11/tests/test_smart_ptr.cpp	/^        .def("set_holder", [](SharedPtrRef &, std::shared_ptr<A>) { return true; });$/;"	f	function:__anon0cf8aa410302	file:
__anon0cf8aa410802	src/pybind11/tests/test_smart_ptr.cpp	/^        .def_property_readonly("ref", [](const SharedFromThisRef &s) -> const B & { return *s.sh/;"	f	function:__anon0cf8aa410302	typeref:typename:const B &	file:
__anon0cf8aa410902	src/pybind11/tests/test_smart_ptr.cpp	/^        .def_property_readonly("copy", [](const SharedFromThisRef &s) { return s.value; },$/;"	f	function:__anon0cf8aa410302	file:
__anon0cf8aa410a02	src/pybind11/tests/test_smart_ptr.cpp	/^        .def_property_readonly("holder_copy", [](const SharedFromThisRef &s) { return s.shared; /;"	f	function:__anon0cf8aa410302	file:
__anon0cf8aa410b02	src/pybind11/tests/test_smart_ptr.cpp	/^        .def("set_ref", [](SharedFromThisRef &, const B &) { return true; })$/;"	f	function:__anon0cf8aa410302	file:
__anon0cf8aa410c02	src/pybind11/tests/test_smart_ptr.cpp	/^        .def("set_holder", [](SharedFromThisRef &, std::shared_ptr<B>) { return true; });$/;"	f	function:__anon0cf8aa410302	file:
__anon0cf8aa410d02	src/pybind11/tests/test_smart_ptr.cpp	/^        .def_static("get", []() { return sft.get(); });$/;"	f	function:__anon0cf8aa410302	file:
__anon0cf8aa410e02	src/pybind11/tests/test_smart_ptr.cpp	/^        .def_static("make", []() { return CustomUniquePtr<C>(new C); });$/;"	f	function:__anon0cf8aa410302	file:
__anon0cf8aa410f02	src/pybind11/tests/test_smart_ptr.cpp	/^        .def_static("load_shared_ptr", [](std::shared_ptr<HeldByDefaultHolder>) {});$/;"	f	function:__anon0cf8aa410302	file:
__anon0cf8aa411002	src/pybind11/tests/test_smart_ptr.cpp	/^        .def("get", [](ElementList &el) {$/;"	f	function:__anon0cf8aa410302	file:
__anon187e61650102	src/pybind11/tests/test_callbacks.cpp	/^    return [](int i) { return i+1; };$/;"	f	function:test_callback4	file:
__anon187e61650202	src/pybind11/tests/test_callbacks.cpp	/^    return py::cpp_function([](int i) { return i+1; },$/;"	f	function:test_callback5	file:
__anon187e61650302	src/pybind11/tests/test_callbacks.cpp	/^test_initializer callbacks([](py::module &m) {$/;"	f	file:
__anon187e61650402	src/pybind11/tests/test_callbacks.cpp	/^    m.def("test_tuple_unpacking", [](py::function f) {$/;"	f	function:__anon187e61650302	file:
__anon187e61650502	src/pybind11/tests/test_callbacks.cpp	/^    m.def("test_dict_unpacking", [](py::function f) {$/;"	f	function:__anon187e61650302	file:
__anon187e61650602	src/pybind11/tests/test_callbacks.cpp	/^    m.def("test_keyword_args", [](py::function f) {$/;"	f	function:__anon187e61650302	file:
__anon187e61650702	src/pybind11/tests/test_callbacks.cpp	/^    m.def("test_unpacking_and_keywords1", [](py::function f) {$/;"	f	function:__anon187e61650302	file:
__anon187e61650802	src/pybind11/tests/test_callbacks.cpp	/^    m.def("test_unpacking_and_keywords2", [](py::function f) {$/;"	f	function:__anon187e61650302	file:
__anon187e61650902	src/pybind11/tests/test_callbacks.cpp	/^    m.def("test_unpacking_error1", [](py::function f) {$/;"	f	function:__anon187e61650302	file:
__anon187e61650a02	src/pybind11/tests/test_callbacks.cpp	/^    m.def("test_unpacking_error2", [](py::function f) {$/;"	f	function:__anon187e61650302	file:
__anon187e61650b02	src/pybind11/tests/test_callbacks.cpp	/^    m.def("test_arg_conversion_error1", [](py::function f) {$/;"	f	function:__anon187e61650302	file:
__anon187e61650c02	src/pybind11/tests/test_callbacks.cpp	/^    m.def("test_arg_conversion_error2", [](py::function f) {$/;"	f	function:__anon187e61650302	file:
__anon187e61650d02	src/pybind11/tests/test_callbacks.cpp	/^    m.def("test_cleanup", []() -> std::function<void(void)> {$/;"	f	function:__anon187e61650302	typeref:typename:std::function<void (void)>	file:
__anon187e61650e02	src/pybind11/tests/test_callbacks.cpp	/^        return [p]() {$/;"	f	function:__anon187e61650302::__anon187e61650d02	file:
__anon187e61650f02	src/pybind11/tests/test_callbacks.cpp	/^    m.def("callback_with_movable", [](std::function<void(MovableObject &)> f) {$/;"	f	function:__anon187e61650302	file:
__anon187e61651002	src/pybind11/tests/test_callbacks.cpp	/^        .def("triple", [](CppBoundMethodTest &, int val) { return 3 * val; });$/;"	f	function:__anon187e61650302	file:
__anon23e52db20102	src/pybind11/tests/test_buffers.cpp	/^test_initializer buffers([](py::module &m) {$/;"	f	file:
__anon23e52db20202	src/pybind11/tests/test_buffers.cpp	/^        .def("__init__", [](Matrix &v, py::buffer b) {$/;"	f	function:__anon23e52db20102	file:
__anon23e52db20302	src/pybind11/tests/test_buffers.cpp	/^       .def("__getitem__", [](const Matrix &m, std::pair<ssize_t, ssize_t> i) {$/;"	f	function:__anon23e52db20102	file:
__anon23e52db20402	src/pybind11/tests/test_buffers.cpp	/^       .def("__setitem__", [](Matrix &m, std::pair<ssize_t, ssize_t> i, float v) {$/;"	f	function:__anon23e52db20102	file:
__anon23e52db20502	src/pybind11/tests/test_buffers.cpp	/^       .def_buffer([](Matrix &m) -> py::buffer_info {$/;"	f	function:__anon23e52db20102	typeref:typename:py::buffer_info	file:
__anon319c860a0102	src/pybind11/tests/test_operator_overloading.cpp	/^test_initializer operator_overloading([](py::module &pm) {$/;"	f	file:
__anon319c860a0202	src/pybind11/tests/test_operator_overloading.cpp	/^        .def("__add__", [](const C2& c2, const C1& c1) { return c2 + c1; })$/;"	f	function:__anon319c860a0102	file:
__anon319c860a0302	src/pybind11/tests/test_operator_overloading.cpp	/^        .def("__radd__", [](const C2& c2, const C1& c1) { return c1 + c2; });$/;"	f	function:__anon319c860a0102	file:
__anon319c860a0402	src/pybind11/tests/test_operator_overloading.cpp	/^        .def("as_base", [](NestA &a) -> NestABase& {$/;"	f	function:__anon319c860a0102	typeref:typename:NestABase &	file:
__anon319c860a0502	src/pybind11/tests/test_operator_overloading.cpp	/^    m.def("get_NestA", [](const NestA &a) { return a.value; });$/;"	f	function:__anon319c860a0102	file:
__anon319c860a0602	src/pybind11/tests/test_operator_overloading.cpp	/^    m.def("get_NestB", [](const NestB &b) { return b.value; });$/;"	f	function:__anon319c860a0102	file:
__anon319c860a0702	src/pybind11/tests/test_operator_overloading.cpp	/^    m.def("get_NestC", [](const NestC &c) { return c.value; });$/;"	f	function:__anon319c860a0102	file:
__anon353a2bf80102	src/pybind11/tests/test_numpy_vectorize.cpp	/^test_initializer numpy_vectorize([](py::module &m) {$/;"	f	file:
__anon353a2bf80202	src/pybind11/tests/test_numpy_vectorize.cpp	/^        [](py::array_t<int> x, py::array_t<float> y, float z) {$/;"	f	function:__anon353a2bf80102	file:
__anon353a2bf80302	src/pybind11/tests/test_numpy_vectorize.cpp	/^            return py::vectorize([z](int x, float y) { return my_func(x, y, z); })(x, y);$/;"	f	function:__anon353a2bf80102::__anon353a2bf80202	file:
__anon353a2bf80402	src/pybind11/tests/test_numpy_vectorize.cpp	/^    m.def("selective_func", [](py::array_t<int, py::array::c_style>) { return "Int branch taken./;"	f	function:__anon353a2bf80102	file:
__anon353a2bf80502	src/pybind11/tests/test_numpy_vectorize.cpp	/^    m.def("selective_func", [](py::array_t<float, py::array::c_style>) { return "Float branch ta/;"	f	function:__anon353a2bf80102	file:
__anon353a2bf80602	src/pybind11/tests/test_numpy_vectorize.cpp	/^    m.def("selective_func", [](py::array_t<std::complex<float>, py::array::c_style>) { return "C/;"	f	function:__anon353a2bf80102	file:
__anon353a2bf80702	src/pybind11/tests/test_numpy_vectorize.cpp	/^        [](double *a, double b, py::array_t<double> c, const int &d, int &e, NonPODClass f, cons/;"	f	function:__anon353a2bf80102	file:
__anon353a2bf80802	src/pybind11/tests/test_numpy_vectorize.cpp	/^                ) {$/;"	f	function:__anon353a2bf80102	file:
__anon378bd4fd0102	src/pybind11/tests/test_kwargs_and_defaults.cpp	/^test_initializer arg_keywords_and_defaults([](py::module &m) {$/;"	f	file:
__anon378bd4fd0202	src/pybind11/tests/test_kwargs_and_defaults.cpp	/^    m.def("kw_func3", [](const char *) { }, py::arg("data") = std::string("Hello world!"));$/;"	f	function:__anon378bd4fd0102	file:
__anon3dce34310102	src/pybind11/include/pybind11/pytypes.h	/^        m_ptr = PyCapsule_New(const_cast<void *>(value), nullptr, [](PyObject *o) {$/;"	f	function:capsule::capsule	file:
__anon3dce34310202	src/pybind11/include/pybind11/pytypes.h	/^        m_ptr = PyCapsule_New(reinterpret_cast<void *>(destructor), nullptr, [](PyObject *o) {$/;"	f	function:capsule::capsule	file:
__anon498c355d0102	src/pybind11/tests/test_docstring_options.cpp	/^test_initializer docstring_generation([](py::module &m) {$/;"	f	file:
__anon498c355d0202	src/pybind11/tests/test_docstring_options.cpp	/^        m.def("test_function1", [](int, int) {}, py::arg("a"), py::arg("b"));$/;"	f	function:__anon498c355d0102	file:
__anon498c355d0302	src/pybind11/tests/test_docstring_options.cpp	/^        m.def("test_function2", [](int, int) {}, py::arg("a"), py::arg("b"), "A custom docstring/;"	f	function:__anon498c355d0102	file:
__anon498c355d0402	src/pybind11/tests/test_docstring_options.cpp	/^        m.def("test_overloaded1", [](int) {}, py::arg("i"), "Overload docstring");$/;"	f	function:__anon498c355d0102	file:
__anon498c355d0502	src/pybind11/tests/test_docstring_options.cpp	/^        m.def("test_overloaded1", [](double) {}, py::arg("d"));$/;"	f	function:__anon498c355d0102	file:
__anon498c355d0602	src/pybind11/tests/test_docstring_options.cpp	/^        m.def("test_overloaded2", [](int) {}, py::arg("i"), "overload docstring 1");$/;"	f	function:__anon498c355d0102	file:
__anon498c355d0702	src/pybind11/tests/test_docstring_options.cpp	/^        m.def("test_overloaded2", [](double) {}, py::arg("d"), "overload docstring 2");$/;"	f	function:__anon498c355d0102	file:
__anon498c355d0802	src/pybind11/tests/test_docstring_options.cpp	/^        m.def("test_overloaded3", [](int) {}, py::arg("i"));$/;"	f	function:__anon498c355d0102	file:
__anon498c355d0902	src/pybind11/tests/test_docstring_options.cpp	/^        m.def("test_overloaded3", [](double) {}, py::arg("d"), "Overload docstr");$/;"	f	function:__anon498c355d0102	file:
__anon498c355d0a02	src/pybind11/tests/test_docstring_options.cpp	/^        m.def("test_function3", [](int, int) {}, py::arg("a"), py::arg("b"));$/;"	f	function:__anon498c355d0102	file:
__anon498c355d0b02	src/pybind11/tests/test_docstring_options.cpp	/^        m.def("test_function4", [](int, int) {}, py::arg("a"), py::arg("b"), "A custom docstring/;"	f	function:__anon498c355d0102	file:
__anon498c355d0c02	src/pybind11/tests/test_docstring_options.cpp	/^        m.def("test_function5", [](int, int) {}, py::arg("a"), py::arg("b"), "A custom docstring/;"	f	function:__anon498c355d0102	file:
__anon498c355d0d02	src/pybind11/tests/test_docstring_options.cpp	/^            m.def("test_function6", [](int, int) {}, py::arg("a"), py::arg("b"), "A custom docst/;"	f	function:__anon498c355d0102	file:
__anon498c355d0e02	src/pybind11/tests/test_docstring_options.cpp	/^    m.def("test_function7", [](int, int) {}, py::arg("a"), py::arg("b"), "A custom docstring");$/;"	f	function:__anon498c355d0102	file:
__anon4fbd85580102	src/pybind11/tests/test_call_policies.cpp	/^test_initializer keep_alive([](py::module &m) {$/;"	f	file:
__anon4fbd85580202	src/pybind11/tests/test_call_policies.cpp	/^test_initializer call_guard([](py::module &pm) {$/;"	f	file:
__anon4fbd85580302	src/pybind11/tests/test_call_policies.cpp	/^    m.def("multiple_guards_correct_order", []() {$/;"	f	function:__anon4fbd85580202	file:
__anon4fbd85580402	src/pybind11/tests/test_call_policies.cpp	/^    m.def("multiple_guards_wrong_order", []() {$/;"	f	function:__anon4fbd85580202	file:
__anon4fbd85580502	src/pybind11/tests/test_call_policies.cpp	/^    auto report_gil_status = []() {$/;"	f	function:__anon4fbd85580202	file:
__anon6548ec7e0102	src/pybind11/tests/test_stl_binders.cpp	/^test_initializer stl_binder_vector([](py::module &m) {$/;"	f	file:
__anon6548ec7e0202	src/pybind11/tests/test_stl_binders.cpp	/^    m.def("create_undeclstruct", [m] () mutable {$/;"	f	function:__anon6548ec7e0102	file:
__anon6548ec7e0302	src/pybind11/tests/test_stl_binders.cpp	/^    m.def("get_vectorstruct", [] {return std::vector<VStruct> {{0, 5, 3.0, 1}, {1, 30, -1e4, 0}}/;"	f	function:__anon6548ec7e0102	file:
__anon6548ec7e0402	src/pybind11/tests/test_stl_binders.cpp	/^test_initializer stl_binder_map([](py::module &m) {$/;"	f	file:
__anon6548ec7e0502	src/pybind11/tests/test_stl_binders.cpp	/^test_initializer stl_binder_noncopyable([](py::module &m) {$/;"	f	file:
__anon696bb0020102	src/pybind11/include/pybind11/stl_bind.h	/^        [](const Vector &v, const T &x) {$/;"	f	function:vector_if_equal_operator	file:
__anon696bb0020202	src/pybind11/include/pybind11/stl_bind.h	/^    cl.def("remove", [](Vector &v, const T &x) {$/;"	f	function:vector_if_equal_operator	file:
__anon696bb0020302	src/pybind11/include/pybind11/stl_bind.h	/^        [](const Vector &v, const T &x) {$/;"	f	function:vector_if_equal_operator	file:
__anon696bb0020402	src/pybind11/include/pybind11/stl_bind.h	/^           [](Vector &v, const T &value) { v.push_back(value); },$/;"	f	function:vector_modifiers	file:
__anon696bb0020502	src/pybind11/include/pybind11/stl_bind.h	/^    cl.def("__init__", [](Vector &v, iterable it) {$/;"	f	function:vector_modifiers	file:
__anon696bb0020602	src/pybind11/include/pybind11/stl_bind.h	/^       [](Vector &v, const Vector &src) {$/;"	f	function:vector_modifiers	file:
__anon696bb0020702	src/pybind11/include/pybind11/stl_bind.h	/^        [](Vector &v, SizeType i, const T &x) {$/;"	f	function:vector_modifiers	file:
__anon696bb0020802	src/pybind11/include/pybind11/stl_bind.h	/^        [](Vector &v) {$/;"	f	function:vector_modifiers	file:
__anon696bb0020902	src/pybind11/include/pybind11/stl_bind.h	/^        [](Vector &v, SizeType i) {$/;"	f	function:vector_modifiers	file:
__anon696bb0020a02	src/pybind11/include/pybind11/stl_bind.h	/^        [](Vector &v, SizeType i, const T &t) {$/;"	f	function:vector_modifiers	file:
__anon696bb0020b02	src/pybind11/include/pybind11/stl_bind.h	/^        [](const Vector &v, slice slice) -> Vector * {$/;"	f	function:vector_modifiers	typeref:typename:Vector *	file:
__anon696bb0020c02	src/pybind11/include/pybind11/stl_bind.h	/^        [](Vector &v, slice slice,  const Vector &value) {$/;"	f	function:vector_modifiers	file:
__anon696bb0020d02	src/pybind11/include/pybind11/stl_bind.h	/^        [](Vector &v, SizeType i) {$/;"	f	function:vector_modifiers	file:
__anon696bb0020e02	src/pybind11/include/pybind11/stl_bind.h	/^        [](Vector &v, slice slice) {$/;"	f	function:vector_modifiers	file:
__anon696bb0020f02	src/pybind11/include/pybind11/stl_bind.h	/^        [](Vector &v, SizeType i) -> T & {$/;"	f	typeref:typename:T &	file:
__anon696bb0021002	src/pybind11/include/pybind11/stl_bind.h	/^           [](Vector &v) {$/;"	f	file:
__anon696bb0021102	src/pybind11/include/pybind11/stl_bind.h	/^        [](const Vector &v, SizeType i) -> T {$/;"	f	function:vector_accessor	typeref:typename:T	file:
__anon696bb0021202	src/pybind11/include/pybind11/stl_bind.h	/^           [](Vector &v) {$/;"	f	function:vector_accessor	file:
__anon696bb0021302	src/pybind11/include/pybind11/stl_bind.h	/^           [name](Vector &v) {$/;"	f	function:vector_if_insertion_operator	file:
__anon696bb0021402	src/pybind11/include/pybind11/stl_bind.h	/^    cl.def_buffer([](Vector& v) -> buffer_info {$/;"	f	function:vector_buffer	typeref:typename:buffer_info	file:
__anon696bb0021502	src/pybind11/include/pybind11/stl_bind.h	/^    cl.def("__init__", [](Vector& vec, buffer buf) {$/;"	f	function:vector_buffer	file:
__anon696bb0021602	src/pybind11/include/pybind11/stl_bind.h	/^        [](const Vector &v) -> bool {$/;"	f	function:NAMESPACE_END	typeref:typename:bool	file:
__anon696bb0021702	src/pybind11/include/pybind11/stl_bind.h	/^           [](Map &m, const KeyType &k, const MappedType &v) {$/;"	f	function:map_assignment	file:
__anon696bb0021802	src/pybind11/include/pybind11/stl_bind.h	/^           [](Map &m, const KeyType &k, const MappedType &v) {$/;"	f	function:map_assignment	file:
__anon696bb0021902	src/pybind11/include/pybind11/stl_bind.h	/^           [name](Map &m) {$/;"	f	function:map_if_insertion_operator	file:
__anon696bb0021a02	src/pybind11/include/pybind11/stl_bind.h	/^        [](const Map &m) -> bool { return !m.empty(); },$/;"	f	function:NAMESPACE_END	typeref:typename:bool	file:
__anon696bb0021b02	src/pybind11/include/pybind11/stl_bind.h	/^           [](Map &m) { return make_key_iterator(m.begin(), m.end()); },$/;"	f	function:NAMESPACE_END	file:
__anon696bb0021c02	src/pybind11/include/pybind11/stl_bind.h	/^           [](Map &m) { return make_iterator(m.begin(), m.end()); },$/;"	f	function:NAMESPACE_END	file:
__anon696bb0021d02	src/pybind11/include/pybind11/stl_bind.h	/^        [](Map &m, const KeyType &k) -> MappedType & {$/;"	f	function:NAMESPACE_END	typeref:typename:MappedType &	file:
__anon696bb0021e02	src/pybind11/include/pybind11/stl_bind.h	/^           [](Map &m, const KeyType &k) {$/;"	f	function:NAMESPACE_END	file:
__anon6b4b75210102	src/pybind11/tests/test_cmake_build/embed.cpp	/^    m.def("add", [](int i, int j) { return i + j; });$/;"	f	function:PYBIND11_EMBEDDED_MODULE	file:
__anon6bb1af8e0102	src/pybind11/tests/test_chrono.cpp	/^test_initializer chrono([] (py::module &m) {$/;"	f	file:
__anon759530290102	src/pybind11/tests/test_cmake_build/main.cpp	/^    m.def("add", [](int i, int j) { return i + j; });$/;"	f	function:PYBIND11_MODULE	file:
__anon759588200102	src/pybind11/tests/pybind11_tests.cpp	/^    initializers().push_back([=](py::module &parent) {$/;"	f	function:test_initializer::test_initializer	file:
__anon759588200202	src/pybind11/tests/pybind11_tests.cpp	/^        .def_static("detail_reg_inst", []() {$/;"	f	function:bind_ConstructorStats	file:
__anon759588200302	src/pybind11/tests/pybind11_tests.cpp	/^        .def("__repr__", [](const UserType& u) { return "UserType({})"_s.format(u.value()); });$/;"	f	function:PYBIND11_MODULE	file:
__anon759588200402	src/pybind11/tests/pybind11_tests.cpp	/^        .def("__repr__", [](const IncType& u) { return "IncType({})"_s.format(u.value()); });$/;"	f	function:PYBIND11_MODULE	file:
__anon79d098d60102	src/pybind11/tests/test_copy_move.cpp	/^test_initializer copy_move_policies([](py::module &m) {$/;"	f	file:
__anon79d098d60202	src/pybind11/tests/test_copy_move.cpp	/^    m.def("move_only", [](MoveOnlyInt m) {$/;"	f	function:__anon79d098d60102	file:
__anon79d098d60302	src/pybind11/tests/test_copy_move.cpp	/^    m.def("move_or_copy", [](MoveOrCopyInt m) {$/;"	f	function:__anon79d098d60102	file:
__anon79d098d60402	src/pybind11/tests/test_copy_move.cpp	/^    m.def("copy_only", [](CopyOnlyInt m) {$/;"	f	function:__anon79d098d60102	file:
__anon79d098d60502	src/pybind11/tests/test_copy_move.cpp	/^    m.def("move_and_copy_casts", [](py::object o) {$/;"	f	function:__anon79d098d60102	file:
__anon79d098d60602	src/pybind11/tests/test_copy_move.cpp	/^    m.def("move_pair", [](std::pair<MoveOnlyInt, MoveOrCopyInt> p) {$/;"	f	function:__anon79d098d60102	file:
__anon79d098d60702	src/pybind11/tests/test_copy_move.cpp	/^    m.def("move_tuple", [](std::tuple<MoveOnlyInt, MoveOrCopyInt, MoveOnlyInt> t) {$/;"	f	function:__anon79d098d60102	file:
__anon79d098d60802	src/pybind11/tests/test_copy_move.cpp	/^    m.def("copy_tuple", [](std::tuple<CopyOnlyInt, CopyOnlyInt> t) {$/;"	f	function:__anon79d098d60102	file:
__anon79d098d60902	src/pybind11/tests/test_copy_move.cpp	/^    m.def("move_copy_nested", [](std::pair<MoveOnlyInt, std::pair<std::tuple<MoveOrCopyInt, Copy/;"	f	function:__anon79d098d60102	file:
__anon79d098d60a02	src/pybind11/tests/test_copy_move.cpp	/^    m.def("move_and_copy_cstats", []() {$/;"	f	function:__anon79d098d60102	file:
__anon79d098d60b02	src/pybind11/tests/test_copy_move.cpp	/^    m.def("move_optional", [](std::optional<MoveOnlyInt> o) {$/;"	f	function:__anon79d098d60102	file:
__anon79d098d60c02	src/pybind11/tests/test_copy_move.cpp	/^    m.def("move_or_copy_optional", [](std::optional<MoveOrCopyInt> o) {$/;"	f	function:__anon79d098d60102	file:
__anon79d098d60d02	src/pybind11/tests/test_copy_move.cpp	/^    m.def("copy_optional", [](std::optional<CopyOnlyInt> o) {$/;"	f	function:__anon79d098d60102	file:
__anon79d098d60e02	src/pybind11/tests/test_copy_move.cpp	/^    m.def("move_optional_tuple", [](std::optional<std::tuple<MoveOrCopyInt, MoveOnlyInt, CopyOnl/;"	f	function:__anon79d098d60102	file:
__anon79d098d60f02	src/pybind11/tests/test_copy_move.cpp	/^    m.def("private_op_new_value", []() { return PrivateOpNew(); });$/;"	f	function:__anon79d098d60102	file:
__anon79d098d61002	src/pybind11/tests/test_copy_move.cpp	/^    m.def("private_op_new_reference", []() -> const PrivateOpNew & {$/;"	f	function:__anon79d098d60102	typeref:typename:const PrivateOpNew &	file:
__anon79d098d61102	src/pybind11/tests/test_copy_move.cpp	/^    m.def("get_moveissue1", [](int i) { return new MoveIssue1(i); }, py::return_value_policy::mo/;"	f	function:__anon79d098d60102	file:
__anon79d098d61202	src/pybind11/tests/test_copy_move.cpp	/^    m.def("get_moveissue2", [](int i) { return MoveIssue2(i); }, py::return_value_policy::move);$/;"	f	function:__anon79d098d60102	file:
__anon7b367e7c010a	src/pybind11/include/pybind11/common.h	/^    union {$/;"	u	struct:instance
__anon7b367e7c0208	src/pybind11/include/pybind11/common.h	/^        struct {$/;"	s	union:instance::__anon7b367e7c010a
__anon866f615b0102	src/pybind11/include/pybind11/pybind11.h	/^        initialize([f](Class *c, Arg... args) -> Return { return (c->*f)(args...); },$/;"	f	function:cpp_function::cpp_function	typeref:typename:Return	file:
__anon866f615b0202	src/pybind11/include/pybind11/pybind11.h	/^        initialize([f](const Class *c, Arg... args) -> Return { return (c->*f)(args...); },$/;"	f	function:cpp_function::cpp_function	typeref:typename:Return	file:
__anon866f615b0302	src/pybind11/include/pybind11/pybind11.h	/^                rec->free_data = [](detail::function_record *r) { ((capture *) &r->data)->~captu/;"	f	function:cpp_function::initialize	file:
__anon866f615b0402	src/pybind11/include/pybind11/pybind11.h	/^            rec->free_data = [](detail::function_record *r) { delete ((capture *) r->data[0]); }/;"	f	function:cpp_function::initialize	file:
__anon866f615b0502	src/pybind11/include/pybind11/pybind11.h	/^        rec->impl = [](detail::function_call &call) -> handle {$/;"	f	function:cpp_function::initialize	typeref:typename:handle	file:
__anon866f615b0602	src/pybind11/include/pybind11/pybind11.h	/^            capsule rec_capsule(rec, [](void *ptr) {$/;"	f	function:cpp_function::initialize_generic	file:
__anon866f615b0702	src/pybind11/include/pybind11/pybind11.h	/^        rec.add_base(typeid(Base), [](void *src) -> void * {$/;"	f	function:class_::add_base	typeref:typename:void *	file:
__anon866f615b0802	src/pybind11/include/pybind11/pybind11.h	/^        install_buffer_funcs([](PyObject *obj, void *ptr) -> buffer_info* {$/;"	f	function:class_::def_buffer	typeref:typename:buffer_info *	file:
__anon866f615b0902	src/pybind11/include/pybind11/pybind11.h	/^        return def_buffer([func] (type &obj) { return (obj.*func)(); });$/;"	f	function:class_::def_buffer	file:
__anon866f615b0a02	src/pybind11/include/pybind11/pybind11.h	/^        return def_buffer([func] (const type &obj) { return (obj.*func)(); });$/;"	f	function:class_::def_buffer	file:
__anon866f615b0b02	src/pybind11/include/pybind11/pybind11.h	/^        cpp_function fget([pm](const type &c) -> const D &{ return c.*pm; }, is_method(*this)),$/;"	f	function:class_::def_readwrite	typeref:typename:const D &	file:
__anon866f615b0c02	src/pybind11/include/pybind11/pybind11.h	/^                     fset([pm](type &c, const D &value) { c.*pm = value; }, is_method(*this));$/;"	f	function:class_::def_readwrite	file:
__anon866f615b0d02	src/pybind11/include/pybind11/pybind11.h	/^        cpp_function fget([pm](const type &c) -> const D &{ return c.*pm; }, is_method(*this));$/;"	f	function:class_::def_readonly	typeref:typename:const D &	file:
__anon866f615b0e02	src/pybind11/include/pybind11/pybind11.h	/^        cpp_function fget([pm](object) -> const D &{ return *pm; }, scope(*this)),$/;"	f	function:class_::def_readwrite_static	typeref:typename:const D &	file:
__anon866f615b0f02	src/pybind11/include/pybind11/pybind11.h	/^                     fset([pm](object, const D &value) { *pm = value; }, scope(*this));$/;"	f	function:class_::def_readwrite_static	file:
__anon866f615b1002	src/pybind11/include/pybind11/pybind11.h	/^        cpp_function fget([pm](object) -> const D &{ return *pm; }, scope(*this));$/;"	f	function:class_::def_readonly_static	typeref:typename:const D &	file:
__anon866f615b1102	src/pybind11/include/pybind11/pybind11.h	/^        def("__repr__", [name, m_entries_ptr](Type value) -> pybind11::str {$/;"	f	function:enum_::enum_	typeref:typename:pybind11::str	file:
__anon866f615b1202	src/pybind11/include/pybind11/pybind11.h	/^        def_property_readonly_static("__members__", [m_entries_ptr](object \/* self *\/) {$/;"	f	function:enum_::enum_	file:
__anon866f615b1302	src/pybind11/include/pybind11/pybind11.h	/^        def("__init__", [](Type& value, Scalar i) { value = (Type)i; });$/;"	f	function:enum_::enum_	file:
__anon866f615b1402	src/pybind11/include/pybind11/pybind11.h	/^        def("__int__", [](Type value) { return (Scalar) value; });$/;"	f	function:enum_::enum_	file:
__anon866f615b1502	src/pybind11/include/pybind11/pybind11.h	/^            def("__long__", [](Type value) { return (Scalar) value; });$/;"	f	function:enum_::enum_	file:
__anon866f615b1602	src/pybind11/include/pybind11/pybind11.h	/^        def("__eq__", [](const Type &value, Type *value2) { return value2 && value == *value2; }/;"	f	function:enum_::enum_	file:
__anon866f615b1702	src/pybind11/include/pybind11/pybind11.h	/^        def("__ne__", [](const Type &value, Type *value2) { return !value2 || value != *value2; /;"	f	function:enum_::enum_	file:
__anon866f615b1802	src/pybind11/include/pybind11/pybind11.h	/^            def("__lt__", [](const Type &value, Type *value2) { return value2 && value < *value2/;"	f	function:enum_::enum_	file:
__anon866f615b1902	src/pybind11/include/pybind11/pybind11.h	/^            def("__gt__", [](const Type &value, Type *value2) { return value2 && value > *value2/;"	f	function:enum_::enum_	file:
__anon866f615b1a02	src/pybind11/include/pybind11/pybind11.h	/^            def("__le__", [](const Type &value, Type *value2) { return value2 && value <= *value/;"	f	function:enum_::enum_	file:
__anon866f615b1b02	src/pybind11/include/pybind11/pybind11.h	/^            def("__ge__", [](const Type &value, Type *value2) { return value2 && value >= *value/;"	f	function:enum_::enum_	file:
__anon866f615b1c02	src/pybind11/include/pybind11/pybind11.h	/^            def("__eq__", [](const Type &value, Scalar value2) { return (Scalar) value == value2/;"	f	function:enum_::enum_	file:
__anon866f615b1d02	src/pybind11/include/pybind11/pybind11.h	/^            def("__ne__", [](const Type &value, Scalar value2) { return (Scalar) value != value2/;"	f	function:enum_::enum_	file:
__anon866f615b1e02	src/pybind11/include/pybind11/pybind11.h	/^                def("__lt__", [](const Type &value, Scalar value2) { return (Scalar) value < val/;"	f	function:enum_::enum_	file:
__anon866f615b1f02	src/pybind11/include/pybind11/pybind11.h	/^                def("__gt__", [](const Type &value, Scalar value2) { return (Scalar) value > val/;"	f	function:enum_::enum_	file:
__anon866f615b2002	src/pybind11/include/pybind11/pybind11.h	/^                def("__le__", [](const Type &value, Scalar value2) { return (Scalar) value <= va/;"	f	function:enum_::enum_	file:
__anon866f615b2102	src/pybind11/include/pybind11/pybind11.h	/^                def("__ge__", [](const Type &value, Scalar value2) { return (Scalar) value >= va/;"	f	function:enum_::enum_	file:
__anon866f615b2202	src/pybind11/include/pybind11/pybind11.h	/^                def("__invert__", [](const Type &value) { return ~((Scalar) value); });$/;"	f	function:enum_::enum_	file:
__anon866f615b2302	src/pybind11/include/pybind11/pybind11.h	/^                def("__and__", [](const Type &value, Scalar value2) { return (Scalar) value & va/;"	f	function:enum_::enum_	file:
__anon866f615b2402	src/pybind11/include/pybind11/pybind11.h	/^                def("__or__", [](const Type &value, Scalar value2) { return (Scalar) value | val/;"	f	function:enum_::enum_	file:
__anon866f615b2502	src/pybind11/include/pybind11/pybind11.h	/^                def("__xor__", [](const Type &value, Scalar value2) { return (Scalar) value ^ va/;"	f	function:enum_::enum_	file:
__anon866f615b2602	src/pybind11/include/pybind11/pybind11.h	/^                def("__rand__", [](const Type &value, Scalar value2) { return (Scalar) value & v/;"	f	function:enum_::enum_	file:
__anon866f615b2702	src/pybind11/include/pybind11/pybind11.h	/^                def("__ror__", [](const Type &value, Scalar value2) { return (Scalar) value | va/;"	f	function:enum_::enum_	file:
__anon866f615b2802	src/pybind11/include/pybind11/pybind11.h	/^                def("__rxor__", [](const Type &value, Scalar value2) { return (Scalar) value ^ v/;"	f	function:enum_::enum_	file:
__anon866f615b2902	src/pybind11/include/pybind11/pybind11.h	/^                def("__and__", [](const Type &value, const Type &value2) { return (Scalar) value/;"	f	function:enum_::enum_	file:
__anon866f615b2a02	src/pybind11/include/pybind11/pybind11.h	/^                def("__or__", [](const Type &value, const Type &value2) { return (Scalar) value /;"	f	function:enum_::enum_	file:
__anon866f615b2b02	src/pybind11/include/pybind11/pybind11.h	/^                def("__xor__", [](const Type &value, const Type &value2) { return (Scalar) value/;"	f	function:enum_::enum_	file:
__anon866f615b2c02	src/pybind11/include/pybind11/pybind11.h	/^        def("__hash__", [](const Type &value) { return (Scalar) value; });$/;"	f	function:enum_::enum_	file:
__anon866f615b2d02	src/pybind11/include/pybind11/pybind11.h	/^        def("__getstate__", [](const Type &value) { return pybind11::make_tuple((Scalar) value);/;"	f	function:enum_::enum_	file:
__anon866f615b2e02	src/pybind11/include/pybind11/pybind11.h	/^        def("__setstate__", [](Type &p, tuple t) { new (&p) Type((Type) t[0].cast<Scalar>()); })/;"	f	function:enum_::enum_	file:
__anon866f615b2f02	src/pybind11/include/pybind11/pybind11.h	/^        cl.def("__init__", [](Base *self_, Args... args) { new (self_) Base(args...); }, extra../;"	f	struct:init	file:
__anon866f615b3002	src/pybind11/include/pybind11/pybind11.h	/^        cl.def("__init__", [cl_type](handle self_, Args... args) {$/;"	f	function:init::execute	file:
__anon866f615b3102	src/pybind11/include/pybind11/pybind11.h	/^        cl.def("__init__", [](Alias *self_, Args... args) { new (self_) Alias(args...); }, extra/;"	f	function:init_alias::execute	file:
__anon866f615b3202	src/pybind11/include/pybind11/pybind11.h	/^            [patient](handle weakref) { patient.dec_ref(); weakref.dec_ref(); });$/;"	f	function:keep_alive_impl	file:
__anon866f615b3302	src/pybind11/include/pybind11/pybind11.h	/^        weakref((PyObject *) type, cpp_function([type](handle wr) {$/;"	f	function:all_type_info_get_cache	file:
__anon866f615b3402	src/pybind11/include/pybind11/pybind11.h	/^            .def("__iter__", [](state &s) -> state& { return s; })$/;"	f	function:make_iterator	typeref:typename:state &	file:
__anon866f615b3502	src/pybind11/include/pybind11/pybind11.h	/^            .def("__next__", [](state &s) -> ValueType {$/;"	f	function:make_iterator	typeref:typename:ValueType	file:
__anon866f615b3602	src/pybind11/include/pybind11/pybind11.h	/^            .def("__iter__", [](state &s) -> state& { return s; })$/;"	f	function:make_key_iterator	typeref:typename:state &	file:
__anon866f615b3702	src/pybind11/include/pybind11/pybind11.h	/^            .def("__next__", [](state &s) -> KeyType {$/;"	f	function:make_key_iterator	typeref:typename:KeyType	file:
__anon866f615b3802	src/pybind11/include/pybind11/pybind11.h	/^    auto implicit_caster = [](PyObject *obj, PyTypeObject *type) -> PyObject * {$/;"	f	function:implicitly_convertible	typeref:typename:PyObject *	file:
__anon866f615b3902	src/pybind11/include/pybind11/pybind11.h	/^    register_exception_translator([](std::exception_ptr p) {$/;"	f	function:register_exception	file:
__anon89451e4c0102	src/pybind11/tests/test_constants_and_functions.cpp	/^test_initializer constants_and_functions([](py::module &m) {$/;"	f	file:
__anon898d062d0102	src/pybind11/tests/test_eigen.cpp	/^test_initializer eigen([](py::module &m) {$/;"	f	file:
__anon898d062d0202	src/pybind11/tests/test_eigen.cpp	/^    m.def("double_col", [](const Eigen::VectorXf &x) -> Eigen::VectorXf { return 2.0f * x; });$/;"	f	function:__anon898d062d0102	typeref:typename:Eigen::VectorXf	file:
__anon898d062d0302	src/pybind11/tests/test_eigen.cpp	/^    m.def("double_row", [](const Eigen::RowVectorXf &x) -> Eigen::RowVectorXf { return 2.0f * x;/;"	f	function:__anon898d062d0102	typeref:typename:Eigen::RowVectorXf	file:
__anon898d062d0402	src/pybind11/tests/test_eigen.cpp	/^    m.def("double_complex", [](const Eigen::VectorXcf &x) -> Eigen::VectorXcf { return 2.0f * x;/;"	f	function:__anon898d062d0102	typeref:typename:Eigen::VectorXcf	file:
__anon898d062d0502	src/pybind11/tests/test_eigen.cpp	/^    m.def("double_threec", [](py::EigenDRef<Eigen::Vector3f> x) { x *= 2; });$/;"	f	function:__anon898d062d0102	file:
__anon898d062d0602	src/pybind11/tests/test_eigen.cpp	/^    m.def("double_threer", [](py::EigenDRef<Eigen::RowVector3f> x) { x *= 2; });$/;"	f	function:__anon898d062d0102	file:
__anon898d062d0702	src/pybind11/tests/test_eigen.cpp	/^    m.def("double_mat_cm", [](Eigen::MatrixXf x) -> Eigen::MatrixXf { return 2.0f * x; });$/;"	f	function:__anon898d062d0102	typeref:typename:Eigen::MatrixXf	file:
__anon898d062d0802	src/pybind11/tests/test_eigen.cpp	/^    m.def("double_mat_rm", [](DenseMatrixR x) -> DenseMatrixR { return 2.0f * x; });$/;"	f	function:__anon898d062d0102	typeref:typename:DenseMatrixR	file:
__anon898d062d0902	src/pybind11/tests/test_eigen.cpp	/^    m.def("cholesky1", [](Eigen::Ref<MatrixXdR> x) -> Eigen::MatrixXd { return x.llt().matrixL()/;"	f	function:__anon898d062d0102	typeref:typename:Eigen::MatrixXd	file:
__anon898d062d0a02	src/pybind11/tests/test_eigen.cpp	/^    m.def("cholesky2", [](const Eigen::Ref<const MatrixXdR> &x) -> Eigen::MatrixXd { return x.ll/;"	f	function:__anon898d062d0102	typeref:typename:Eigen::MatrixXd	file:
__anon898d062d0b02	src/pybind11/tests/test_eigen.cpp	/^    m.def("cholesky3", [](const Eigen::Ref<MatrixXdR> &x) -> Eigen::MatrixXd { return x.llt().ma/;"	f	function:__anon898d062d0102	typeref:typename:Eigen::MatrixXd	file:
__anon898d062d0c02	src/pybind11/tests/test_eigen.cpp	/^    m.def("cholesky4", [](Eigen::Ref<const MatrixXdR> x) -> Eigen::MatrixXd { return x.llt().mat/;"	f	function:__anon898d062d0102	typeref:typename:Eigen::MatrixXd	file:
__anon898d062d0d02	src/pybind11/tests/test_eigen.cpp	/^    auto add_rm = [](Eigen::Ref<MatrixXdR> x, int r, int c, double v) { x(r,c) += v; };$/;"	f	function:__anon898d062d0102	file:
__anon898d062d0e02	src/pybind11/tests/test_eigen.cpp	/^    auto add_cm = [](Eigen::Ref<Eigen::MatrixXd> x, int r, int c, double v) { x(r,c) += v; };$/;"	f	function:__anon898d062d0102	file:
__anon898d062d0f02	src/pybind11/tests/test_eigen.cpp	/^    m.def("add_any", [](py::EigenDRef<Eigen::MatrixXd> x, int r, int c, double v) { x(r,c) += v;/;"	f	function:__anon898d062d0102	file:
__anon898d062d1002	src/pybind11/tests/test_eigen.cpp	/^    m.def("get_cm_ref", []() { return Eigen::Ref<Eigen::MatrixXd>(get_cm()); });$/;"	f	function:__anon898d062d0102	file:
__anon898d062d1102	src/pybind11/tests/test_eigen.cpp	/^    m.def("get_rm_ref", []() { return Eigen::Ref<MatrixXdR>(get_rm()); });$/;"	f	function:__anon898d062d0102	file:
__anon898d062d1202	src/pybind11/tests/test_eigen.cpp	/^    m.def("get_cm_const_ref", []() { return Eigen::Ref<const Eigen::MatrixXd>(get_cm()); });$/;"	f	function:__anon898d062d0102	file:
__anon898d062d1302	src/pybind11/tests/test_eigen.cpp	/^    m.def("get_rm_const_ref", []() { return Eigen::Ref<const MatrixXdR>(get_rm()); });$/;"	f	function:__anon898d062d0102	file:
__anon898d062d1402	src/pybind11/tests/test_eigen.cpp	/^    m.def("get_cm_corners", []() {$/;"	f	function:__anon898d062d0102	file:
__anon898d062d1502	src/pybind11/tests/test_eigen.cpp	/^    m.def("get_cm_corners_const", []() {$/;"	f	function:__anon898d062d0102	file:
__anon898d062d1602	src/pybind11/tests/test_eigen.cpp	/^    m.def("incr_matrix", [](Eigen::Ref<Eigen::MatrixXd> m, double v) {$/;"	f	function:__anon898d062d0102	file:
__anon898d062d1702	src/pybind11/tests/test_eigen.cpp	/^    m.def("incr_matrix_any", [](py::EigenDRef<Eigen::MatrixXd> m, double v) {$/;"	f	function:__anon898d062d0102	file:
__anon898d062d1802	src/pybind11/tests/test_eigen.cpp	/^    m.def("even_rows", [](py::EigenDRef<Eigen::MatrixXd> m) {$/;"	f	function:__anon898d062d0102	file:
__anon898d062d1902	src/pybind11/tests/test_eigen.cpp	/^    m.def("even_cols", [](py::EigenDRef<Eigen::MatrixXd> m) {$/;"	f	function:__anon898d062d0102	file:
__anon898d062d1a02	src/pybind11/tests/test_eigen.cpp	/^    m.def("diagonal", [](const Eigen::Ref<const Eigen::MatrixXd> &x) { return x.diagonal(); });$/;"	f	function:__anon898d062d0102	file:
__anon898d062d1b02	src/pybind11/tests/test_eigen.cpp	/^    m.def("diagonal_1", [](const Eigen::Ref<const Eigen::MatrixXd> &x) { return x.diagonal<1>();/;"	f	function:__anon898d062d0102	file:
__anon898d062d1c02	src/pybind11/tests/test_eigen.cpp	/^    m.def("diagonal_n", [](const Eigen::Ref<const Eigen::MatrixXd> &x, int index) { return x.dia/;"	f	function:__anon898d062d0102	file:
__anon898d062d1d02	src/pybind11/tests/test_eigen.cpp	/^    m.def("block", [](const Eigen::Ref<const Eigen::MatrixXd> &x, int start_row, int start_col, /;"	f	function:__anon898d062d0102	file:
__anon898d062d1e02	src/pybind11/tests/test_eigen.cpp	/^    m.def("incr_diag", [](int k) {$/;"	f	function:__anon898d062d0102	file:
__anon898d062d1f02	src/pybind11/tests/test_eigen.cpp	/^    m.def("symmetric_lower", [](const Eigen::MatrixXi &m) {$/;"	f	function:__anon898d062d0102	file:
__anon898d062d2002	src/pybind11/tests/test_eigen.cpp	/^    m.def("symmetric_upper", [](const Eigen::MatrixXi &m) {$/;"	f	function:__anon898d062d0102	file:
__anon898d062d2102	src/pybind11/tests/test_eigen.cpp	/^    m.def("fixed_r", [mat]() -> FixedMatrixR { return FixedMatrixR(mat); });$/;"	f	function:__anon898d062d0102	typeref:typename:FixedMatrixR	file:
__anon898d062d2202	src/pybind11/tests/test_eigen.cpp	/^    m.def("fixed_r_const", [mat]() -> const FixedMatrixR { return FixedMatrixR(mat); });$/;"	f	function:__anon898d062d0102	typeref:typename:const FixedMatrixR	file:
__anon898d062d2302	src/pybind11/tests/test_eigen.cpp	/^    m.def("fixed_c", [mat]() -> FixedMatrixC { return FixedMatrixC(mat); });$/;"	f	function:__anon898d062d0102	typeref:typename:FixedMatrixC	file:
__anon898d062d2402	src/pybind11/tests/test_eigen.cpp	/^    m.def("fixed_copy_r", [](const FixedMatrixR &m) -> FixedMatrixR { return m; });$/;"	f	function:__anon898d062d0102	typeref:typename:FixedMatrixR	file:
__anon898d062d2502	src/pybind11/tests/test_eigen.cpp	/^    m.def("fixed_copy_c", [](const FixedMatrixC &m) -> FixedMatrixC { return m; });$/;"	f	function:__anon898d062d0102	typeref:typename:FixedMatrixC	file:
__anon898d062d2602	src/pybind11/tests/test_eigen.cpp	/^    m.def("fixed_mutator_r", [](Eigen::Ref<FixedMatrixR>) {});$/;"	f	function:__anon898d062d0102	file:
__anon898d062d2702	src/pybind11/tests/test_eigen.cpp	/^    m.def("fixed_mutator_c", [](Eigen::Ref<FixedMatrixC>) {});$/;"	f	function:__anon898d062d0102	file:
__anon898d062d2802	src/pybind11/tests/test_eigen.cpp	/^    m.def("fixed_mutator_a", [](py::EigenDRef<FixedMatrixC>) {});$/;"	f	function:__anon898d062d0102	file:
__anon898d062d2902	src/pybind11/tests/test_eigen.cpp	/^    m.def("dense_r", [mat]() -> DenseMatrixR { return DenseMatrixR(mat); });$/;"	f	function:__anon898d062d0102	typeref:typename:DenseMatrixR	file:
__anon898d062d2a02	src/pybind11/tests/test_eigen.cpp	/^    m.def("dense_c", [mat]() -> DenseMatrixC { return DenseMatrixC(mat); });$/;"	f	function:__anon898d062d0102	typeref:typename:DenseMatrixC	file:
__anon898d062d2b02	src/pybind11/tests/test_eigen.cpp	/^    m.def("dense_copy_r", [](const DenseMatrixR &m) -> DenseMatrixR { return m; });$/;"	f	function:__anon898d062d0102	typeref:typename:DenseMatrixR	file:
__anon898d062d2c02	src/pybind11/tests/test_eigen.cpp	/^    m.def("dense_copy_c", [](const DenseMatrixC &m) -> DenseMatrixC { return m; });$/;"	f	function:__anon898d062d0102	typeref:typename:DenseMatrixC	file:
__anon898d062d2d02	src/pybind11/tests/test_eigen.cpp	/^    m.def("sparse_r", [mat]() -> SparseMatrixR { return Eigen::SparseView<Eigen::MatrixXf>(mat);/;"	f	function:__anon898d062d0102	typeref:typename:SparseMatrixR	file:
__anon898d062d2e02	src/pybind11/tests/test_eigen.cpp	/^    m.def("sparse_c", [mat]() -> SparseMatrixC { return Eigen::SparseView<Eigen::MatrixXf>(mat);/;"	f	function:__anon898d062d0102	typeref:typename:SparseMatrixC	file:
__anon898d062d2f02	src/pybind11/tests/test_eigen.cpp	/^    m.def("sparse_copy_r", [](const SparseMatrixR &m) -> SparseMatrixR { return m; });$/;"	f	function:__anon898d062d0102	typeref:typename:SparseMatrixR	file:
__anon898d062d3002	src/pybind11/tests/test_eigen.cpp	/^    m.def("sparse_copy_c", [](const SparseMatrixC &m) -> SparseMatrixC { return m; });$/;"	f	function:__anon898d062d0102	typeref:typename:SparseMatrixC	file:
__anon898d062d3102	src/pybind11/tests/test_eigen.cpp	/^    m.def("partial_copy_four_rm_r", [](const FourRowMatrixR &m) -> FourRowMatrixR { return m; })/;"	f	function:__anon898d062d0102	typeref:typename:FourRowMatrixR	file:
__anon898d062d3202	src/pybind11/tests/test_eigen.cpp	/^    m.def("partial_copy_four_rm_c", [](const FourColMatrixR &m) -> FourColMatrixR { return m; })/;"	f	function:__anon898d062d0102	typeref:typename:FourColMatrixR	file:
__anon898d062d3302	src/pybind11/tests/test_eigen.cpp	/^    m.def("partial_copy_four_cm_r", [](const FourRowMatrixC &m) -> FourRowMatrixC { return m; })/;"	f	function:__anon898d062d0102	typeref:typename:FourRowMatrixC	file:
__anon898d062d3402	src/pybind11/tests/test_eigen.cpp	/^    m.def("partial_copy_four_cm_c", [](const FourColMatrixC &m) -> FourColMatrixC { return m; })/;"	f	function:__anon898d062d0102	typeref:typename:FourColMatrixC	file:
__anon898d062d3502	src/pybind11/tests/test_eigen.cpp	/^    m.def("cpp_copy", [](py::handle m) { return m.cast<Eigen::MatrixXd>()(1, 0); });$/;"	f	function:__anon898d062d0102	file:
__anon898d062d3602	src/pybind11/tests/test_eigen.cpp	/^    m.def("cpp_ref_c", [](py::handle m) { return m.cast<Eigen::Ref<Eigen::MatrixXd>>()(1, 0); })/;"	f	function:__anon898d062d0102	file:
__anon898d062d3702	src/pybind11/tests/test_eigen.cpp	/^    m.def("cpp_ref_r", [](py::handle m) { return m.cast<Eigen::Ref<MatrixXdR>>()(1, 0); });$/;"	f	function:__anon898d062d0102	file:
__anon898d062d3802	src/pybind11/tests/test_eigen.cpp	/^    m.def("cpp_ref_any", [](py::handle m) { return m.cast<py::EigenDRef<Eigen::MatrixXd>>()(1, 0/;"	f	function:__anon898d062d0102	file:
__anon898d062d3902	src/pybind11/tests/test_eigen.cpp	/^    m.def("get_elem_nocopy", [](Eigen::Ref<const Eigen::MatrixXd> m) -> double { return get_elem/;"	f	function:__anon898d062d0102	typeref:typename:double	file:
__anon898d062d3a02	src/pybind11/tests/test_eigen.cpp	/^    m.def("get_elem_rm_nocopy", [](Eigen::Ref<const Eigen::Matrix<long, -1, -1, Eigen::RowMajor>/;"	f	function:__anon898d062d0102	typeref:typename:long	file:
__anon898d062d3b02	src/pybind11/tests/test_eigen.cpp	/^            -> Eigen::MatrixXd {$/;"	f	function:__anon898d062d0102	typeref:typename:Eigen::MatrixXd	file:
__anon898d062d3c02	src/pybind11/tests/test_eigen.cpp	/^    m.def("get_elem_direct", [](Eigen::Ref<const Eigen::VectorXd> v) {$/;"	f	function:__anon898d062d0102	file:
__anon898d062d3d02	src/pybind11/tests/test_eigen.cpp	/^    m.def("get_elem_indirect", [](std::vector<Eigen::Ref<const Eigen::VectorXd>> v) {$/;"	f	function:__anon898d062d0102	file:
__anon8dd43f3e0102	src/pybind11/include/pybind11/cast.h	/^            [](std::exception_ptr p) -> void {$/;"	f	function:get_internals	typeref:typename:void	file:
__anon8dd43f3e0202	src/pybind11/include/pybind11/cast.h	/^        return [](const void *arg) -> void * {$/;"	f	function:type_caster_base::make_copy_constructor	typeref:typename:void *	file:
__anon8dd43f3e0302	src/pybind11/include/pybind11/cast.h	/^        return [](const void *arg) -> void * {$/;"	f	function:type_caster_base::make_move_constructor	typeref:typename:void *	file:
__anon8ef0fcf80102	src/pybind11/tests/test_stl.cpp	/^    m.def("cast_vector", []() { return std::vector<int>{1}; });$/;"	f	function:TEST_SUBMODULE	file:
__anon8ef0fcf80202	src/pybind11/tests/test_stl.cpp	/^    m.def("load_vector", [](const std::vector<int> &v) { return v.at(0) == 1 && v.at(1) == 2; })/;"	f	function:TEST_SUBMODULE	file:
__anon8ef0fcf80302	src/pybind11/tests/test_stl.cpp	/^    m.def("cast_ptr_vector", []() { return &lvv; });$/;"	f	function:TEST_SUBMODULE	file:
__anon8ef0fcf80402	src/pybind11/tests/test_stl.cpp	/^    m.def("cast_array", []() { return std::array<int, 2> {{1 , 2}}; });$/;"	f	function:TEST_SUBMODULE	file:
__anon8ef0fcf80502	src/pybind11/tests/test_stl.cpp	/^    m.def("load_array", [](const std::array<int, 2> &a) { return a[0] == 1 && a[1] == 2; });$/;"	f	function:TEST_SUBMODULE	file:
__anon8ef0fcf80602	src/pybind11/tests/test_stl.cpp	/^    m.def("cast_valarray", []() { return std::valarray<int>{1, 4, 9}; });$/;"	f	function:TEST_SUBMODULE	file:
__anon8ef0fcf80702	src/pybind11/tests/test_stl.cpp	/^    m.def("load_valarray", [](const std::valarray<int>& v) {$/;"	f	function:TEST_SUBMODULE	file:
__anon8ef0fcf80802	src/pybind11/tests/test_stl.cpp	/^    m.def("cast_map", []() { return std::map<std::string, std::string>{{"key", "value"}}; });$/;"	f	function:TEST_SUBMODULE	file:
__anon8ef0fcf80902	src/pybind11/tests/test_stl.cpp	/^    m.def("load_map", [](const std::map<std::string, std::string> &map) {$/;"	f	function:TEST_SUBMODULE	file:
__anon8ef0fcf80a02	src/pybind11/tests/test_stl.cpp	/^    m.def("cast_set", []() { return std::set<std::string>{"key1", "key2"}; });$/;"	f	function:TEST_SUBMODULE	file:
__anon8ef0fcf80b02	src/pybind11/tests/test_stl.cpp	/^    m.def("load_set", [](const std::set<std::string> &set) {$/;"	f	function:TEST_SUBMODULE	file:
__anon8ef0fcf80c02	src/pybind11/tests/test_stl.cpp	/^    m.def("cast_rv_vector", []() { return std::vector<RValueCaster>{2}; });$/;"	f	function:TEST_SUBMODULE	file:
__anon8ef0fcf80d02	src/pybind11/tests/test_stl.cpp	/^    m.def("cast_rv_array", []() { return std::array<RValueCaster, 3>(); });$/;"	f	function:TEST_SUBMODULE	file:
__anon8ef0fcf80e02	src/pybind11/tests/test_stl.cpp	/^    m.def("cast_rv_map", []() { return std::unordered_map<std::string, RValueCaster>{{"a", RValu/;"	f	function:TEST_SUBMODULE	file:
__anon8ef0fcf80f02	src/pybind11/tests/test_stl.cpp	/^    m.def("cast_rv_nested", []() {$/;"	f	function:TEST_SUBMODULE	file:
__anon8ef0fcf81002	src/pybind11/tests/test_stl.cpp	/^    m.def("cast_lv_vector", []() -> const decltype(lvv) & { return lvv; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:const decltype (lvv)&	file:
__anon8ef0fcf81102	src/pybind11/tests/test_stl.cpp	/^    m.def("cast_lv_array", []() -> const decltype(lva) & { return lva; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:const decltype (lva)&	file:
__anon8ef0fcf81202	src/pybind11/tests/test_stl.cpp	/^    m.def("cast_lv_map", []() -> const decltype(lvm) & { return lvm; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:const decltype (lvm)&	file:
__anon8ef0fcf81302	src/pybind11/tests/test_stl.cpp	/^    m.def("cast_lv_nested", []() -> const decltype(lvn) & { return lvn; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:const decltype (lvn)&	file:
__anon8ef0fcf81402	src/pybind11/tests/test_stl.cpp	/^    m.def("cast_unique_ptr_vector", []() {$/;"	f	function:TEST_SUBMODULE	file:
__anon8ef0fcf81502	src/pybind11/tests/test_stl.cpp	/^    m.def("double_or_zero", [](const opt_int& x) -> int {$/;"	f	function:TEST_SUBMODULE	typeref:typename:int	file:
__anon8ef0fcf81602	src/pybind11/tests/test_stl.cpp	/^    m.def("half_or_none", [](int x) -> opt_int {$/;"	f	function:TEST_SUBMODULE	typeref:typename:opt_int	file:
__anon8ef0fcf81702	src/pybind11/tests/test_stl.cpp	/^    m.def("test_nullopt", [](opt_int x) {$/;"	f	function:TEST_SUBMODULE	file:
__anon8ef0fcf81802	src/pybind11/tests/test_stl.cpp	/^    m.def("test_no_assign", [](const opt_no_assign &x) {$/;"	f	function:TEST_SUBMODULE	file:
__anon8ef0fcf81902	src/pybind11/tests/test_stl.cpp	/^    m.def("nodefer_none_optional", [](std::optional<int>) { return true; });$/;"	f	function:TEST_SUBMODULE	file:
__anon8ef0fcf81a02	src/pybind11/tests/test_stl.cpp	/^    m.def("nodefer_none_optional", [](py::none) { return false; });$/;"	f	function:TEST_SUBMODULE	file:
__anon8ef0fcf81b02	src/pybind11/tests/test_stl.cpp	/^    m.def("double_or_zero_exp", [](const exp_opt_int& x) -> int {$/;"	f	function:TEST_SUBMODULE	typeref:typename:int	file:
__anon8ef0fcf81c02	src/pybind11/tests/test_stl.cpp	/^    m.def("half_or_none_exp", [](int x) -> exp_opt_int {$/;"	f	function:TEST_SUBMODULE	typeref:typename:exp_opt_int	file:
__anon8ef0fcf81d02	src/pybind11/tests/test_stl.cpp	/^    m.def("test_nullopt_exp", [](exp_opt_int x) {$/;"	f	function:TEST_SUBMODULE	file:
__anon8ef0fcf81e02	src/pybind11/tests/test_stl.cpp	/^    m.def("test_no_assign_exp", [](const exp_opt_no_assign &x) {$/;"	f	function:TEST_SUBMODULE	file:
__anon8ef0fcf81f02	src/pybind11/tests/test_stl.cpp	/^    m.def("load_variant", [](std::variant<int, std::string, double, std::nullptr_t> v) {$/;"	f	function:TEST_SUBMODULE	file:
__anon8ef0fcf82002	src/pybind11/tests/test_stl.cpp	/^    m.def("load_variant_2pass", [](std::variant<double, int> v) {$/;"	f	function:TEST_SUBMODULE	file:
__anon8ef0fcf82102	src/pybind11/tests/test_stl.cpp	/^    m.def("cast_variant", []() {$/;"	f	function:TEST_SUBMODULE	file:
__anon8ef0fcf82202	src/pybind11/tests/test_stl.cpp	/^    m.def("tpl_ctor_vector", [](std::vector<TplCtorClass> &) {});$/;"	f	function:TEST_SUBMODULE	file:
__anon8ef0fcf82302	src/pybind11/tests/test_stl.cpp	/^    m.def("tpl_ctor_map", [](std::unordered_map<TplCtorClass, TplCtorClass> &) {});$/;"	f	function:TEST_SUBMODULE	file:
__anon8ef0fcf82402	src/pybind11/tests/test_stl.cpp	/^    m.def("tpl_ctor_set", [](std::unordered_set<TplCtorClass> &) {});$/;"	f	function:TEST_SUBMODULE	file:
__anon8ef0fcf82502	src/pybind11/tests/test_stl.cpp	/^    m.def("tpl_constr_optional", [](std::optional<TplCtorClass> &) {});$/;"	f	function:TEST_SUBMODULE	file:
__anon8ef0fcf82602	src/pybind11/tests/test_stl.cpp	/^    m.def("tpl_constr_optional", [](std::experimental::optional<TplCtorClass> &) {});$/;"	f	function:TEST_SUBMODULE	file:
__anon8ef0fcf82702	src/pybind11/tests/test_stl.cpp	/^    m.def("return_vec_of_reference_wrapper", [](std::reference_wrapper<UserType> p4) {$/;"	f	function:TEST_SUBMODULE	file:
__anon8ef0fcf82802	src/pybind11/tests/test_stl.cpp	/^    m.def("stl_pass_by_pointer", [](std::vector<int>* v) { return *v; }, "v"_a=nullptr);$/;"	f	function:TEST_SUBMODULE	file:
__anon943d96910102	src/pybind11/tests/test_methods_and_attributes.cpp	/^test_initializer methods_and_attributes([](py::module &m) {$/;"	f	file:
__anon943d96910202	src/pybind11/tests/test_methods_and_attributes.cpp	/^        .def_static("add_mixed_overloads1", []() {$/;"	f	function:__anon943d96910102	file:
__anon943d96910302	src/pybind11/tests/test_methods_and_attributes.cpp	/^        .def_static("add_mixed_overloads2", []() {$/;"	f	function:__anon943d96910102	file:
__anon943d96910402	src/pybind11/tests/test_methods_and_attributes.cpp	/^                                      [](py::object) { return TestProperties::static_get(); })$/;"	f	function:__anon943d96910102	file:
__anon943d96910502	src/pybind11/tests/test_methods_and_attributes.cpp	/^                             [](py::object) { return TestProperties::static_get(); },$/;"	f	function:__anon943d96910102	file:
__anon943d96910602	src/pybind11/tests/test_methods_and_attributes.cpp	/^                             [](py::object, int v) { TestProperties::static_set(v); })$/;"	f	function:__anon943d96910102	file:
__anon943d96910702	src/pybind11/tests/test_methods_and_attributes.cpp	/^                             [](py::object cls) { return cls; },$/;"	f	function:__anon943d96910102	file:
__anon943d96910802	src/pybind11/tests/test_methods_and_attributes.cpp	/^                             [](py::object cls, py::function f) { f(cls); });$/;"	f	function:__anon943d96910102	file:
__anon943d96910902	src/pybind11/tests/test_methods_and_attributes.cpp	/^    auto static_get1 = [](py::object) -> const SimpleValue & { return TestPropRVP::sv1; };$/;"	f	function:__anon943d96910102	typeref:typename:const SimpleValue &	file:
__anon943d96910a02	src/pybind11/tests/test_methods_and_attributes.cpp	/^    auto static_get2 = [](py::object) -> const SimpleValue & { return TestPropRVP::sv2; };$/;"	f	function:__anon943d96910102	typeref:typename:const SimpleValue &	file:
__anon943d96910b02	src/pybind11/tests/test_methods_and_attributes.cpp	/^    auto static_set1 = [](py::object, int v) { TestPropRVP::sv1.value = v; };$/;"	f	function:__anon943d96910102	file:
__anon943d96910c02	src/pybind11/tests/test_methods_and_attributes.cpp	/^    auto static_set2 = [](py::object, int v) { TestPropRVP::sv2.value = v; };$/;"	f	function:__anon943d96910102	file:
__anon943d96910d02	src/pybind11/tests/test_methods_and_attributes.cpp	/^        .def_property_readonly_static("static_rvalue", [](py::object) { return SimpleValue(); })/;"	f	function:__anon943d96910102	file:
__anon943d96910e02	src/pybind11/tests/test_methods_and_attributes.cpp	/^        .def_property_readonly_static("readonly", [](py::object) { return 1; });$/;"	f	function:__anon943d96910102	file:
__anon943d96910f02	src/pybind11/tests/test_methods_and_attributes.cpp	/^    m.def("arg_inspect_func", [](ArgInspector2 a, ArgInspector1 b, ArgAlwaysConverts) { return a/;"	f	function:__anon943d96910102	file:
__anon943d96911002	src/pybind11/tests/test_methods_and_attributes.cpp	/^    m.def("floats_preferred", [](double f) { return 0.5 * f; }, py::arg("f"));$/;"	f	function:__anon943d96910102	file:
__anon943d96911102	src/pybind11/tests/test_methods_and_attributes.cpp	/^    m.def("floats_only", [](double f) { return 0.5 * f; }, py::arg("f").noconvert());$/;"	f	function:__anon943d96910102	file:
__anon943d96911202	src/pybind11/tests/test_methods_and_attributes.cpp	/^    m.def("ints_preferred", [](int i) { return i \/ 2; }, py::arg("i"));$/;"	f	function:__anon943d96910102	file:
__anon943d96911302	src/pybind11/tests/test_methods_and_attributes.cpp	/^    m.def("ints_only", [](int i) { return i \/ 2; }, py::arg("i").noconvert());$/;"	f	function:__anon943d96910102	file:
__anon943d96911402	src/pybind11/tests/test_methods_and_attributes.cpp	/^    m.def("bad_arg_def_named", []{$/;"	f	function:__anon943d96910102	file:
__anon943d96911502	src/pybind11/tests/test_methods_and_attributes.cpp	/^        m.def("should_fail", [](int, NotRegistered) {}, py::arg(), py::arg("a") = NotRegistered(/;"	f	function:__anon943d96910102::__anon943d96911402	file:
__anon943d96911602	src/pybind11/tests/test_methods_and_attributes.cpp	/^    m.def("bad_arg_def_unnamed", []{$/;"	f	function:__anon943d96910102	file:
__anon943d96911702	src/pybind11/tests/test_methods_and_attributes.cpp	/^        m.def("should_fail", [](int, NotRegistered) {}, py::arg(), py::arg() = NotRegistered());$/;"	f	function:__anon943d96910102::__anon943d96911602	file:
__anon943d96911802	src/pybind11/tests/test_methods_and_attributes.cpp	/^        .def("__str__", [](const StrIssue &si) {$/;"	f	function:__anon943d96910102	file:
__anon943d96911902	src/pybind11/tests/test_methods_and_attributes.cpp	/^    m.def("custom_caster_no_destroy", []() { static auto *dt = new DestructionTester(); return d/;"	f	function:__anon943d96910102	file:
__anon943d96911a02	src/pybind11/tests/test_methods_and_attributes.cpp	/^    m.def("custom_caster_destroy", []() { return new DestructionTester(); },$/;"	f	function:__anon943d96910102	file:
__anon943d96911b02	src/pybind11/tests/test_methods_and_attributes.cpp	/^    m.def("custom_caster_destroy_const", []() -> const DestructionTester * { return new Destruct/;"	f	function:__anon943d96910102	typeref:typename:const DestructionTester *	file:
__anon9558b93c0102	src/pybind11/tests/test_numpy_array.cpp	/^test_initializer numpy_array([](py::module &m) {$/;"	f	file:
__anon9558b93c0202	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("ndim", [](const arr& a) { return a.ndim(); });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c0302	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("shape", [](const arr& a) { return arr(a.ndim(), a.shape()); });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c0402	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("shape", [](const arr& a, ssize_t dim) { return a.shape(dim); });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c0502	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("strides", [](const arr& a) { return arr(a.ndim(), a.strides()); });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c0602	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("strides", [](const arr& a, ssize_t dim) { return a.strides(dim); });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c0702	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("writeable", [](const arr& a) { return a.writeable(); });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c0802	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("size", [](const arr& a) { return a.size(); });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c0902	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("itemsize", [](const arr& a) { return a.itemsize(); });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c0a02	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("nbytes", [](const arr& a) { return a.nbytes(); });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c0b02	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("owndata", [](const arr& a) { return a.owndata(); });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c0c02	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("make_f_array", [] {$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c0d02	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("make_c_array", [] {$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c0e02	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("wrap", [](py::array a) {$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c0f02	src/pybind11/tests/test_numpy_array.cpp	/^        .def("numpy_view", [](py::object &obj) {$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c1002	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("function_taking_uint64", [](uint64_t) { });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c1102	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("isinstance_untyped", [](py::object yes, py::object no) {$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c1202	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("isinstance_typed", [](py::object o) {$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c1302	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("default_constructors", []() {$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c1402	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("converting_constructors", [](py::object o) {$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c1502	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("overloaded", [](py::array_t<double>) { return "double"; });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c1602	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("overloaded", [](py::array_t<float>) { return "float"; });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c1702	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("overloaded", [](py::array_t<int>) { return "int"; });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c1802	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("overloaded", [](py::array_t<unsigned short>) { return "unsigned short"; });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c1902	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("overloaded", [](py::array_t<long long>) { return "long long"; });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c1a02	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("overloaded", [](py::array_t<std::complex<double>>) { return "double complex"; });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c1b02	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("overloaded", [](py::array_t<std::complex<float>>) { return "float complex"; });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c1c02	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("overloaded2", [](py::array_t<std::complex<double>>) { return "double complex"; });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c1d02	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("overloaded2", [](py::array_t<double>) { return "double"; });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c1e02	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("overloaded2", [](py::array_t<std::complex<float>>) { return "float complex"; });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c1f02	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("overloaded2", [](py::array_t<float>) { return "float"; });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c2002	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("overloaded3", [](py::array_t<int>) { return "int"; }, py::arg().noconvert());$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c2102	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("overloaded3", [](py::array_t<double>) { return "double"; }, py::arg().noconvert());$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c2202	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("overloaded4", [](py::array_t<long long, 0>) { return "long long"; });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c2302	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("overloaded4", [](py::array_t<double, 0>) { return "double"; });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c2402	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("overloaded5", [](py::array_t<unsigned int>) { return "unsigned int"; });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c2502	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("overloaded5", [](py::array_t<double>) { return "double"; });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c2602	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("issue685", [](std::string) { return "string"; });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c2702	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("issue685", [](py::array) { return "array"; });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c2802	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("issue685", [](py::object) { return "other"; });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c2902	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("proxy_add2", [](py::array_t<double> a, double v) {$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c2a02	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("proxy_init3", [](double start) {$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c2b02	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("proxy_init3F", [](double start) {$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c2c02	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("proxy_squared_L2_norm", [](py::array_t<double> a) {$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c2d02	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("proxy_auxiliaries2", [](py::array_t<double> a) {$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c2e02	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("proxy_add2_dyn", [](py::array_t<double> a, double v) {$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c2f02	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("proxy_init3_dyn", [](double start) {$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c3002	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("proxy_auxiliaries2_dyn", [](py::array_t<double> a) {$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c3102	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("array_auxiliaries2", [](py::array_t<double> a) {$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c3202	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("array_fail_test", []() { return py::array(py::object()); });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c3302	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("array_t_fail_test", []() { return py::array_t<double>(py::object()); });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c3402	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("array_fail_test_negative_size", []() { int c = 0; return py::array(-1, &c); });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c3502	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("array_initializer_list", []() { return py::array_t<float>(1); }); \/\/ { 1 } also wo/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c3602	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("array_initializer_list", []() { return py::array_t<float>({ 1, 2 }); });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c3702	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("array_initializer_list", []() { return py::array_t<float>({ 1, 2, 3 }); });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c3802	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("array_initializer_list", []() { return py::array_t<float>({ 1, 2, 3, 4 }); });$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c3902	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("array_reshape2", [](py::array_t<double> a) {$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c3a02	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("array_resize3", [](py::array_t<double> a, size_t N, bool refcheck) {$/;"	f	function:__anon9558b93c0102	file:
__anon9558b93c3b02	src/pybind11/tests/test_numpy_array.cpp	/^    sm.def("create_and_resize", [](size_t N) {$/;"	f	function:__anon9558b93c0102	file:
__anon973fe2a30102	src/pybind11/tests/test_pytypes.cpp	/^    m.def("get_list", []() {$/;"	f	function:TEST_SUBMODULE	file:
__anon973fe2a30202	src/pybind11/tests/test_pytypes.cpp	/^    m.def("print_list", [](py::list list) {$/;"	f	function:TEST_SUBMODULE	file:
__anon973fe2a30302	src/pybind11/tests/test_pytypes.cpp	/^    m.def("get_set", []() {$/;"	f	function:TEST_SUBMODULE	file:
__anon973fe2a30402	src/pybind11/tests/test_pytypes.cpp	/^    m.def("print_set", [](py::set set) {$/;"	f	function:TEST_SUBMODULE	file:
__anon973fe2a30502	src/pybind11/tests/test_pytypes.cpp	/^    m.def("get_dict", []() { return py::dict("key"_a="value"); });$/;"	f	function:TEST_SUBMODULE	file:
__anon973fe2a30602	src/pybind11/tests/test_pytypes.cpp	/^    m.def("print_dict", [](py::dict dict) {$/;"	f	function:TEST_SUBMODULE	file:
__anon973fe2a30702	src/pybind11/tests/test_pytypes.cpp	/^    m.def("dict_keyword_constructor", []() {$/;"	f	function:TEST_SUBMODULE	file:
__anon973fe2a30802	src/pybind11/tests/test_pytypes.cpp	/^    m.def("str_from_string", []() { return py::str(std::string("baz")); });$/;"	f	function:TEST_SUBMODULE	file:
__anon973fe2a30902	src/pybind11/tests/test_pytypes.cpp	/^    m.def("str_from_bytes", []() { return py::str(py::bytes("boo", 3)); });$/;"	f	function:TEST_SUBMODULE	file:
__anon973fe2a30a02	src/pybind11/tests/test_pytypes.cpp	/^    m.def("str_from_object", [](const py::object& obj) { return py::str(obj); });$/;"	f	function:TEST_SUBMODULE	file:
__anon973fe2a30b02	src/pybind11/tests/test_pytypes.cpp	/^    m.def("repr_from_object", [](const py::object& obj) { return py::repr(obj); });$/;"	f	function:TEST_SUBMODULE	file:
__anon973fe2a30c02	src/pybind11/tests/test_pytypes.cpp	/^    m.def("str_format", []() {$/;"	f	function:TEST_SUBMODULE	file:
__anon973fe2a30d02	src/pybind11/tests/test_pytypes.cpp	/^    m.def("bytes_from_string", []() { return py::bytes(std::string("foo")); });$/;"	f	function:TEST_SUBMODULE	file:
__anon973fe2a30e02	src/pybind11/tests/test_pytypes.cpp	/^    m.def("bytes_from_str", []() { return py::bytes(py::str("bar", 3)); });$/;"	f	function:TEST_SUBMODULE	file:
__anon973fe2a30f02	src/pybind11/tests/test_pytypes.cpp	/^    m.def("return_capsule_with_destructor", []() {$/;"	f	function:TEST_SUBMODULE	file:
__anon973fe2a31002	src/pybind11/tests/test_pytypes.cpp	/^        return py::capsule([]() {$/;"	f	function:TEST_SUBMODULE::__anon973fe2a30f02	file:
__anon973fe2a31102	src/pybind11/tests/test_pytypes.cpp	/^    m.def("return_capsule_with_destructor_2", []() {$/;"	f	function:TEST_SUBMODULE	file:
__anon973fe2a31202	src/pybind11/tests/test_pytypes.cpp	/^        return py::capsule((void *) 1234, [](void *ptr) {$/;"	f	function:TEST_SUBMODULE::__anon973fe2a31102	file:
__anon973fe2a31302	src/pybind11/tests/test_pytypes.cpp	/^    m.def("return_capsule_with_name_and_destructor", []() {$/;"	f	function:TEST_SUBMODULE	file:
__anon973fe2a31402	src/pybind11/tests/test_pytypes.cpp	/^        auto capsule = py::capsule((void *) 1234, "pointer type description", [](PyObject *ptr) /;"	f	function:TEST_SUBMODULE::__anon973fe2a31302	file:
__anon973fe2a31502	src/pybind11/tests/test_pytypes.cpp	/^    m.def("accessor_api", [](py::object o) {$/;"	f	function:TEST_SUBMODULE	file:
__anon973fe2a31602	src/pybind11/tests/test_pytypes.cpp	/^    m.def("tuple_accessor", [](py::tuple existing_t) {$/;"	f	function:TEST_SUBMODULE	file:
__anon973fe2a31702	src/pybind11/tests/test_pytypes.cpp	/^    m.def("accessor_assignment", []() {$/;"	f	function:TEST_SUBMODULE	file:
__anon973fe2a31802	src/pybind11/tests/test_pytypes.cpp	/^    m.def("default_constructors", []() {$/;"	f	function:TEST_SUBMODULE	file:
__anon973fe2a31902	src/pybind11/tests/test_pytypes.cpp	/^    m.def("converting_constructors", [](py::dict d) {$/;"	f	function:TEST_SUBMODULE	file:
__anon973fe2a31a02	src/pybind11/tests/test_pytypes.cpp	/^    m.def("cast_functions", [](py::dict d) {$/;"	f	function:TEST_SUBMODULE	file:
__anon973fe2a31b02	src/pybind11/tests/test_pytypes.cpp	/^    m.def("get_implicit_casting", []() {$/;"	f	function:TEST_SUBMODULE	file:
__anon973fe2a31c02	src/pybind11/tests/test_pytypes.cpp	/^    m.def("print_function", []() {$/;"	f	function:TEST_SUBMODULE	file:
__anon973fe2a31d02	src/pybind11/tests/test_pytypes.cpp	/^    m.def("print_failure", []() { py::print(42, UnregisteredType()); });$/;"	f	function:TEST_SUBMODULE	file:
__anonb0714a440102	src/pybind11/tests/test_opaque_types.cpp	/^test_initializer opaque_types([](py::module &m) {$/;"	f	file:
__anonb0714a440202	src/pybind11/tests/test_opaque_types.cpp	/^        .def("__len__", [](const StringList &v) { return v.size(); })$/;"	f	function:__anonb0714a440102	file:
__anonb0714a440302	src/pybind11/tests/test_opaque_types.cpp	/^        .def("__iter__", [](StringList &v) {$/;"	f	function:__anonb0714a440102	file:
__anonb0714a440402	src/pybind11/tests/test_opaque_types.cpp	/^    m.def("print_opaque_list", [](const StringList &l) {$/;"	f	function:__anonb0714a440102	file:
__anonb0714a440502	src/pybind11/tests/test_opaque_types.cpp	/^    m.def("return_void_ptr", []() { return (void *) 0x1234; });$/;"	f	function:__anonb0714a440102	file:
__anonb0714a440602	src/pybind11/tests/test_opaque_types.cpp	/^    m.def("get_void_ptr_value", [](void *ptr) { return reinterpret_cast<std::intptr_t>(ptr); });$/;"	f	function:__anonb0714a440102	file:
__anonb0714a440702	src/pybind11/tests/test_opaque_types.cpp	/^    m.def("return_null_str", []() { return (char *) nullptr; });$/;"	f	function:__anonb0714a440102	file:
__anonb0714a440802	src/pybind11/tests/test_opaque_types.cpp	/^    m.def("get_null_str_value", [](char *ptr) { return reinterpret_cast<std::intptr_t>(ptr); });$/;"	f	function:__anonb0714a440102	file:
__anonb0714a440902	src/pybind11/tests/test_opaque_types.cpp	/^    m.def("return_unique_ptr", []() -> std::unique_ptr<StringList> {$/;"	f	function:__anonb0714a440102	typeref:typename:std::unique_ptr<StringList>	file:
__anonb208c0fe0102	src/pybind11/tests/test_modules.cpp	/^test_initializer modules([](py::module &m) {$/;"	f	file:
__anonb208c0fe0202	src/pybind11/tests/test_modules.cpp	/^    m.def("duplicate_registration", []() {$/;"	f	function:__anonb208c0fe0102	file:
__anonb208c0fe0302	src/pybind11/tests/test_modules.cpp	/^        dm.def("dupe1_factory", []() { return Dupe1(); });$/;"	f	function:__anonb208c0fe0102::__anonb208c0fe0202	file:
__anonb208c0fe0402	src/pybind11/tests/test_modules.cpp	/^            dm.def("Dupe1", []() { return Dupe1(); });$/;"	f	function:__anonb208c0fe0102::__anonb208c0fe0202	file:
__anonb208c0fe0502	src/pybind11/tests/test_modules.cpp	/^            dm.def("DupeException", []() { return 30; });$/;"	f	function:__anonb208c0fe0102::__anonb208c0fe0202	file:
__anonb3afa71a0102	src/pybind11/tests/test_multiple_inheritance.cpp	/^test_initializer multiple_inheritance([](py::module &m) {$/;"	f	file:
__anonb3afa71a0202	src/pybind11/tests/test_multiple_inheritance.cpp	/^test_initializer multiple_inheritance_nonexplicit([](py::module &m) {$/;"	f	file:
__anonb3afa71a0302	src/pybind11/tests/test_multiple_inheritance.cpp	/^    m.def("bar_base2a", [](Base2a *b) { return b->bar(); });$/;"	f	function:__anonb3afa71a0202	file:
__anonb3afa71a0402	src/pybind11/tests/test_multiple_inheritance.cpp	/^    m.def("bar_base2a_sharedptr", [](std::shared_ptr<Base2a> b) { return b->bar(); });$/;"	f	function:__anonb3afa71a0202	file:
__anonb3afa71a0502	src/pybind11/tests/test_multiple_inheritance.cpp	/^test_initializer multiple_inheritance_casting([](py::module &m) {$/;"	f	file:
__anonb3afa71a0602	src/pybind11/tests/test_multiple_inheritance.cpp	/^    m.def("i801b1_c", [](I801C *c) { return static_cast<I801B1 *>(c); });$/;"	f	function:__anonb3afa71a0502	file:
__anonb3afa71a0702	src/pybind11/tests/test_multiple_inheritance.cpp	/^    m.def("i801b2_c", [](I801C *c) { return static_cast<I801B2 *>(c); });$/;"	f	function:__anonb3afa71a0502	file:
__anonb3afa71a0802	src/pybind11/tests/test_multiple_inheritance.cpp	/^    m.def("i801b1_d", [](I801D *d) { return static_cast<I801B1 *>(d); });$/;"	f	function:__anonb3afa71a0502	file:
__anonb3afa71a0902	src/pybind11/tests/test_multiple_inheritance.cpp	/^    m.def("i801b2_d", [](I801D *d) { return static_cast<I801B2 *>(d); });$/;"	f	function:__anonb3afa71a0502	file:
__anonb3afa71a0a02	src/pybind11/tests/test_multiple_inheritance.cpp	/^    m.def("i801c_b1", []() -> I801B1 * { return new I801C(); });$/;"	f	function:__anonb3afa71a0502	typeref:typename:I801B1 *	file:
__anonb3afa71a0b02	src/pybind11/tests/test_multiple_inheritance.cpp	/^    m.def("i801c_b2", []() -> I801B2 * { return new I801C(); });$/;"	f	function:__anonb3afa71a0502	typeref:typename:I801B2 *	file:
__anonb3afa71a0c02	src/pybind11/tests/test_multiple_inheritance.cpp	/^    m.def("i801d_b1", []() -> I801B1 * { return new I801D(); });$/;"	f	function:__anonb3afa71a0502	typeref:typename:I801B1 *	file:
__anonb3afa71a0d02	src/pybind11/tests/test_multiple_inheritance.cpp	/^    m.def("i801d_b2", []() -> I801B2 * { return new I801D(); });$/;"	f	function:__anonb3afa71a0502	typeref:typename:I801B2 *	file:
__anonb3afa71a0e02	src/pybind11/tests/test_multiple_inheritance.cpp	/^    m.def("i801e_c", []() -> I801C * { return new I801E(); });$/;"	f	function:__anonb3afa71a0502	typeref:typename:I801C *	file:
__anonb3afa71a0f02	src/pybind11/tests/test_multiple_inheritance.cpp	/^    m.def("i801e_b2", []() -> I801B2 * { return new I801E(); });$/;"	f	function:__anonb3afa71a0502	typeref:typename:I801B2 *	file:
__anonb3afa71a1002	src/pybind11/tests/test_multiple_inheritance.cpp	/^test_initializer mi_static_properties([](py::module &pm) {$/;"	f	file:
__anonb87ee99b0102	src/pybind11/tests/test_class.cpp	/^    m.def("pet_name_species", [](const Pet &pet) { return pet.name() + " is a " + pet.species();/;"	f	function:TEST_SUBMODULE	file:
__anonb87ee99b0202	src/pybind11/tests/test_class.cpp	/^    m.def("dog_bark", [](const Dog &dog) { return dog.bark(); });$/;"	f	function:TEST_SUBMODULE	file:
__anonb87ee99b0302	src/pybind11/tests/test_class.cpp	/^    m.def("return_class_1", []() -> BaseClass* { return new DerivedClass1(); });$/;"	f	function:TEST_SUBMODULE	typeref:typename:BaseClass *	file:
__anonb87ee99b0402	src/pybind11/tests/test_class.cpp	/^    m.def("return_class_2", []() -> BaseClass* { return new DerivedClass2(); });$/;"	f	function:TEST_SUBMODULE	typeref:typename:BaseClass *	file:
__anonb87ee99b0502	src/pybind11/tests/test_class.cpp	/^    m.def("return_class_n", [](int n) -> BaseClass* {$/;"	f	function:TEST_SUBMODULE	typeref:typename:BaseClass *	file:
__anonb87ee99b0602	src/pybind11/tests/test_class.cpp	/^    m.def("return_none", []() -> BaseClass* { return nullptr; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:BaseClass *	file:
__anonb87ee99b0702	src/pybind11/tests/test_class.cpp	/^    m.def("check_instances", [](py::list l) {$/;"	f	function:TEST_SUBMODULE	file:
__anonb87ee99b0802	src/pybind11/tests/test_class.cpp	/^    m.def("mismatched_holder_1", []() {$/;"	f	function:TEST_SUBMODULE	file:
__anonb87ee99b0902	src/pybind11/tests/test_class.cpp	/^    m.def("mismatched_holder_2", []() {$/;"	f	function:TEST_SUBMODULE	file:
__anonb87ee99b0a02	src/pybind11/tests/test_class.cpp	/^    m.def("implicitly_convert_argument", [](const ConvertibleFromUserType &r) { return r.i; });$/;"	f	function:TEST_SUBMODULE	file:
__anonb87ee99b0b02	src/pybind11/tests/test_class.cpp	/^    m.def("implicitly_convert_variable", [](py::object o) {$/;"	f	function:TEST_SUBMODULE	file:
__anonb87ee99b0c02	src/pybind11/tests/test_class.cpp	/^    m.add_object("implicitly_convert_variable_fail", [&] {$/;"	f	function:TEST_SUBMODULE	file:
__anonb87ee99b0d02	src/pybind11/tests/test_class.cpp	/^        auto f = [](PyObject *, PyObject *args) -> PyObject * {$/;"	f	function:TEST_SUBMODULE::__anonb87ee99b0c02	typeref:typename:PyObject *	file:
__anonc556634c0108	src/pybind11/include/pybind11/numpy.h	/^    typedef struct {$/;"	s	struct:npy_api
__anonc556634c0202	src/pybind11/include/pybind11/numpy.h	/^                  [](const field_descr& a, const field_descr& b) {$/;"	f	function:dtype::strip_padding	file:
__anonc556634c0303	src/pybind11/include/pybind11/numpy.h	/^    enum {$/;"	g	class:array
__anonc556634c0402	src/pybind11/include/pybind11/numpy.h	/^        [](const field_descriptor &a, const field_descriptor &b) { return a.offset < b.offset; }/;"	f	function:register_structured_dtype	file:
__anonc556634c0502	src/pybind11/include/pybind11/numpy.h	/^    ndim = std::accumulate(buffers.begin(), buffers.end(), ssize_t(0), [](ssize_t res, const buf/;"	f	function:broadcast	file:
__anoncceeb99a0102	src/pybind11/tests/test_enum.cpp	/^test_initializer enums([](py::module &m) {$/;"	f	file:
__anoncceeb99a0202	src/pybind11/tests/test_enum.cpp	/^    m.def("test_enum_to_int", [](int) { });$/;"	f	function:__anoncceeb99a0102	file:
__anoncceeb99a0302	src/pybind11/tests/test_enum.cpp	/^    m.def("test_enum_to_uint", [](uint32_t) { });$/;"	f	function:__anoncceeb99a0102	file:
__anoncceeb99a0402	src/pybind11/tests/test_enum.cpp	/^    m.def("test_enum_to_long_long", [](long long) { });$/;"	f	function:__anoncceeb99a0102	file:
__anonde770be40102	src/pybind11/tests/test_virtual_functions.cpp	/^    m.def("call_f", [](A *a) { a->f(); });$/;"	f	function:TEST_SUBMODULE	file:
__anonde770be40202	src/pybind11/tests/test_virtual_functions.cpp	/^    m.def("call_f", [](A2 *a2) { a2->f(); });$/;"	f	function:TEST_SUBMODULE	file:
__anonde770be40302	src/pybind11/tests/test_virtual_functions.cpp	/^    m.def("dispatch_issue_go", [](const Base * b) { return b->dispatch(); });$/;"	f	function:TEST_SUBMODULE	file:
__anone95a34240102	src/pybind11/tests/test_embed/test_interpreter.cpp	/^    m.def("add", [](int i, int j) { return i + j; });$/;"	f	function:PYBIND11_EMBEDDED_MODULE	file:
__anone95a34240202	src/pybind11/tests/test_embed/test_interpreter.cpp	/^        py::capsule(&ran, [](void *ran) { py::detail::get_internals(); *static_cast<bool *>(ran)/;"	f	file:
__anone95a34240302	src/pybind11/tests/test_embed/test_interpreter.cpp	/^            threads.emplace_back([&]() {$/;"	f	file:
__anonf4198efb0102	src/pybind11/include/pybind11/eigen.h	/^    capsule base(src, [](void *o) { delete static_cast<Type *>(o); });$/;"	f	function:eigen_encapsulate	file:
__anonf5e6ba460102	src/pybind11/include/pybind11/functional.h	/^        value = [func](Args... args) -> Return {$/;"	f	function:type_caster::load	typeref:typename:Return	file:
__anonf69b6a870102	src/pybind11/tests/test_exceptions.cpp	/^test_initializer custom_exceptions([](py::module &m) {$/;"	f	file:
__anonf69b6a870202	src/pybind11/tests/test_exceptions.cpp	/^    m.def("throw_std_exception", []() {$/;"	f	function:__anonf69b6a870102	file:
__anonf69b6a870302	src/pybind11/tests/test_exceptions.cpp	/^    py::register_exception_translator([](std::exception_ptr p) {$/;"	f	function:__anonf69b6a870102	file:
__anonf69b6a870402	src/pybind11/tests/test_exceptions.cpp	/^    py::register_exception_translator([](std::exception_ptr p) {$/;"	f	function:__anonf69b6a870102	file:
__anonf69b6a870502	src/pybind11/tests/test_exceptions.cpp	/^    py::register_exception_translator([](std::exception_ptr p) {$/;"	f	function:__anonf69b6a870102	file:
__anonf69b6a870602	src/pybind11/tests/test_exceptions.cpp	/^    m.def("throw_already_set", [](bool err) {$/;"	f	function:__anonf69b6a870102	file:
__anonf69b6a870702	src/pybind11/tests/test_exceptions.cpp	/^    m.def("python_call_in_destructor", [](py::dict d) {$/;"	f	function:__anonf69b6a870102	file:
__author__	tools/px_generate_uorb_topic_files.py	/^__author__ = "Sergey Belash, Thomas Gubler, Beat Kueng"$/;"	v
__bytes__	src/pybind11/tools/clang/cindex.py	/^    def __bytes__(self):$/;"	m	class:File
__call__	src/pybind11/tests/conftest.py	/^    def __call__(self, thing):$/;"	m	class:SanitizedString
__contains__	src/pybind11/tests/conftest.py	/^    def __contains__(self, item):$/;"	m	class:Capture
__contains__	src/pybind11/tools/clang/cindex.py	/^    def __contains__(self, other):$/;"	m	class:SourceRange
__copyright__	tools/px_generate_uorb_topic_files.py	/^__copyright__ = "Copyright (C) 2013-2016 PX4 Development Team."$/;"	v
__del__	serial/python/ftdi_uart.py	/^    def __del__(self):$/;"	m	class:FtdiUartThread
__del__	serial/python/parse.py	/^    def __del__(self):$/;"	m	class:Parse
__del__	src/pybind11/tools/clang/cindex.py	/^    def __del__(self):$/;"	m	class:CodeCompletionResults
__del__	src/pybind11/tools/clang/cindex.py	/^    def __del__(self):$/;"	m	class:CompilationDatabase
__del__	src/pybind11/tools/clang/cindex.py	/^    def __del__(self):$/;"	m	class:CompileCommands
__del__	src/pybind11/tools/clang/cindex.py	/^    def __del__(self):$/;"	m	class:Diagnostic
__del__	src/pybind11/tools/clang/cindex.py	/^    def __del__(self):$/;"	m	class:Index
__del__	src/pybind11/tools/clang/cindex.py	/^    def __del__(self):$/;"	m	class:TokenGroup
__del__	src/pybind11/tools/clang/cindex.py	/^    def __del__(self):$/;"	m	class:TranslationUnit
__del__	src/pybind11/tools/clang/cindex.py	/^    def __del__(self):$/;"	m	class:_CXString
__email__	tools/px_generate_uorb_topic_files.py	/^__email__ = "thomasgubler@gmail.com"$/;"	v
__enter__	src/pybind11/tests/conftest.py	/^    def __enter__(self):$/;"	m	class:Capture
__eq__	src/pybind11/tests/conftest.py	/^    def __eq__(self, other):$/;"	m	class:Capture
__eq__	src/pybind11/tests/conftest.py	/^    def __eq__(self, other):$/;"	m	class:Output
__eq__	src/pybind11/tests/conftest.py	/^    def __eq__(self, other):$/;"	m	class:SanitizedString
__eq__	src/pybind11/tests/conftest.py	/^    def __eq__(self, other):$/;"	m	class:Unordered
__eq__	src/pybind11/tools/clang/cindex.py	/^    def __eq__(self, other):$/;"	m	class:Cursor
__eq__	src/pybind11/tools/clang/cindex.py	/^    def __eq__(self, other):$/;"	m	class:SourceLocation
__eq__	src/pybind11/tools/clang/cindex.py	/^    def __eq__(self, other):$/;"	m	class:SourceRange
__eq__	src/pybind11/tools/clang/cindex.py	/^    def __eq__(self, other):$/;"	m	class:Type
__eq__	tools/genmsg/src/genmsg/msgs.py	/^    def __eq__(self, other):$/;"	m	class:Constant
__eq__	tools/genmsg/src/genmsg/msgs.py	/^    def __eq__(self, other):$/;"	m	class:Field
__eq__	tools/genmsg/src/genmsg/msgs.py	/^    def __eq__(self, other):$/;"	m	class:MsgSpec
__eq__	tools/genmsg/src/genmsg/srvs.py	/^    def __eq__(self, other):$/;"	m	class:SrvSpec
__exit__	src/pybind11/tests/conftest.py	/^    def __exit__(self, *_):$/;"	m	class:Capture
__get__	src/pybind11/tools/clang/cindex.py	/^    def __get__(self, instance, instance_type=None):$/;"	m	class:CachedProperty
__getitem__	src/pybind11/tools/clang/cindex.py	/^            def __getitem__(self, key):$/;"	m	class:CodeCompletionResults.diagnostics.DiagnosticsItr
__getitem__	src/pybind11/tools/clang/cindex.py	/^            def __getitem__(self, key):$/;"	m	class:Diagnostic.children.ChildDiagnosticsIterator
__getitem__	src/pybind11/tools/clang/cindex.py	/^            def __getitem__(self, key):$/;"	m	class:Diagnostic.fixits.FixItIterator
__getitem__	src/pybind11/tools/clang/cindex.py	/^            def __getitem__(self, key):$/;"	m	class:Diagnostic.ranges.RangeIterator
__getitem__	src/pybind11/tools/clang/cindex.py	/^            def __getitem__(self, key):$/;"	m	class:TranslationUnit.diagnostics.DiagIterator
__getitem__	src/pybind11/tools/clang/cindex.py	/^            def __getitem__(self, key):$/;"	m	class:Type.argument_types.ArgumentsIterator
__getitem__	src/pybind11/tools/clang/cindex.py	/^    def __getitem__(self, i):$/;"	m	class:CompileCommands
__getitem__	src/pybind11/tools/clang/cindex.py	/^    def __getitem__(self, key):$/;"	m	class:CCRStructure
__getitem__	src/pybind11/tools/clang/cindex.py	/^    def __getitem__(self, key):$/;"	m	class:CompletionString
__init__	serial/python/ftdi_uart.py	/^    def __init__(self, dev_type='elka', q=None):$/;"	m	class:FtdiUartThread
__init__	serial/python/gui.py	/^    def __init__(self):$/;"	m	class:MainWindow
__init__	serial/python/gui.py	/^    def __init__(self, plot):$/;"	m	class:PlotData
__init__	serial/python/parse.py	/^    def __init__(self, dev_type='elka', q=None):$/;"	m	class:Parse
__init__	serial/python/parse_vispy.py	/^    def __init__(self):$/;"	m	class:DataPlotter
__init__	src/pybind11/tests/conftest.py	/^    def __init__(self, capfd):$/;"	m	class:Capture
__init__	src/pybind11/tests/conftest.py	/^    def __init__(self, sanitizer):$/;"	m	class:SanitizedString
__init__	src/pybind11/tests/conftest.py	/^    def __init__(self, string):$/;"	m	class:Output
__init__	src/pybind11/tests/test_embed/test_interpreter.py	/^    def __init__(self, message):$/;"	m	class:DerivedWidget
__init__	src/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self):$/;"	m	class:test_multiple_inheritance_python_many_bases.MIMany117
__init__	src/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self):$/;"	m	class:test_multiple_inheritance_python_many_bases.MIMany14
__init__	src/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self):$/;"	m	class:test_multiple_inheritance_python_many_bases.MIMany19
__init__	src/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self):$/;"	m	class:test_multiple_inheritance_python_many_bases.MIMany58
__init__	src/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self):$/;"	m	class:test_multiple_inheritance_python_many_bases.MIMany916
__init__	src/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self, i):$/;"	m	class:test_multiple_inheritance_mix1.Base1
__init__	src/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self, i):$/;"	m	class:test_multiple_inheritance_mix2.Base2
__init__	src/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self, i):$/;"	m	class:test_multiple_inheritance_python.MI6
__init__	src/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self, i):$/;"	m	class:test_multiple_inheritance_python.MI7
__init__	src/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self, i):$/;"	m	class:test_multiple_inheritance_python.MI8
__init__	src/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self, i):$/;"	m	class:test_multiple_inheritance_python.MI8b
__init__	src/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_mix1.MITypePy
__init__	src/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_mix2.MITypePy
__init__	src/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_python.MI1
__init__	src/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_python.MI2
__init__	src/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_python.MI3
__init__	src/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_python.MI5
__init__	src/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_virtbase.MITypePy
__init__	src/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self, i, j, k):$/;"	m	class:test_multiple_inheritance_python.MI4
__init__	src/pybind11/tests/test_virtual_functions.py	/^        def __init__(self):$/;"	m	class:test_alias_delay_initialization1.B
__init__	src/pybind11/tests/test_virtual_functions.py	/^        def __init__(self):$/;"	m	class:test_alias_delay_initialization2.B2
__init__	src/pybind11/tests/test_virtual_functions.py	/^        def __init__(self, state):$/;"	m	class:test_override.ExtendedExampleVirt
__init__	src/pybind11/tests/test_virtual_functions.py	/^        def __init__(self, state):$/;"	m	class:test_override.ExtendedExampleVirt2
__init__	src/pybind11/tools/clang/cindex.py	/^            def __init__(self, ccr):$/;"	m	class:CodeCompletionResults.diagnostics.DiagnosticsItr
__init__	src/pybind11/tools/clang/cindex.py	/^            def __init__(self, diag):$/;"	m	class:Diagnostic.children.ChildDiagnosticsIterator
__init__	src/pybind11/tools/clang/cindex.py	/^            def __init__(self, diag):$/;"	m	class:Diagnostic.fixits.FixItIterator
__init__	src/pybind11/tools/clang/cindex.py	/^            def __init__(self, diag):$/;"	m	class:Diagnostic.ranges.RangeIterator
__init__	src/pybind11/tools/clang/cindex.py	/^            def __init__(self, parent):$/;"	m	class:Type.argument_types.ArgumentsIterator
__init__	src/pybind11/tools/clang/cindex.py	/^            def __init__(self, tu):$/;"	m	class:TranslationUnit.diagnostics.DiagIterator
__init__	src/pybind11/tools/clang/cindex.py	/^        def __init__(self, name):$/;"	m	class:CompletionChunk.Kind
__init__	src/pybind11/tools/clang/cindex.py	/^        def __init__(self, name):$/;"	m	class:CompletionString.Availability
__init__	src/pybind11/tools/clang/cindex.py	/^    def __init__(self, ccmds):$/;"	m	class:CompileCommands
__init__	src/pybind11/tools/clang/cindex.py	/^    def __init__(self, cmd, ccmds):$/;"	m	class:CompileCommand
__init__	src/pybind11/tools/clang/cindex.py	/^    def __init__(self, completionString, key):$/;"	m	class:CompletionChunk
__init__	src/pybind11/tools/clang/cindex.py	/^    def __init__(self, enumeration, message):$/;"	m	class:CompilationDatabaseError
__init__	src/pybind11/tools/clang/cindex.py	/^    def __init__(self, enumeration, message):$/;"	m	class:TranslationUnitSaveError
__init__	src/pybind11/tools/clang/cindex.py	/^    def __init__(self, message):$/;"	m	class:LibclangError
__init__	src/pybind11/tools/clang/cindex.py	/^    def __init__(self, obj):$/;"	m	class:ClangObject
__init__	src/pybind11/tools/clang/cindex.py	/^    def __init__(self, ptr):$/;"	m	class:CodeCompletionResults
__init__	src/pybind11/tools/clang/cindex.py	/^    def __init__(self, ptr):$/;"	m	class:Diagnostic
__init__	src/pybind11/tools/clang/cindex.py	/^    def __init__(self, ptr, index):$/;"	m	class:TranslationUnit
__init__	src/pybind11/tools/clang/cindex.py	/^    def __init__(self, range, value):$/;"	m	class:FixIt
__init__	src/pybind11/tools/clang/cindex.py	/^    def __init__(self, src, tgt, loc, depth):$/;"	m	class:FileInclusion
__init__	src/pybind11/tools/clang/cindex.py	/^    def __init__(self, tu, memory, count):$/;"	m	class:TokenGroup
__init__	src/pybind11/tools/clang/cindex.py	/^    def __init__(self, value):$/;"	m	class:BaseEnumeration
__init__	src/pybind11/tools/clang/cindex.py	/^    def __init__(self, value):$/;"	m	class:StorageClass
__init__	src/pybind11/tools/clang/cindex.py	/^    def __init__(self, value, name):$/;"	m	class:TokenKind
__init__	src/pybind11/tools/clang/cindex.py	/^    def __init__(self, wrapped):$/;"	m	class:CachedProperty
__init__	src/pybind11/tools/mkdoc.py	/^    def __init__(self, filename, parameters):$/;"	m	class:ExtractionThread
__init__	tools/genmsg/src/genmsg/msg_loader.py	/^    def __init__(self):$/;"	m	class:MsgContext
__init__	tools/genmsg/src/genmsg/msg_loader.py	/^    def __init__(self, message, base_type=None, package=None, search_path=None):$/;"	m	class:MsgNotFound
__init__	tools/genmsg/src/genmsg/msgs.py	/^    def __init__(self, name, type):$/;"	m	class:Field
__init__	tools/genmsg/src/genmsg/msgs.py	/^    def __init__(self, type_, name, val, val_text):$/;"	m	class:Constant
__init__	tools/genmsg/src/genmsg/msgs.py	/^    def __init__(self, types, names, constants, text, full_name, package = '', short_name = ''):$/;"	m	class:MsgSpec
__init__	tools/genmsg/src/genmsg/srvs.py	/^    def __init__(self, request, response, text, full_name = '', short_name = '', package = ''):$/;"	m	class:SrvSpec
__kindNumber	src/pybind11/tools/clang/cindex.py	/^    def __kindNumber(self):$/;"	m	class:CompletionChunk	file:
__len__	src/pybind11/tools/clang/cindex.py	/^            def __len__(self):$/;"	m	class:CodeCompletionResults.diagnostics.DiagnosticsItr
__len__	src/pybind11/tools/clang/cindex.py	/^            def __len__(self):$/;"	m	class:Diagnostic.children.ChildDiagnosticsIterator
__len__	src/pybind11/tools/clang/cindex.py	/^            def __len__(self):$/;"	m	class:Diagnostic.fixits.FixItIterator
__len__	src/pybind11/tools/clang/cindex.py	/^            def __len__(self):$/;"	m	class:Diagnostic.ranges.RangeIterator
__len__	src/pybind11/tools/clang/cindex.py	/^            def __len__(self):$/;"	m	class:TranslationUnit.diagnostics.DiagIterator
__len__	src/pybind11/tools/clang/cindex.py	/^            def __len__(self):$/;"	m	class:Type.argument_types.ArgumentsIterator
__len__	src/pybind11/tools/clang/cindex.py	/^    def __len__(self):$/;"	m	class:CCRStructure
__len__	src/pybind11/tools/clang/cindex.py	/^    def __len__(self):$/;"	m	class:CompileCommands
__len__	src/pybind11/tools/clang/cindex.py	/^    def __len__(self):$/;"	m	class:CompletionString
__license__	tools/px_generate_uorb_topic_files.py	/^__license__ = "BSD"$/;"	v
__ne__	src/pybind11/tools/clang/cindex.py	/^    def __ne__(self, other):$/;"	m	class:Cursor
__ne__	src/pybind11/tools/clang/cindex.py	/^    def __ne__(self, other):$/;"	m	class:SourceLocation
__ne__	src/pybind11/tools/clang/cindex.py	/^    def __ne__(self, other):$/;"	m	class:SourceRange
__ne__	src/pybind11/tools/clang/cindex.py	/^    def __ne__(self, other):$/;"	m	class:Type
__ne__	tools/genmsg/src/genmsg/msgs.py	/^    def __ne__(self, other):$/;"	m	class:MsgSpec
__ne__	tools/genmsg/src/genmsg/srvs.py	/^    def __ne__(self, other):$/;"	m	class:SrvSpec
__orb_elka_msg_ack_fields	build_elka_data_collection/topics_sources/elka_msg_ack.cpp	/^const char *__orb_elka_msg_ack_fields = "uint64_t timestamp;uint64_t msg_id;uint16_t msg_num;uin/;"	v	typeref:typename:const char *
__orb_elka_msg_ack_fields	build_elka_data_collection/topics_temporary_sources/elka_msg_ack.cpp	/^const char *__orb_elka_msg_ack_fields = "uint64_t timestamp;uint64_t msg_id;uint16_t msg_num;uin/;"	v	typeref:typename:const char *
__orb_elka_msg_fields	build_elka_data_collection/topics_sources/elka_msg.cpp	/^const char *__orb_elka_msg_fields = "uint64_t timestamp;uint64_t msg_id;uint16_t msg_num;uint8_t/;"	v	typeref:typename:const char *
__orb_elka_msg_fields	build_elka_data_collection/topics_temporary_sources/elka_msg.cpp	/^const char *__orb_elka_msg_fields = "uint64_t timestamp;uint64_t msg_id;uint16_t msg_num;uint8_t/;"	v	typeref:typename:const char *
__repr__	src/pybind11/tests/test_pytypes.py	/^        def __repr__(self):$/;"	m	class:test_str.A
__repr__	src/pybind11/tools/clang/cindex.py	/^        def __repr__(self):$/;"	m	class:CompletionChunk.Kind
__repr__	src/pybind11/tools/clang/cindex.py	/^        def __repr__(self):$/;"	m	class:CompletionString.Availability
__repr__	src/pybind11/tools/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:AccessSpecifier
__repr__	src/pybind11/tools/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:BaseEnumeration
__repr__	src/pybind11/tools/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:CodeCompletionResult
__repr__	src/pybind11/tools/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:CompletionChunk
__repr__	src/pybind11/tools/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:CompletionString
__repr__	src/pybind11/tools/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:CursorKind
__repr__	src/pybind11/tools/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:Diagnostic
__repr__	src/pybind11/tools/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:File
__repr__	src/pybind11/tools/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:FixIt
__repr__	src/pybind11/tools/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:RefQualifierKind
__repr__	src/pybind11/tools/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:SourceLocation
__repr__	src/pybind11/tools/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:SourceRange
__repr__	src/pybind11/tools/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:StorageClass
__repr__	src/pybind11/tools/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:TokenKind
__repr__	src/pybind11/tools/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:TypeKind
__repr__	tools/genmsg/src/genmsg/msgs.py	/^    def __repr__(self):$/;"	m	class:Constant
__repr__	tools/genmsg/src/genmsg/msgs.py	/^    def __repr__(self):$/;"	m	class:Field
__repr__	tools/genmsg/src/genmsg/msgs.py	/^    def __repr__(self):$/;"	m	class:MsgSpec
__repr__	tools/genmsg/src/genmsg/srvs.py	/^    def __repr__(self):$/;"	m	class:SrvSpec
__self	src/pybind11/include/pybind11/operators.h	/^inline self_t __self() { return self; }$/;"	f	typeref:typename:self_t
__slots__	tools/genmsg/src/genmsg/msgs.py	/^    __slots__ = ['type', 'name', 'val', 'val_text']$/;"	v	class:Constant	file:
__str__	src/pybind11/tests/conftest.py	/^    def __str__(self):$/;"	m	class:Capture
__str__	src/pybind11/tests/conftest.py	/^    def __str__(self):$/;"	m	class:Output
__str__	src/pybind11/tests/test_pytypes.py	/^        def __str__(self):$/;"	m	class:test_str.A
__str__	src/pybind11/tools/clang/cindex.py	/^        def __str__(self):$/;"	m	class:CompletionChunk.Kind
__str__	src/pybind11/tools/clang/cindex.py	/^        def __str__(self):$/;"	m	class:CompletionString.Availability
__str__	src/pybind11/tools/clang/cindex.py	/^    def __str__(self):$/;"	m	class:LibclangError
__str__	tools/genmsg/src/genmsg/msg_loader.py	/^    def __str__(self):$/;"	m	class:MsgContext
__str__	tools/genmsg/src/genmsg/msgs.py	/^    def __str__(self):$/;"	m	class:Constant
__str__	tools/genmsg/src/genmsg/msgs.py	/^    def __str__(self):$/;"	m	class:MsgSpec
__version__	src/pybind11/pybind11/_version.py	/^__version__ = '.'.join(map(str, version_info))$/;"	v
_buffer	src/elka_comm/common/elka_comm.h	/^  std::vector<ElkaBufferMsg> _buffer;$/;"	m	struct:elka::SerialBuffer	typeref:typename:std::vector<ElkaBufferMsg>
_cli_addr	src/elka_comm/gnd_station/inet_comm.cpp	/^struct sockaddr_in _serv_addr[2], _cli_addr;$/;"	v	typeref:struct:sockaddr_in[2]
_cli_addr	src/elka_comm/posix/inet_comm.cpp	/^struct sockaddr_in _serv_addr[2], _cli_addr;$/;"	v	typeref:struct:sockaddr_in[2]
_clilen	src/elka_comm/gnd_station/inet_comm.cpp	/^socklen_t _clilen;$/;"	v	typeref:typename:socklen_t
_clilen	src/elka_comm/posix/inet_comm.cpp	/^socklen_t _clilen;$/;"	v	typeref:typename:socklen_t
_comp	src/elka_comm/common/elka_comm.h	/^  Compare _comp;$/;"	m	struct:elka::SerialBuffer	typeref:typename:Compare
_compute_hash	tools/genmsg/src/genmsg/gentools.py	/^def _compute_hash(msg_context, spec, hash):$/;"	f
_compute_md5	tools/genmsg/test/test_genmsg_gentools.py	/^def _compute_md5(msg_context, f):$/;"	f
_compute_md5_text	tools/genmsg/test/test_genmsg_gentools.py	/^def _compute_md5_text(msg_context, f):$/;"	f
_data	src/elka_comm/common/elka_comm.h	/^  uint8_t _data[MAX_MSG_LEN];$/;"	m	struct:elka::ElkaBufferMsg	typeref:typename:uint8_t[]
_data	src/pybind11/tools/clang/cindex.py	/^    _data = None$/;"	v	class:SourceLocation
_dev_name	src/elka_comm/gnd_station/elka_devices.h	/^  char _dev_name[MAX_NAME_LEN];$/;"	m	class:elka::GroundPort	typeref:typename:char[]
_dev_name	src/elka_comm/posix/elka_devices.h	/^  char _dev_name[MAX_NAME_LEN];$/;"	m	class:elka::PX4Port	typeref:typename:char[]
_dev_name	src/elka_comm/qurt/snapdragon_uart_devices.h	/^  char _dev_name[MAX_NAME_LEN];$/;"	m	class:uart::UARTPort	typeref:typename:char[]
_dtype_from_pep3118	src/pybind11/include/pybind11/numpy.h	/^    static object _dtype_from_pep3118() {$/;"	f	class:dtype	typeref:typename:object
_elka_ack_pub	src/elka_comm/gnd_station/elka_devices.h	/^  orb_advert_t _elka_ack_pub;$/;"	m	class:elka::GroundPort	typeref:typename:orb_advert_t
_elka_ack_pub	src/elka_comm/posix/elka_devices.h	/^  orb_advert_t _elka_ack_pub;$/;"	m	class:elka::PX4Port	typeref:typename:orb_advert_t
_elka_ack_pub	src/elka_comm/qurt/snapdragon_uart_devices.h	/^  orb_advert_t _elka_ack_pub;$/;"	m	class:uart::UARTPort	typeref:typename:orb_advert_t
_elka_ack_rcv	src/elka_comm/gnd_station/elka_devices.h	/^  struct elka_msg_ack_s _elka_ack_rcv, _elka_ack_snd;$/;"	m	class:elka::GroundPort	typeref:struct:elka_msg_ack_s
_elka_ack_rcv	src/elka_comm/posix/elka_devices.h	/^  struct elka_msg_ack_s _elka_ack_rcv, _elka_ack_snd;$/;"	m	class:elka::PX4Port	typeref:struct:elka_msg_ack_s
_elka_ack_rcv	src/elka_comm/qurt/snapdragon_uart_devices.h	/^  elka_msg_ack_s _elka_ack_snd, _elka_ack_rcv;$/;"	m	class:uart::UARTPort	typeref:typename:elka_msg_ack_s
_elka_ack_snd	src/elka_comm/gnd_station/elka_devices.h	/^  struct elka_msg_ack_s _elka_ack_rcv, _elka_ack_snd;$/;"	m	class:elka::GroundPort	typeref:struct:elka_msg_ack_s
_elka_ack_snd	src/elka_comm/posix/elka_devices.h	/^  struct elka_msg_ack_s _elka_ack_rcv, _elka_ack_snd;$/;"	m	class:elka::PX4Port	typeref:struct:elka_msg_ack_s
_elka_ack_snd	src/elka_comm/qurt/snapdragon_uart_devices.h	/^  elka_msg_ack_s _elka_ack_snd, _elka_ack_rcv;$/;"	m	class:uart::UARTPort	typeref:typename:elka_msg_ack_s
_elka_devs	src/elka_comm/posix/elka_manager.h	/^  PX4Port *_elka_devs[MAX_ELKA_DEVS]; \/\/ Allow at most MAX_ELKA_DEVS devices$/;"	m	class:elka::Manager	typeref:typename:PX4Port * []
_elka_msg_pub	src/elka_comm/gnd_station/elka_devices.h	/^  orb_advert_t _elka_msg_pub;$/;"	m	class:elka::GroundPort	typeref:typename:orb_advert_t
_elka_msg_pub	src/elka_comm/posix/elka_devices.h	/^  orb_advert_t _elka_msg_pub;$/;"	m	class:elka::PX4Port	typeref:typename:orb_advert_t
_elka_msg_pub	src/elka_comm/qurt/snapdragon_uart_devices.h	/^  orb_advert_t _elka_msg_pub;$/;"	m	class:uart::UARTPort	typeref:typename:orb_advert_t
_elka_rcv	src/elka_comm/qurt/snapdragon_uart_devices.h	/^  elka_msg_s _elka_snd, _elka_rcv;$/;"	m	class:uart::UARTPort	typeref:typename:elka_msg_s
_elka_ret	src/elka_comm/gnd_station/elka_devices.h	/^  struct elka_msg_s _elka_snd, _elka_ret, _elka_ret_cmd;$/;"	m	class:elka::GroundPort	typeref:struct:elka_msg_s
_elka_ret	src/elka_comm/posix/elka_devices.h	/^  struct elka_msg_s _elka_snd, _elka_ret, _elka_ret_cmd;$/;"	m	class:elka::PX4Port	typeref:struct:elka_msg_s
_elka_ret_cmd	src/elka_comm/gnd_station/elka_devices.h	/^  struct elka_msg_s _elka_snd, _elka_ret, _elka_ret_cmd;$/;"	m	class:elka::GroundPort	typeref:struct:elka_msg_s
_elka_ret_cmd	src/elka_comm/posix/elka_devices.h	/^  struct elka_msg_s _elka_snd, _elka_ret, _elka_ret_cmd;$/;"	m	class:elka::PX4Port	typeref:struct:elka_msg_s
_elka_snd	src/elka_comm/gnd_station/elka_devices.h	/^  struct elka_msg_s _elka_snd, _elka_ret, _elka_ret_cmd;$/;"	m	class:elka::GroundPort	typeref:struct:elka_msg_s
_elka_snd	src/elka_comm/posix/elka_devices.h	/^  struct elka_msg_s _elka_snd, _elka_ret, _elka_ret_cmd;$/;"	m	class:elka::PX4Port	typeref:struct:elka_msg_s
_elka_snd	src/elka_comm/qurt/snapdragon_uart_devices.h	/^  elka_msg_s _elka_snd, _elka_rcv;$/;"	m	class:uart::UARTPort	typeref:typename:elka_msg_s
_escape_string	tools/gencpp/src/gencpp/__init__.py	/^def _escape_string(s):$/;"	f
_expecting_ack	src/elka_comm/common/elka_comm.h	/^  bool _expecting_ack;$/;"	m	struct:elka::ElkaBufferMsg	typeref:typename:bool
_fields_	src/pybind11/tools/clang/cindex.py	/^    _fields_ = [$/;"	v	class:SourceRange
_fields_	src/pybind11/tools/clang/cindex.py	/^    _fields_ = [$/;"	v	class:Token
_fields_	src/pybind11/tools/clang/cindex.py	/^    _fields_ = [("_kind_id", c_int), ("data", c_void_p * 2)]$/;"	v	class:Type
_fields_	src/pybind11/tools/clang/cindex.py	/^    _fields_ = [("_kind_id", c_int), ("xdata", c_int), ("data", c_void_p * 3)]$/;"	v	class:Cursor
_fields_	src/pybind11/tools/clang/cindex.py	/^    _fields_ = [("name", c_char_p), ("contents", c_char_p), ('length', c_ulong)]$/;"	v	class:_CXUnsavedFile
_fields_	src/pybind11/tools/clang/cindex.py	/^    _fields_ = [("ptr_data", c_void_p * 2), ("int_data", c_uint)]$/;"	v	class:SourceLocation
_fields_	src/pybind11/tools/clang/cindex.py	/^    _fields_ = [("spelling", c_char_p), ("free", c_int)]$/;"	v	class:_CXString
_fields_	src/pybind11/tools/clang/cindex.py	/^    _fields_ = [('cursorKind', c_int), ('completionString', c_object_p)]$/;"	v	class:CodeCompletionResult
_fields_	src/pybind11/tools/clang/cindex.py	/^    _fields_ = [('results', POINTER(CodeCompletionResult)),$/;"	v	class:CCRStructure
_generate_from_spec	tools/genmsg/src/genmsg/template_tools.py	/^def _generate_from_spec(input_file, output_dir, template_dir, msg_context, spec, template_map, s/;"	f
_generate_msg_from_file	tools/genmsg/src/genmsg/template_tools.py	/^def _generate_msg_from_file(input_file, output_dir, template_dir, search_path, package_name, msg/;"	f
_generate_srv_from_file	tools/genmsg/src/genmsg/template_tools.py	/^def _generate_srv_from_file(input_file, output_dir, template_dir, search_path, package_name, srv/;"	f
_get_instantiation	src/pybind11/tools/clang/cindex.py	/^    def _get_instantiation(self):$/;"	m	class:SourceLocation
_heartbeat	src/elka_comm/common/elka_comm.h	/^  bool _heartbeat; \/\/ true if alive, false if not$/;"	m	struct:elka::DeviceRoute	typeref:typename:bool
_hexadecimal	src/pybind11/tests/conftest.py	/^_hexadecimal = re.compile(r'0x[0-9a-fA-F]+')$/;"	v
_id	src/elka_comm/common/elka_comm.h	/^  dev_id_t _id;$/;"	m	struct:elka::CommPort	typeref:typename:dev_id_t
_inet_proc	src/elka_comm/gnd_station/elka_devices.h	/^  Child _inet_proc;$/;"	m	class:elka::GroundPort	typeref:typename:Child
_inet_proc	src/elka_comm/posix/elka_devices.h	/^  Child _inet_proc;$/;"	m	class:elka::PX4Port	typeref:typename:Child
_input_rc	src/elka_comm/qurt/snapdragon_uart_devices.h	/^  input_rc_s _input_rc;$/;"	m	class:uart::UARTPort	typeref:typename:input_rc_s
_instance	src/elka_comm/posix/elka_manager.cpp	/^elka::Manager *elka::Manager::_instance = nullptr;$/;"	m	class:elka::Manager	typeref:typename:elka::Manager *
_instance	src/elka_comm/posix/elka_manager.h	/^  static Manager *_instance;$/;"	m	class:elka::Manager	typeref:typename:Manager *
_instance	src/elka_comm/qurt/snapdragon_uart_manager.cpp	/^uart::Manager *uart::Manager::_instance = nullptr;$/;"	m	class:uart::Manager	typeref:typename:uart::Manager *
_instance	src/elka_comm/qurt/snapdragon_uart_manager.h	/^  static Manager *_instance;$/;"	m	class:uart::Manager	typeref:typename:Manager *
_instances	src/pybind11/tests/constructor_stats.h	/^    std::unordered_map<void*, int> _instances; \/\/ Need a map rather than set because members c/;"	m	class:ConstructorStats	typeref:typename:std::unordered_map<void *,int>
_ipaddr	src/elka_comm/gnd_station/inet_comm.cpp	/^struct in_addr _ipaddr;$/;"	v	typeref:struct:in_addr
_ipaddr	src/elka_comm/posix/inet_comm.cpp	/^struct in_addr _ipaddr;$/;"	v	typeref:struct:in_addr
_kinds	src/pybind11/tools/clang/cindex.py	/^    _kinds = []$/;"	v	class:AccessSpecifier
_kinds	src/pybind11/tools/clang/cindex.py	/^    _kinds = []$/;"	v	class:CursorKind
_kinds	src/pybind11/tools/clang/cindex.py	/^    _kinds = []$/;"	v	class:RefQualifierKind
_kinds	src/pybind11/tools/clang/cindex.py	/^    _kinds = []$/;"	v	class:StorageClass
_kinds	src/pybind11/tools/clang/cindex.py	/^    _kinds = []$/;"	v	class:TemplateArgumentKind
_kinds	src/pybind11/tools/clang/cindex.py	/^    _kinds = []$/;"	v	class:TypeKind
_load_constant_line	tools/genmsg/src/genmsg/msg_loader.py	/^def _load_constant_line(orig_line):$/;"	f
_load_field_line	tools/genmsg/src/genmsg/msg_loader.py	/^def _load_field_line(orig_line, package_context):$/;"	f
_load_md5_tests	tools/genmsg/test/test_genmsg_gentools.py	/^def _load_md5_tests(dir_name):$/;"	f
_long_marker	src/pybind11/tests/conftest.py	/^_long_marker = re.compile(r'([0-9])L')$/;"	v
_make_explanation	src/pybind11/tests/conftest.py	/^def _make_explanation(a, b):$/;"	f
_max_size	src/elka_comm/common/elka_comm.h	/^  uint16_t _max_size;$/;"	m	struct:elka::SerialBuffer	typeref:typename:uint16_t
_msg_id	src/elka_comm/common/elka_comm.h	/^  msg_id_t _msg_id;$/;"	m	struct:elka::ElkaBufferMsg	typeref:typename:msg_id_t
_name_map	src/pybind11/tools/clang/cindex.py	/^    _name_map = None$/;"	v	class:AccessSpecifier
_name_map	src/pybind11/tools/clang/cindex.py	/^    _name_map = None$/;"	v	class:CursorKind
_name_map	src/pybind11/tools/clang/cindex.py	/^    _name_map = None$/;"	v	class:RefQualifierKind
_name_map	src/pybind11/tools/clang/cindex.py	/^    _name_map = None$/;"	v	class:StorageClass
_name_map	src/pybind11/tools/clang/cindex.py	/^    _name_map = None$/;"	v	class:TemplateArgumentKind
_name_map	src/pybind11/tools/clang/cindex.py	/^    _name_map = None$/;"	v	class:TypeKind
_new_dev	src/elka_comm/common/elka_comm.h	/^  bool _new_dev; \/\/ true if haven't received routing table$/;"	m	struct:elka::DeviceRoute	typeref:typename:bool
_newsockfd	src/elka_comm/gnd_station/inet_comm.cpp	/^int _sockfd[2], _newsockfd, _portno[2];$/;"	v	typeref:typename:int[2]
_newsockfd	src/elka_comm/posix/inet_comm.cpp	/^int _sockfd[2], _newsockfd, _portno[2];$/;"	v	typeref:typename:int[2]
_now	src/elka_comm/posix/elka_devices.h	/^  hrt_abstime _now;$/;"	m	class:elka::PX4Port	typeref:typename:hrt_abstime
_now	src/elka_comm/qurt/snapdragon_uart_devices.h	/^  hrt_abstime _now; $/;"	m	class:uart::UARTPort	typeref:typename:hrt_abstime
_num_bytes	src/elka_comm/gnd_station/inet_comm.cpp	/^int _num_bytes;$/;"	v	typeref:typename:int
_num_bytes	src/elka_comm/posix/inet_comm.cpp	/^int _num_bytes;$/;"	v	typeref:typename:int
_num_retries	src/elka_comm/common/elka_comm.h	/^  uint8_t _num_retries;$/;"	m	struct:elka::ElkaBufferMsg	typeref:typename:uint8_t
_padding0	build_elka_data_collection/inc/uORB/topics/elka_msg.h	/^	uint8_t _padding0[5]; \/\/ required for logger$/;"	m	struct:elka_msg_s	typeref:typename:uint8_t[5]
_padding0	build_elka_data_collection/inc/uORB/topics/elka_msg_ack.h	/^	uint8_t _padding0[4]; \/\/ required for logger$/;"	m	struct:elka_msg_ack_s	typeref:typename:uint8_t[4]
_padding0	build_elka_data_collection/topics_temporary_header/elka_msg.h	/^	uint8_t _padding0[5]; \/\/ required for logger$/;"	m	struct:elka_msg_s	typeref:typename:uint8_t[5]
_padding0	build_elka_data_collection/topics_temporary_header/elka_msg_ack.h	/^	uint8_t _padding0[4]; \/\/ required for logger$/;"	m	struct:elka_msg_ack_s	typeref:typename:uint8_t[4]
_port_id	src/elka_comm/common/elka_comm.h	/^  dev_id_t _port_id;$/;"	m	struct:elka::SerialBuffer	typeref:typename:dev_id_t
_port_num	src/elka_comm/common/elka_comm.h	/^  uint8_t _port_num;$/;"	m	struct:elka::CommPort	typeref:typename:uint8_t
_portno	src/elka_comm/gnd_station/inet_comm.cpp	/^int _sockfd[2], _newsockfd, _portno[2];$/;"	v	typeref:typename:int[2][2]
_portno	src/elka_comm/posix/inet_comm.cpp	/^int _sockfd[2], _newsockfd, _portno[2];$/;"	v	typeref:typename:int[2][2]
_props	src/elka_comm/common/elka_comm.h	/^  std::vector<dev_prop_t> _props;$/;"	m	struct:elka::DeviceRoute	typeref:typename:std::vector<dev_prop_t>
_push_msg_num	src/elka_comm/common/elka_comm.h	/^  uint16_t _push_msg_num; $/;"	m	struct:elka::ElkaBufferMsg	typeref:typename:uint16_t
_push_msg_num	src/elka_comm/common/elka_comm.h	/^  uint16_t _push_msg_num;$/;"	m	struct:elka::SerialBuffer	typeref:typename:uint16_t
_py_type_0	src/pybind11/include/pybind11/cast.h	/^    using _py_type_0 = conditional_t<sizeof(T) <= sizeof(long), long, long long>;$/;"	t	struct:type_caster
_py_type_1	src/pybind11/include/pybind11/cast.h	/^    using _py_type_1 = conditional_t<std::is_signed<T>::value, _py_type_0, typename std::make_un/;"	t	struct:type_caster	typeref:typename:conditional_t<std::is_signed<T>::value,_py_type_0,typename std::make_unsigned<_py_type_0>::type>
_recent_acks	src/elka_comm/common/elka_comm.h	/^  uint16_t _recent_acks[RECENT_ACKS_LEN];$/;"	m	struct:elka::SerialBuffer	typeref:typename:uint16_t[]
_recent_acks_end	src/elka_comm/common/elka_comm.h	/^  uint16_t _recent_acks_end;$/;"	m	struct:elka::SerialBuffer	typeref:typename:uint16_t
_recent_acks_len	src/elka_comm/common/elka_comm.h	/^  uint16_t _recent_acks_len;$/;"	m	struct:elka::SerialBuffer	typeref:typename:uint16_t
_rmv_msg_num	src/elka_comm/common/elka_comm.h	/^  uint16_t _rmv_msg_num; $/;"	m	struct:elka::ElkaBufferMsg	typeref:typename:uint16_t
_rmv_msg_num	src/elka_comm/common/elka_comm.h	/^  uint16_t _rmv_msg_num;$/;"	m	struct:elka::SerialBuffer	typeref:typename:uint16_t
_route	src/elka_comm/common/elka_comm.h	/^  std::vector<dev_id_t> _route;$/;"	m	struct:elka::DeviceRoute	typeref:typename:std::vector<dev_id_t>
_routing_table	src/elka_comm/common/elka_comm.h	/^  std::map<dev_id_t, DeviceRoute, dev_id_tCmp> _routing_table;$/;"	m	struct:elka::CommPort	typeref:typename:std::map<dev_id_t,DeviceRoute,dev_id_tCmp>
_rx_buf	src/elka_comm/common/elka_comm.h	/^  struct elka::SerialBuffer *_rx_buf;$/;"	m	struct:elka::CommPort	typeref:struct:elka::SerialBuffer *
_rx_buffer	src/elka_comm/gnd_station/inet_comm.cpp	/^uint8_t _tx_buffer[2][MAX_MSG_LEN], _rx_buffer[2][MAX_MSG_LEN];$/;"	v	typeref:typename:uint8_t[2][][2][]
_rx_buffer	src/elka_comm/posix/inet_comm.cpp	/^uint8_t _tx_buffer[2][MAX_MSG_LEN], _rx_buffer[2][MAX_MSG_LEN];$/;"	v	typeref:typename:uint8_t[2][][2][]
_rx_sb	src/elka_comm/gnd_station/inet_comm.cpp	/^elka::SerialBuffer *_rx_sb;$/;"	v	typeref:typename:elka::SerialBuffer *
_rx_sb	src/elka_comm/posix/inet_comm.cpp	/^elka::SerialBuffer *_rx_sb;$/;"	v	typeref:typename:elka::SerialBuffer *
_rx_sb	src/elka_comm/qurt/basic_uart.cpp	/^elka::SerialBuffer *_rx_sb[MAX_UART_PORTS];$/;"	v	typeref:typename:elka::SerialBuffer * []
_sanitize_docstring	src/pybind11/tests/conftest.py	/^def _sanitize_docstring(thing):$/;"	f
_sanitize_general	src/pybind11/tests/conftest.py	/^def _sanitize_general(s):$/;"	f
_sanitize_message	src/pybind11/tests/conftest.py	/^def _sanitize_message(thing):$/;"	f
_serial_fd	src/elka_comm/qurt/snapdragon_uart_devices.h	/^  int _serial_fd;$/;"	m	class:uart::UARTPort	typeref:typename:int
_serv_addr	src/elka_comm/gnd_station/inet_comm.cpp	/^struct sockaddr_in _serv_addr[2], _cli_addr;$/;"	v	typeref:struct:sockaddr_in[2]
_serv_addr	src/elka_comm/posix/inet_comm.cpp	/^struct sockaddr_in _serv_addr[2], _cli_addr;$/;"	v	typeref:struct:sockaddr_in[2]
_server	src/elka_comm/gnd_station/inet_comm.cpp	/^struct hostent *_server;$/;"	v	typeref:struct:hostent *
_server	src/elka_comm/posix/inet_comm.cpp	/^struct hostent *_server;$/;"	v	typeref:struct:hostent *
_snd_params	src/elka_comm/common/elka_comm.h	/^  uint8_t _snd_params;$/;"	m	struct:elka::CommPort	typeref:typename:uint8_t
_sockfd	src/elka_comm/gnd_station/inet_comm.cpp	/^int _sockfd[2], _newsockfd, _portno[2];$/;"	v	typeref:typename:int[2]
_sockfd	src/elka_comm/posix/inet_comm.cpp	/^int _sockfd[2], _newsockfd, _portno[2];$/;"	v	typeref:typename:int[2]
_split_and_sort	src/pybind11/tests/conftest.py	/^def _split_and_sort(s):$/;"	f
_state	src/elka_comm/common/elka_comm.h	/^  uint8_t _state;$/;"	m	struct:elka::CommPort	typeref:typename:uint8_t
_state	src/elka_comm/qurt/snapdragon_uart_devices.h	/^  uint8_t _state; \/\/ state of Snapdragon UART$/;"	m	class:uart::UARTPort	typeref:typename:uint8_t
_strip_and_dedent	src/pybind11/tests/conftest.py	/^def _strip_and_dedent(s):$/;"	f
_strip_comments	tools/genmsg/src/genmsg/msg_loader.py	/^def _strip_comments(line):$/;"	f
_test_import_pybind11	src/pybind11/tests/conftest.py	/^def _test_import_pybind11():$/;"	f
_tmp	src/pybind11/tests/test_virtual_functions.cpp	/^        std::string _tmp;$/;"	m	class:TEST_SUBMODULE::PyOverrideTest	typeref:typename:std::string	file:
_tx_buf	src/elka_comm/common/elka_comm.h	/^  struct elka::SerialBuffer *_tx_buf;$/;"	m	struct:elka::CommPort	typeref:struct:elka::SerialBuffer *
_tx_buffer	src/elka_comm/gnd_station/inet_comm.cpp	/^uint8_t _tx_buffer[2][MAX_MSG_LEN], _rx_buffer[2][MAX_MSG_LEN];$/;"	v	typeref:typename:uint8_t[2][]
_tx_buffer	src/elka_comm/posix/inet_comm.cpp	/^uint8_t _tx_buffer[2][MAX_MSG_LEN], _rx_buffer[2][MAX_MSG_LEN];$/;"	v	typeref:typename:uint8_t[2][]
_tx_sb	src/elka_comm/gnd_station/inet_comm.cpp	/^elka::SerialBuffer *_tx_sb;$/;"	v	typeref:typename:elka::SerialBuffer *
_tx_sb	src/elka_comm/posix/inet_comm.cpp	/^elka::SerialBuffer *_tx_sb;$/;"	v	typeref:typename:elka::SerialBuffer *
_tx_sb	src/elka_comm/qurt/basic_uart.cpp	/^elka::SerialBuffer *_tx_sb[MAX_UART_PORTS];$/;"	v	typeref:typename:elka::SerialBuffer * []
_type	src/elka_comm/common/elka_comm.h	/^  uint8_t _type;$/;"	m	struct:elka::SerialBuffer	typeref:typename:uint8_t
_uart_devs	src/elka_comm/qurt/snapdragon_uart_manager.h	/^  UARTPort *_uart_devs[MAX_UART_PORTS]; \/\/ Allow at most MAX_UART_PORTS devices$/;"	m	class:uart::Manager	typeref:typename:UARTPort * []
_unicode_marker	src/pybind11/tests/conftest.py	/^_unicode_marker = re.compile(r'u(\\'[^\\']*\\')')$/;"	v
_unique_deps	tools/genmsg/src/genmsg/gentools.py	/^def _unique_deps(dep_list):$/;"	f
_uorb_topics_count	build_elka_data_collection/topics_sources/uORBTopics.cpp	/^const size_t _uorb_topics_count = 2;$/;"	v	typeref:typename:const size_t
_uorb_topics_list	build_elka_data_collection/topics_sources/uORBTopics.cpp	/^const struct orb_metadata* _uorb_topics_list[_uorb_topics_count] = { $/;"	v	typeref:typename:const struct orb_metadata * []
_validate_TestString	tools/genmsg/test/test_genmsg_msg_loader.py	/^def _validate_TestString(msgspec):$/;"	f
_value_map	src/pybind11/tools/clang/cindex.py	/^    _value_map = {} # int -> TokenKind$/;"	v	class:TokenKind
_values	src/pybind11/tests/constructor_stats.h	/^    std::list<std::string> _values; \/\/ Used to track values (e.g. of value constructors)$/;"	m	class:ConstructorStats	typeref:typename:std::list<std::string>
a	src/pybind11/tests/test_eigen.cpp	/^    Eigen::Matrix4d a = Eigen::Matrix4d::Zero();$/;"	m	struct:CustomOperatorNew	typeref:typename:Eigen::Matrix4d	file:
a	src/pybind11/tests/test_multiple_inheritance.cpp	/^struct I801B1 { int a = 1; virtual ~I801B1() = default; };$/;"	m	struct:I801B1	typeref:typename:int	file:
a	src/pybind11/tests/test_numpy_dtypes.cpp	/^    PartialStruct a;$/;"	m	struct:PartialNestedStruct	typeref:typename:PartialStruct	file:
a	src/pybind11/tests/test_numpy_dtypes.cpp	/^    char a[3];$/;"	m	struct:StringStruct	typeref:typename:char[3]	file:
a	src/pybind11/tests/test_numpy_dtypes.cpp	/^    char a[3][4];$/;"	m	struct:ArrayStruct	typeref:typename:char[3][4]	file:
a	src/pybind11/tests/test_numpy_dtypes.cpp	/^    int32_t a;$/;"	m	struct:TrailingPaddingStruct	typeref:typename:int32_t	file:
a	src/pybind11/tests/test_operator_overloading.cpp	/^    NestA a;$/;"	m	struct:NestB	typeref:typename:NestA	file:
a	src/pybind11/tests/test_stl_binders.cpp	/^    int a;$/;"	m	class:El	typeref:typename:int	file:
a	src/pybind11/tests/test_virtual_functions.cpp	/^        A a;$/;"	m	class:TEST_SUBMODULE::OverrideTest	typeref:typename:A	file:
a1	src/pybind11/tests/test_modules.cpp	/^    A a1{1};$/;"	m	class:B	typeref:typename:A	file:
a2	src/pybind11/tests/test_modules.cpp	/^    A a2{2};$/;"	m	class:B	typeref:typename:A	file:
access_specifier	src/pybind11/tools/clang/cindex.py	/^    def access_specifier(self):$/;"	m	class:Cursor
accessor	src/pybind11/include/pybind11/pytypes.h	/^    accessor(handle obj, key_type key) : obj(obj), key(std::move(key)) { }$/;"	f	class:accessor
accessor	src/pybind11/include/pybind11/pytypes.h	/^class accessor : public object_api<accessor<Policy>> {$/;"	c
accessor_policies	src/pybind11/include/pybind11/pytypes.h	/^namespace accessor_policies {$/;"	n
add	src/pybind11/include/pybind11/pytypes.h	/^    template <typename T> bool add(T &&val) const {$/;"	f	class:set	typeref:typename:bool
add	src/pybind11/tests/test_smart_ptr.cpp	/^    void add(std::shared_ptr<ElementBase> e) { l.push_back(e); }$/;"	f	struct:ElementList	typeref:typename:void	file:
add1	src/pybind11/tests/test_methods_and_attributes.cpp	/^    void add1(ExampleMandA other) { value += other.value; }           \/\/ passing by value$/;"	f	class:ExampleMandA	typeref:typename:void	file:
add10	src/pybind11/tests/test_methods_and_attributes.cpp	/^    void add10(const int *other) { value += *other; }             \/\/ passing by const pointer$/;"	f	class:ExampleMandA	typeref:typename:void	file:
add2	src/pybind11/tests/test_methods_and_attributes.cpp	/^    void add2(ExampleMandA &other) { value += other.value; }          \/\/ passing by reference$/;"	f	class:ExampleMandA	typeref:typename:void	file:
add3	src/pybind11/tests/test_methods_and_attributes.cpp	/^    void add3(const ExampleMandA &other) { value += other.value; }    \/\/ passing by const refe/;"	f	class:ExampleMandA	typeref:typename:void	file:
add4	src/pybind11/tests/test_methods_and_attributes.cpp	/^    void add4(ExampleMandA *other) { value += other->value; }         \/\/ passing by pointer$/;"	f	class:ExampleMandA	typeref:typename:void	file:
add5	src/pybind11/tests/test_methods_and_attributes.cpp	/^    void add5(const ExampleMandA *other) { value += other->value; }   \/\/ passing by const poin/;"	f	class:ExampleMandA	typeref:typename:void	file:
add6	src/pybind11/tests/test_methods_and_attributes.cpp	/^    void add6(int other) { value += other; }                      \/\/ passing by value$/;"	f	class:ExampleMandA	typeref:typename:void	file:
add7	src/pybind11/tests/test_methods_and_attributes.cpp	/^    void add7(int &other) { value += other; }                     \/\/ passing by reference$/;"	f	class:ExampleMandA	typeref:typename:void	file:
add8	src/pybind11/tests/test_methods_and_attributes.cpp	/^    void add8(const int &other) { value += other; }               \/\/ passing by const referenc/;"	f	class:ExampleMandA	typeref:typename:void	file:
add9	src/pybind11/tests/test_methods_and_attributes.cpp	/^    void add9(int *other) { value += *other; }                    \/\/ passing by pointer$/;"	f	class:ExampleMandA	typeref:typename:void	file:
addChild	src/pybind11/tests/test_call_policies.cpp	/^    void addChild(Child *) { }$/;"	f	class:Parent	typeref:typename:void	file:
add_base	src/pybind11/include/pybind11/attr.h	/^    PYBIND11_NOINLINE void add_base(const std::type_info &base, void *(*caster)(void *)) {$/;"	f	struct:type_record	typeref:typename:PYBIND11_NOINLINE void
add_base	src/pybind11/include/pybind11/pybind11.h	/^    static void add_base(detail::type_record &rec) {$/;"	f	class:class_	typeref:typename:void
add_dataset	serial/python/gui.py	/^    def add_dataset(self, name, pen, data):$/;"	m	class:PlotData
add_msg	src/elka_comm/gnd_station/elka_devices.cpp	/^uint8_t elka::GroundPort::add_msg($/;"	f	class:elka::GroundPort	typeref:typename:uint8_t
add_msg	src/elka_comm/posix/elka_devices.cpp	/^uint8_t elka::PX4Port::add_msg($/;"	f	class:elka::PX4Port	typeref:typename:uint8_t
add_msg	src/elka_comm/qurt/snapdragon_uart_devices.cpp	/^uint8_t uart::UARTPort::add_msg($/;"	f	class:uart::UARTPort	typeref:typename:uint8_t
add_object	src/pybind11/include/pybind11/pybind11.h	/^    PYBIND11_NOINLINE void add_object(const char *name, handle obj, bool overwrite = false) {$/;"	f	class:module	typeref:typename:PYBIND11_NOINLINE void
add_padding_bytes	tools/px_generate_uorb_topic_helper.py	/^def add_padding_bytes(fields, search_path):$/;"	f
add_patient	src/pybind11/include/pybind11/cast.h	/^    PYBIND11_NOINLINE static void add_patient(handle h) {$/;"	f	class:loader_life_support	typeref:typename:PYBIND11_NOINLINE void
add_patient	src/pybind11/include/pybind11/class_support.h	/^inline void add_patient(PyObject *nurse, PyObject *patient) {$/;"	f	typeref:typename:void
add_plot	serial/python/gui.py	/^    def add_plot(self, name):$/;"	m	class:MainWindow
add_plot_data	serial/python/gui.py	/^    def add_plot_data(self, plot_name, dataset_name, pen, data):$/;"	m	class:MainWindow
add_prop	src/elka_comm/common/elka_comm.cpp	/^void elka::DeviceRoute::add_prop(dev_prop_t prop) {$/;"	f	class:elka::DeviceRoute	typeref:typename:void
addopts	src/pybind11/tests/pytest.ini	/^addopts =$/;"	k	section:pytest
adjust_matrix	src/pybind11/tests/test_eigen.cpp	/^template <typename MatrixArgType> Eigen::MatrixXd adjust_matrix(MatrixArgType m) {$/;"	f	typeref:typename:Eigen::MatrixXd
advance	src/pybind11/include/pybind11/pytypes.h	/^    void advance() {$/;"	f	class:iterator	typeref:typename:void
advance	src/pybind11/include/pybind11/pytypes.h	/^    void advance(ssize_t n) { index += n; }$/;"	f	class:sequence_slow_readwrite	typeref:typename:void
advance	src/pybind11/include/pybind11/pytypes.h	/^    void advance(ssize_t n) { ptr += n; }$/;"	f	class:sequence_fast_readonly	typeref:typename:void
alignment	src/pybind11/include/pybind11/numpy.h	/^    int alignment;$/;"	m	struct:PyArrayDescr_Proxy	typeref:typename:int
alive	src/pybind11/tests/constructor_stats.h	/^    int alive() {$/;"	f	class:ConstructorStats	typeref:typename:int
all	Makefile	/^.PHONY all:$/;"	t
all	Makefile	/^all: elka_data_collection$/;"	t
all	build_elka_data_collection/Makefile	/^all: cmake_check_build_system$/;"	t
all	build_elka_data_collection/msg/Makefile	/^all: cmake_check_build_system$/;"	t
all	build_elka_data_collection/src/Makefile	/^all: cmake_check_build_system$/;"	t
all	build_elka_data_collection/src/elka_comm/common/Makefile	/^all: cmake_check_build_system$/;"	t
all	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^all: cmake_check_build_system$/;"	t
all	build_elka_data_collection/src/pybind11/Makefile	/^all: cmake_check_build_system$/;"	t
all_of	src/pybind11/include/pybind11/common.h	/^template <class... Ts> using all_of = bool_constant<(Ts::value && ...)>;$/;"	t
all_of	src/pybind11/include/pybind11/common.h	/^template <class... Ts> using all_of = std::conjunction<Ts...>;$/;"	t	typeref:typename:std::conjunction<Ts...>
all_of	src/pybind11/include/pybind11/common.h	/^template <class... Ts> using all_of = std::is_same<$/;"	t	typeref:typename:std::is_same<bools<Ts::value...,true>,bools<true,Ts::value...>>
all_type_info	src/pybind11/include/pybind11/cast.h	/^inline const std::vector<detail::type_info *> &all_type_info(PyTypeObject *type) {$/;"	f	typeref:typename:const std::vector<detail::type_info * > &
all_type_info_get_cache	src/pybind11/include/pybind11/pybind11.h	/^inline std::pair<decltype(internals::registered_types_py)::iterator, bool> all_type_info_get_cac/;"	f	typeref:typename:std::pair<decltype (internals::registered_types_py)::iterator,bool>
all_type_info_populate	src/pybind11/include/pybind11/cast.h	/^PYBIND11_NOINLINE inline void all_type_info_populate(PyTypeObject *t, std::vector<type_info *> &/;"	f	typeref:typename:PYBIND11_NOINLINE void
allclose	src/pybind11/tests/test_sequences_and_iterators.py	/^def allclose(a_list, b_list, rel_tol=1e-05, abs_tol=0.0):$/;"	f
allocate_layout	src/pybind11/include/pybind11/cast.h	/^PYBIND11_NOINLINE inline void instance::allocate_layout() {$/;"	f	class:instance	typeref:typename:PYBIND11_NOINLINE void
always_construct_holder	src/pybind11/include/pybind11/cast.h	/^template <typename T, bool Value = false> struct always_construct_holder { static constexpr bool/;"	s
answer	src/pybind11/tests/test_methods_and_attributes.cpp	/^class NoneTester { public: int answer = 42; };$/;"	m	class:NoneTester	typeref:typename:int	file:
any_container	src/pybind11/include/pybind11/common.h	/^    any_container(It first, It last) : v(first, last) { }$/;"	f	class:any_container	typeref:typename:::value>>
any_container	src/pybind11/include/pybind11/common.h	/^    any_container(const Container &c) : any_container(std::begin(c), std::end(c)) { }$/;"	f	class:any_container	typeref:typename:::value>>
any_container	src/pybind11/include/pybind11/common.h	/^    any_container(const std::initializer_list<TIn> &c) : any_container(c.begin(), c.end()) { }$/;"	f	class:any_container	typeref:typename:::value>>
any_container	src/pybind11/include/pybind11/common.h	/^    any_container(std::vector<T> &&v) : v(std::move(v)) { }$/;"	f	class:any_container
any_container	src/pybind11/include/pybind11/common.h	/^class any_container {$/;"	c
any_of	src/pybind11/include/pybind11/common.h	/^template <class... Ts> using any_of = bool_constant<(Ts::value || ...)>;$/;"	t
any_of	src/pybind11/include/pybind11/common.h	/^template <class... Ts> using any_of = negation<all_of<negation<Ts>...>>;$/;"	t	typeref:typename:negation<all_of<negation<Ts>...>>
any_of	src/pybind11/include/pybind11/common.h	/^template <class... Ts> using any_of = std::disjunction<Ts...>;$/;"	t	typeref:typename:std::disjunction<Ts...>
app	serial/python/gui_start.py	/^    app = QtGui.QApplication(sys.argv)$/;"	v
app	serial/python/parse_vispy.py	/^app = QtGui.QApplication([])$/;"	v
append	src/pybind11/include/pybind11/pytypes.h	/^    template <typename T> void append(T &&val) const {$/;"	f	class:list	typeref:typename:void
append_extents	src/pybind11/include/pybind11/numpy.h	/^    static void append_extents(list& \/* shape *\/) { }$/;"	f	struct:array_info_scalar	typeref:typename:void
append_extents	src/pybind11/include/pybind11/numpy.h	/^    static void append_extents(list& shape) {$/;"	f	struct:array_info	typeref:typename:void
append_to_include_path	tools/px_generate_uorb_topic_files.py	/^def append_to_include_path(path_to_append, curr_include):$/;"	f
applehelp	src/pybind11/docs/Makefile	/^applehelp:$/;"	t
apply_broadcast	src/pybind11/include/pybind11/numpy.h	/^    void apply_broadcast(std::array<buffer_info, NVectorized> &buffers,$/;"	f	struct:vectorize_helper	typeref:typename:void
apply_trivial	src/pybind11/include/pybind11/numpy.h	/^    void apply_trivial(std::array<buffer_info, NVectorized> &buffers,$/;"	f	struct:vectorize_helper	typeref:typename:void
arg	src/pybind11/include/pybind11/cast.h	/^    constexpr explicit arg(const char *name = nullptr) : name(name), flag_noconvert(false), flag/;"	f	struct:arg	typeref:typename:constexpr
arg	src/pybind11/include/pybind11/cast.h	/^struct arg {$/;"	s
arg	src/pybind11/tests/test_methods_and_attributes.cpp	/^class ArgInspector1 { public: std::string arg = "(default arg inspector 1)"; };$/;"	m	class:ArgInspector1	typeref:typename:std::string	file:
arg	src/pybind11/tests/test_methods_and_attributes.cpp	/^class ArgInspector2 { public: std::string arg = "(default arg inspector 2)"; };$/;"	m	class:ArgInspector2	typeref:typename:std::string	file:
arg_keywords_and_defaults	src/pybind11/tests/test_kwargs_and_defaults.cpp	/^test_initializer arg_keywords_and_defaults([](py::module &m) {$/;"	v	typeref:typename:test_initializer
arg_names	src/pybind11/include/pybind11/cast.h	/^    static PYBIND11_DESCR arg_names() { return detail::concat(make_caster<Args>::name()...); }$/;"	f	class:argument_loader	typeref:typename:PYBIND11_DESCR
arg_t	src/pybind11/include/pybind11/cast.h	/^template <typename \/*unused*\/> using arg_t = arg_v;$/;"	t	typeref:typename:arg_v
arg_v	src/pybind11/include/pybind11/cast.h	/^    arg_v(arg &&base, T &&x, const char *descr = nullptr)$/;"	f	struct:arg_v
arg_v	src/pybind11/include/pybind11/cast.h	/^    arg_v(const arg &base, T &&x, const char *descr = nullptr)$/;"	f	struct:arg_v
arg_v	src/pybind11/include/pybind11/cast.h	/^    arg_v(const char *name, T &&x, const char *descr = nullptr)$/;"	f	struct:arg_v
arg_v	src/pybind11/include/pybind11/cast.h	/^struct arg_v : arg {$/;"	s
argcasters	src/pybind11/include/pybind11/cast.h	/^    std::tuple<make_caster<Args>...> argcasters;$/;"	m	class:argument_loader	typeref:typename:std::tuple<make_caster<Args>...>
args	src/pybind11/include/pybind11/attr.h	/^    std::vector<argument_record> args;$/;"	m	struct:function_record	typeref:typename:std::vector<argument_record>
args	src/pybind11/include/pybind11/cast.h	/^    const tuple &args() const & { return m_args; }$/;"	f	class:simple_collector	typeref:typename:const tuple &
args	src/pybind11/include/pybind11/cast.h	/^    const tuple &args() const & { return m_args; }$/;"	f	class:unpacking_collector	typeref:typename:const tuple &
args	src/pybind11/include/pybind11/cast.h	/^    std::vector<handle> args;$/;"	m	struct:function_call	typeref:typename:std::vector<handle>
args	src/pybind11/include/pybind11/cast.h	/^    tuple args() && { return std::move(m_args); }$/;"	f	class:simple_collector	typeref:typename:tuple
args	src/pybind11/include/pybind11/cast.h	/^    tuple args() && { return std::move(m_args); }$/;"	f	class:unpacking_collector	typeref:typename:tuple
args	src/pybind11/include/pybind11/pytypes.h	/^class args : public tuple { PYBIND11_OBJECT_DEFAULT(args, tuple, PyTuple_Check) };$/;"	c
args	tools/px_generate_uorb_topic_files.py	/^        args = parser.parse_args()$/;"	v
args_convert	src/pybind11/include/pybind11/cast.h	/^    std::vector<bool> args_convert;$/;"	m	struct:function_call	typeref:typename:std::vector<bool>
args_function	src/pybind11/tests/test_kwargs_and_defaults.cpp	/^py::tuple args_function(py::args args) {$/;"	f	typeref:typename:py::tuple
args_kwargs_are_last	src/pybind11/include/pybind11/cast.h	/^    static constexpr bool args_kwargs_are_last = kwargs_pos >= - 1 && args_pos >= kwargs_pos - 1/;"	m	class:argument_loader	typeref:typename:constexpr bool
args_kwargs_function	src/pybind11/tests/test_kwargs_and_defaults.cpp	/^py::tuple args_kwargs_function(py::args args, py::kwargs kwargs) {$/;"	f	typeref:typename:py::tuple
args_pos	src/pybind11/include/pybind11/cast.h	/^    static constexpr auto args_pos = constexpr_first<argument_is_args, Args...>() - (int) sizeof/;"	m	class:argument_loader	typeref:typename:constexpr auto
args_proxy	src/pybind11/include/pybind11/pytypes.h	/^    explicit args_proxy(handle h) : handle(h) { }$/;"	f	class:args_proxy
args_proxy	src/pybind11/include/pybind11/pytypes.h	/^class args_proxy : public handle {$/;"	c
argument_cast_error	src/pybind11/include/pybind11/cast.h	/^    [[noreturn]] static void argument_cast_error() {$/;"	f	class:unpacking_collector	typeref:typename:[[noreturn]]void
argument_cast_error	src/pybind11/include/pybind11/cast.h	/^    [[noreturn]] static void argument_cast_error(std::string name, std::string type) {$/;"	f	class:unpacking_collector	typeref:typename:[[noreturn]]void
argument_is_args	src/pybind11/include/pybind11/cast.h	/^    template <typename Arg> using argument_is_args   = std::is_same<intrinsic_t<Arg>, args>;$/;"	t	class:argument_loader	typeref:typename:std::is_same<intrinsic_t<Arg>,args>
argument_is_kwargs	src/pybind11/include/pybind11/cast.h	/^    template <typename Arg> using argument_is_kwargs = std::is_same<intrinsic_t<Arg>, kwargs>;$/;"	t	class:argument_loader	typeref:typename:std::is_same<intrinsic_t<Arg>,kwargs>
argument_loader	src/pybind11/include/pybind11/cast.h	/^class argument_loader {$/;"	c
argument_record	src/pybind11/include/pybind11/attr.h	/^    argument_record(const char *name, const char *descr, handle value, bool convert, bool none)$/;"	f	struct:argument_record
argument_record	src/pybind11/include/pybind11/attr.h	/^struct argument_record {$/;"	s
argument_types	src/pybind11/tools/clang/cindex.py	/^    def argument_types(self):$/;"	m	class:Type
arguments	src/pybind11/tools/clang/cindex.py	/^    def arguments(self):$/;"	m	class:CompileCommand
arithmetic	src/pybind11/include/pybind11/attr.h	/^struct arithmetic { };$/;"	s
arming_state_t	inc/uORB/uORB.h	/^typedef uint8_t arming_state_t;$/;"	t	typeref:typename:uint8_t
arr	src/pybind11/tests/test_numpy_array.cpp	/^using arr = py::array;$/;"	t	typeref:typename:py::array	file:
arr	src/pybind11/tests/test_numpy_array.py	/^def arr():$/;"	f
arr_t	src/pybind11/tests/test_numpy_array.cpp	/^using arr_t = py::array_t<uint16_t, 0>;$/;"	t	typeref:typename:py::array_t<uint16_t,0>	file:
arr_t	src/pybind11/tests/test_numpy_dtypes.cpp	/^    using arr_t = py::array_t<int32_t, 0>;$/;"	t	function:test_array_ctors	typeref:typename:py::array_t<int32_t,0>	file:
array	src/pybind11/include/pybind11/numpy.h	/^    array() : array({{0}}, static_cast<const double *>(nullptr)) {}$/;"	f	class:array
array	src/pybind11/include/pybind11/numpy.h	/^    array(ShapeContainer shape, StridesContainer strides, const T *ptr, handle base = handle())$/;"	f	class:array
array	src/pybind11/include/pybind11/numpy.h	/^    array(ShapeContainer shape, const T *ptr, handle base = handle())$/;"	f	class:array
array	src/pybind11/include/pybind11/numpy.h	/^    array(const pybind11::dtype &dt, ShapeContainer shape, StridesContainer strides,$/;"	f	class:array
array	src/pybind11/include/pybind11/numpy.h	/^    array(const pybind11::dtype &dt, ShapeContainer shape, const void *ptr = nullptr, handle bas/;"	f	class:array
array	src/pybind11/include/pybind11/numpy.h	/^    explicit array(const buffer_info &info)$/;"	f	class:array
array	src/pybind11/include/pybind11/numpy.h	/^    explicit array(ssize_t count, const T *ptr, handle base = handle()) : array({count}, {}, ptr/;"	f	class:array
array	src/pybind11/include/pybind11/numpy.h	/^    friend class pybind11::array;$/;"	m	class:unchecked_mutable_reference::pybind11	typeref:typename:class
array	src/pybind11/include/pybind11/numpy.h	/^    friend class pybind11::array;$/;"	m	class:unchecked_reference::pybind11	typeref:typename:class
array	src/pybind11/include/pybind11/numpy.h	/^class array : public buffer {$/;"	c
array_begin	src/pybind11/include/pybind11/numpy.h	/^array_iterator<T> array_begin(const buffer_info& buffer) {$/;"	f	typeref:typename:array_iterator<T>
array_caster	src/pybind11/include/pybind11/stl.h	/^template <typename ArrayType, typename Value, bool Resizable, size_t Size = 0> struct array_cast/;"	s
array_copy_but_one	src/pybind11/tests/test_eigen.py	/^def array_copy_but_one(a, r, c, v):$/;"	f
array_descriptor_proxy	src/pybind11/include/pybind11/numpy.h	/^inline PyArrayDescr_Proxy* array_descriptor_proxy(PyObject* ptr) {$/;"	f	typeref:typename:PyArrayDescr_Proxy *
array_descriptor_proxy	src/pybind11/include/pybind11/numpy.h	/^inline const PyArrayDescr_Proxy* array_descriptor_proxy(const PyObject* ptr) {$/;"	f	typeref:typename:const PyArrayDescr_Proxy *
array_end	src/pybind11/include/pybind11/numpy.h	/^array_iterator<T> array_end(const buffer_info& buffer) {$/;"	f	typeref:typename:array_iterator<T>
array_info	src/pybind11/include/pybind11/numpy.h	/^template <size_t N> struct array_info<char[N]> : array_info_scalar<char[N]> { };$/;"	s
array_info	src/pybind11/include/pybind11/numpy.h	/^template <size_t N> struct array_info<std::array<char, N>> : array_info_scalar<std::array<char, /;"	s
array_info	src/pybind11/include/pybind11/numpy.h	/^template <typename T, size_t N> struct array_info<T[N]> : array_info<std::array<T, N>> { };$/;"	s
array_info	src/pybind11/include/pybind11/numpy.h	/^template <typename T, size_t N> struct array_info<std::array<T, N>> {$/;"	s
array_info	src/pybind11/include/pybind11/numpy.h	/^template <typename T> struct array_info : array_info_scalar<T> { };$/;"	s
array_info_scalar	src/pybind11/include/pybind11/numpy.h	/^template <typename T> struct array_info_scalar {$/;"	s
array_iterator	src/pybind11/include/pybind11/numpy.h	/^using array_iterator = typename std::add_pointer<T>::type;$/;"	t	typeref:typename:std::add_pointer<T>::type
array_proxy	src/pybind11/include/pybind11/numpy.h	/^inline PyArray_Proxy* array_proxy(void* ptr) {$/;"	f	typeref:typename:PyArray_Proxy *
array_proxy	src/pybind11/include/pybind11/numpy.h	/^inline const PyArray_Proxy* array_proxy(const void* ptr) {$/;"	f	typeref:typename:const PyArray_Proxy *
array_t	src/pybind11/include/pybind11/numpy.h	/^    array_t() : array(0, static_cast<const T *>(nullptr)) {}$/;"	f	class:array_t
array_t	src/pybind11/include/pybind11/numpy.h	/^    array_t(ShapeContainer shape, StridesContainer strides, const T *ptr = nullptr, handle base /;"	f	class:array_t
array_t	src/pybind11/include/pybind11/numpy.h	/^    array_t(const object &o) : array(raw_array_t(o.ptr()), stolen_t{}) {$/;"	f	class:array_t
array_t	src/pybind11/include/pybind11/numpy.h	/^    array_t(handle h, bool is_borrowed) : array(raw_array_t(h.ptr()), stolen_t{}) {$/;"	f	class:array_t	typeref:typename:PYBIND11_DEPRECATED ("")
array_t	src/pybind11/include/pybind11/numpy.h	/^    array_t(handle h, borrowed_t) : array(h, borrowed_t{}) { }$/;"	f	class:array_t
array_t	src/pybind11/include/pybind11/numpy.h	/^    array_t(handle h, stolen_t) : array(h, stolen_t{}) { }$/;"	f	class:array_t
array_t	src/pybind11/include/pybind11/numpy.h	/^    array_t(private_ctor, ShapeContainer &&shape, StridesContainer &&strides, const T *ptr, hand/;"	f	class:array_t
array_t	src/pybind11/include/pybind11/numpy.h	/^    explicit array_t(ShapeContainer shape, const T *ptr = nullptr, handle base = handle())$/;"	f	class:array_t
array_t	src/pybind11/include/pybind11/numpy.h	/^    explicit array_t(const buffer_info& info) : array(info) { }$/;"	f	class:array_t
array_t	src/pybind11/include/pybind11/numpy.h	/^    explicit array_t(size_t count, const T *ptr = nullptr, handle base = handle())$/;"	f	class:array_t
array_t	src/pybind11/include/pybind11/numpy.h	/^template <typename T, int ExtraFlags = array::forcecast> class array_t : public array {$/;"	c
arrow_proxy	src/pybind11/include/pybind11/pytypes.h	/^    arrow_proxy(T &&value) : value(std::move(value)) { }$/;"	f	struct:arrow_proxy
arrow_proxy	src/pybind11/include/pybind11/pytypes.h	/^struct arrow_proxy {$/;"	s
as_unsigned	src/pybind11/include/pybind11/pytypes.h	/^Unsigned as_unsigned(PyObject *o) {$/;"	f
assert_equal	src/pybind11/tests/test_numpy_dtypes.py	/^def assert_equal(actual, expected_data, expected_dtype):$/;"	f
assert_equal_ref	src/pybind11/tests/test_eigen.py	/^def assert_equal_ref(mat):$/;"	f
assert_keeps_alive	src/pybind11/tests/test_eigen.py	/^def assert_keeps_alive(cl, method, *args):$/;"	f
assert_references	src/pybind11/tests/test_numpy_array.py	/^    def assert_references(a, b, base=None):$/;"	f	function:test_wrap	file:
assert_sparse_equal_ref	src/pybind11/tests/test_eigen.py	/^def assert_sparse_equal_ref(sparse_mat):$/;"	f
assign_both	src/pybind11/tests/test_eigen.py	/^def assign_both(a1, a2, r, c, v):$/;"	f
assign_read_callback	src/elka_comm/qurt/snapdragon_uart_devices.cpp	/^int uart::UARTPort::assign_read_callback() {$/;"	f	class:uart::UARTPort	typeref:typename:int
assign_serial_read_callback	src/elka_comm/qurt/basic_uart.cpp	/^int assign_serial_read_callback(int fd, int port_num) {$/;"	f	typeref:typename:int
at	src/pybind11/include/pybind11/numpy.h	/^    template<typename... Ix> const T& at(Ix... index) const {$/;"	f	class:array_t	typeref:typename:const T &
at_t	src/pybind11/tests/test_numpy_array.cpp	/^template<typename... Ix> ssize_t at_t(const arr_t& a, Ix... idx) { return a.at(idx...); }$/;"	f	typeref:typename:ssize_t
attr	src/pybind11/include/pybind11/pytypes.h	/^template <typename D> obj_attr_accessor object_api<D>::attr(handle key) const {$/;"	f	class:object_api	typeref:typename:obj_attr_accessor
attr	src/pybind11/include/pybind11/pytypes.h	/^template <typename D> str_attr_accessor object_api<D>::attr(const char *key) const {$/;"	f	class:object_api	typeref:typename:str_attr_accessor
attr_char	src/pybind11/tests/test_pytypes.py	/^        attr_char = 2$/;"	v	class:test_accessors.SubTestObject
attr_obj	src/pybind11/tests/test_pytypes.py	/^        attr_obj = 1$/;"	v	class:test_accessors.SubTestObject
author	src/pybind11/docs/conf.py	/^author = 'Wenzel Jakob'$/;"	v
automatic	src/pybind11/include/pybind11/common.h	/^    automatic = 0,$/;"	e	enum:uint8_t
automatic_reference	src/pybind11/include/pybind11/common.h	/^    automatic_reference,$/;"	e	enum:uint8_t
auxiliaries	src/pybind11/tests/test_numpy_array.cpp	/^template <typename T, typename T2> py::handle auxiliaries(T &&r, T2 &&r2) {$/;"	f	typeref:typename:py::handle
availability	src/pybind11/tools/clang/cindex.py	/^    def availability(self):$/;"	m	class:CompletionString
availabilityKinds	src/pybind11/tools/clang/cindex.py	/^availabilityKinds = {$/;"	v
b	src/pybind11/tests/test_eigen.cpp	/^    Eigen::Matrix4d b = Eigen::Matrix4d::Identity();$/;"	m	struct:CustomOperatorNew	typeref:typename:Eigen::Matrix4d	file:
b	src/pybind11/tests/test_multiple_inheritance.cpp	/^struct I801B2 { int b = 2; virtual ~I801B2() = default; };$/;"	m	struct:I801B2	typeref:typename:int	file:
b	src/pybind11/tests/test_numpy_dtypes.cpp	/^    char b;$/;"	m	struct:TrailingPaddingStruct	typeref:typename:char	file:
b	src/pybind11/tests/test_numpy_dtypes.cpp	/^    int32_t b[2];$/;"	m	struct:ArrayStruct	typeref:typename:int32_t[2]	file:
b	src/pybind11/tests/test_numpy_dtypes.cpp	/^    std::array<char, 3> b;$/;"	m	struct:StringStruct	typeref:typename:std::array<char,3>	file:
b	src/pybind11/tests/test_operator_overloading.cpp	/^    NestB b;$/;"	m	struct:NestC	typeref:typename:NestB	file:
bad_args1	src/pybind11/tests/test_kwargs_and_defaults.cpp	/^void bad_args1(py::args, int) {}$/;"	f	typeref:typename:void
bad_args2	src/pybind11/tests/test_kwargs_and_defaults.cpp	/^void bad_args2(py::kwargs, int) {}$/;"	f	typeref:typename:void
bad_args3	src/pybind11/tests/test_kwargs_and_defaults.cpp	/^void bad_args3(py::kwargs, py::args) {}$/;"	f	typeref:typename:void
bad_args4	src/pybind11/tests/test_kwargs_and_defaults.cpp	/^void bad_args4(py::args, int, py::kwargs) {}$/;"	f	typeref:typename:void
bad_args5	src/pybind11/tests/test_kwargs_and_defaults.cpp	/^void bad_args5(py::args, py::kwargs, int) {}$/;"	f	typeref:typename:void
bad_args6	src/pybind11/tests/test_kwargs_and_defaults.cpp	/^void bad_args6(py::args, py::args) {}$/;"	f	typeref:typename:void
bad_args7	src/pybind11/tests/test_kwargs_and_defaults.cpp	/^void bad_args7(py::kwargs, py::kwargs) {}$/;"	f	typeref:typename:void
bad_next_call	src/pybind11/tests/test_sequences_and_iterators.py	/^    def bad_next_call():$/;"	f	function:test_python_iterator_in_cpp	file:
bar	src/pybind11/tests/test_multiple_inheritance.cpp	/^    int bar() { return i; }$/;"	f	struct:Base2	typeref:typename:int	file:
bar	src/pybind11/tests/test_multiple_inheritance.cpp	/^    int bar() { return i; }$/;"	f	struct:Base2a	typeref:typename:int	file:
bar	src/pybind11/tests/test_multiple_inheritance.py	/^        def bar(self):$/;"	m	class:test_multiple_inheritance_mix2.Base2
bare_msg_type	tools/genmsg/src/genmsg/msgs.py	/^def bare_msg_type(msg_type):$/;"	f
bare_name	tools/px_generate_uorb_topic_helper.py	/^def bare_name(msg_type):$/;"	f
bare_type	tools/genmsg/scripts/genmsg_check_deps.py	/^    bare_type = bare_msg_type(unresolved_type)$/;"	v
bark	src/pybind11/tests/test_class.cpp	/^        std::string bark() const { return "Woof!"; }$/;"	f	class:TEST_SUBMODULE::Dog	typeref:typename:std::string	file:
base	src/pybind11/include/pybind11/attr.h	/^    base() { }$/;"	f	struct:base	typeref:typename:PYBIND11_DEPRECATED ("")
base	src/pybind11/include/pybind11/attr.h	/^template <typename T> struct base {$/;"	s
base	src/pybind11/include/pybind11/cast.h	/^    using base = type_caster_base<type>;$/;"	t	struct:copyable_holder_caster	typeref:typename:type_caster_base<type>
base	src/pybind11/include/pybind11/numpy.h	/^    PyObject *base;$/;"	m	struct:PyArray_Proxy	typeref:typename:PyObject *
base	src/pybind11/include/pybind11/numpy.h	/^    PyObject *base;$/;"	m	struct:PyVoidScalarObject_Proxy	typeref:typename:PyObject *
base	src/pybind11/include/pybind11/numpy.h	/^    object base() const {$/;"	f	class:array	typeref:typename:object
base_descr	src/pybind11/include/pybind11/numpy.h	/^    using base_descr = npy_format_descriptor<typename array_info<T>::type>;$/;"	t	struct:npy_format_descriptor	typeref:typename:npy_format_descriptor<typename array_info<T>::type>
base_descr	src/pybind11/include/pybind11/numpy.h	/^    using base_descr = npy_format_descriptor<typename std::underlying_type<T>::type>;$/;"	t	struct:npy_format_descriptor	typeref:typename:npy_format_descriptor<typename std::underlying_type<T>::type>
bases	src/pybind11/include/pybind11/attr.h	/^    list bases;$/;"	m	struct:type_record	typeref:typename:list
basic_attr	src/pybind11/tests/test_pytypes.py	/^        basic_attr = 1$/;"	v	class:test_accessors.TestObject
begin	src/pybind11/include/pybind11/cast.h	/^    iterator begin() { return iterator(inst, &tinfo); }$/;"	f	struct:values_and_holders	typeref:typename:iterator
begin	src/pybind11/include/pybind11/pytypes.h	/^    detail::dict_iterator begin() const { return {*this, 0}; }$/;"	f	class:dict	typeref:typename:detail::dict_iterator
begin	src/pybind11/include/pybind11/pytypes.h	/^    detail::list_iterator begin() const { return {*this, 0}; }$/;"	f	class:list	typeref:typename:detail::list_iterator
begin	src/pybind11/include/pybind11/pytypes.h	/^    detail::sequence_iterator begin() const { return {*this, 0}; }$/;"	f	class:sequence	typeref:typename:detail::sequence_iterator
begin	src/pybind11/include/pybind11/pytypes.h	/^    detail::tuple_iterator begin() const { return {*this, 0}; }$/;"	f	class:tuple	typeref:typename:detail::tuple_iterator
begin	src/pybind11/include/pybind11/pytypes.h	/^template <typename D> iterator object_api<D>::begin() const { return iter(derived()); }$/;"	f	class:object_api
begin	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    const float *begin() const { return m_data; }$/;"	f	class:Sequence	typeref:typename:const float *	file:
begin	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    const std::pair<int, int>* begin() const { return data_.data(); }$/;"	f	class:IntPairs	typeref:typename:const std::pair<int,int> *	file:
begin_end	src/pybind11/tests/test_pytypes.py	/^        begin_end = [1, 2, 3]$/;"	v	class:test_accessors.TestObject
bind_ConstructorStats	src/pybind11/tests/pybind11_tests.cpp	/^void bind_ConstructorStats(py::module &m) {$/;"	f	typeref:typename:void
block	src/pybind11/tests/test_eigen.cpp	/^        Eigen::Block<Eigen::MatrixXd> block(int r, int c, int nrow, int ncol) { return mat.block/;"	f	class:__anon898d062d0102::ReturnTester	typeref:typename:Eigen::Block<Eigen::MatrixXd>	file:
blockConst	src/pybind11/tests/test_eigen.cpp	/^        Eigen::Block<const Eigen::MatrixXd> blockConst(int r, int c, int nrow, int ncol) const {/;"	f	class:__anon898d062d0102::ReturnTester	typeref:typename:Eigen::Block<const Eigen::MatrixXd>	file:
bool_	src/pybind11/include/pybind11/pytypes.h	/^    bool_() : object(Py_False, borrowed_t{}) { }$/;"	f	class:bool_	typeref:typename:PYBIND11_OBJECT_CVT (bool_,object,PyBool_Check,raw_bool)
bool_	src/pybind11/include/pybind11/pytypes.h	/^    bool_(bool value) : object(value ? Py_True : Py_False, borrowed_t{}) { }$/;"	f	class:bool_
bool_	src/pybind11/include/pybind11/pytypes.h	/^class bool_ : public object {$/;"	c
bool_	src/pybind11/tests/test_numpy_dtypes.cpp	/^    bool bool_;$/;"	m	struct:PartialStruct	typeref:typename:bool	file:
bool_	src/pybind11/tests/test_numpy_dtypes.cpp	/^    bool bool_;$/;"	m	struct:SimpleStruct	typeref:typename:bool	file:
bool_constant	src/pybind11/include/pybind11/common.h	/^template <bool B> using bool_constant = std::integral_constant<bool, B>;$/;"	t	typeref:typename:std::integral_constant<bool,B>
bools	src/pybind11/include/pybind11/common.h	/^template <bool...> struct bools {};$/;"	s
borrowed_t	src/pybind11/include/pybind11/pytypes.h	/^    struct borrowed_t { };$/;"	s	class:object
breathe_default_project	src/pybind11/docs/conf.py	/^breathe_default_project = 'pybind11'$/;"	v
breathe_domain_by_extension	src/pybind11/docs/conf.py	/^breathe_domain_by_extension = {'h': 'cpp'}$/;"	v
breathe_projects	src/pybind11/docs/conf.py	/^breathe_projects = {'pybind11': '.build\/doxygenxml\/'}$/;"	v
briefComment	src/pybind11/tools/clang/cindex.py	/^    def briefComment(self):$/;"	m	class:CompletionString
brief_comment	src/pybind11/tools/clang/cindex.py	/^    def brief_comment(self):$/;"	m	class:Cursor
broadcast	src/pybind11/include/pybind11/numpy.h	/^broadcast_trivial broadcast(const std::array<buffer_info, N> &buffers, ssize_t &ndim, std::vecto/;"	f	typeref:typename:broadcast_trivial
broadcast_msg	src/elka_comm/common/elka.h	/^inline bool broadcast_msg(dev_id_t &rcv_id) {$/;"	f	typeref:typename:bool
broadcast_msg	src/elka_comm/common/elka.h	/^inline bool broadcast_msg(msg_id_t &msg_id) {$/;"	f	typeref:typename:bool
broadcast_trivial	src/pybind11/include/pybind11/numpy.h	/^enum class broadcast_trivial { non_trivial, c_trivial, f_trivial };$/;"	g
buffer	src/pybind11/include/pybind11/pytypes.h	/^        char *buffer;$/;"	m	class:bytes	typeref:typename:char *
buffer	src/pybind11/include/pybind11/pytypes.h	/^        char *buffer;$/;"	m	class:str	typeref:typename:char *
buffer	src/pybind11/include/pybind11/pytypes.h	/^class buffer : public object {$/;"	c
buffer_front_type	src/elka_comm/common/elka_comm.cpp	/^uint8_t elka::SerialBuffer::buffer_front_type() {$/;"	f	class:elka::SerialBuffer	typeref:typename:uint8_t
buffer_info	src/pybind11/include/pybind11/buffer_info.h	/^    buffer_info() { }$/;"	f	struct:buffer_info
buffer_info	src/pybind11/include/pybind11/buffer_info.h	/^    buffer_info(T *ptr, detail::any_container<ssize_t> shape_in, detail::any_container<ssize_t> /;"	f	struct:buffer_info
buffer_info	src/pybind11/include/pybind11/buffer_info.h	/^    buffer_info(T *ptr, ssize_t size)$/;"	f	struct:buffer_info
buffer_info	src/pybind11/include/pybind11/buffer_info.h	/^    buffer_info(buffer_info &&other) {$/;"	f	struct:buffer_info
buffer_info	src/pybind11/include/pybind11/buffer_info.h	/^    buffer_info(private_ctr_tag, void *ptr, ssize_t itemsize, const std::string &format, ssize_t/;"	f	struct:buffer_info
buffer_info	src/pybind11/include/pybind11/buffer_info.h	/^    buffer_info(void *ptr, ssize_t itemsize, const std::string &format, ssize_t ndim,$/;"	f	struct:buffer_info
buffer_info	src/pybind11/include/pybind11/buffer_info.h	/^    buffer_info(void *ptr, ssize_t itemsize, const std::string &format, ssize_t size)$/;"	f	struct:buffer_info
buffer_info	src/pybind11/include/pybind11/buffer_info.h	/^    explicit buffer_info(Py_buffer *view, bool ownview = true)$/;"	f	struct:buffer_info
buffer_info	src/pybind11/include/pybind11/buffer_info.h	/^struct buffer_info {$/;"	s
buffer_protocol	src/pybind11/include/pybind11/attr.h	/^    bool buffer_protocol : 1;$/;"	m	struct:type_record	typeref:typename:bool:1
buffer_protocol	src/pybind11/include/pybind11/attr.h	/^struct buffer_protocol { };$/;"	s
buffer_to_dtype	src/pybind11/tests/test_numpy_dtypes.cpp	/^py::dtype buffer_to_dtype(py::buffer& buf) {$/;"	f	typeref:typename:py::dtype
buffers	src/pybind11/tests/test_buffers.cpp	/^test_initializer buffers([](py::module &m) {$/;"	v	typeref:typename:test_initializer
builtin_exception	src/pybind11/include/pybind11/common.h	/^class builtin_exception : public std::runtime_error {$/;"	c
byte_offset	src/pybind11/include/pybind11/numpy.h	/^    template<typename... Ix> ssize_t byte_offset(Ix... index) const {$/;"	f	class:array	typeref:typename:ssize_t
byte_offset_unsafe	src/pybind11/include/pybind11/numpy.h	/^ssize_t byte_offset_unsafe(const Strides &strides, ssize_t i, Ix... index) {$/;"	f	typeref:typename:ssize_t
byte_offset_unsafe	src/pybind11/include/pybind11/numpy.h	/^template <ssize_t Dim = 0, typename Strides> ssize_t byte_offset_unsafe(const Strides &) { retur/;"	f	typeref:typename:ssize_t
byteorder	src/pybind11/include/pybind11/numpy.h	/^    char byteorder;$/;"	m	struct:PyArrayDescr_Proxy	typeref:typename:char
bytes	src/pybind11/include/pybind11/pytypes.h	/^    bytes(const char *c = "")$/;"	f	class:bytes	typeref:typename:PYBIND11_OBJECT (bytes,object,PYBIND11_BYTES_CHECK)
bytes	src/pybind11/include/pybind11/pytypes.h	/^    bytes(const char *c, size_t n)$/;"	f	class:bytes
bytes	src/pybind11/include/pybind11/pytypes.h	/^    bytes(const std::string &s) : bytes(s.data(), s.size()) { }$/;"	f	class:bytes
bytes	src/pybind11/include/pybind11/pytypes.h	/^class bytes : public object {$/;"	c
bytes	src/pybind11/include/pybind11/pytypes.h	/^inline bytes::bytes(const pybind11::str &s) {$/;"	f	class:bytes
c	src/pybind11/include/pybind11/common.h	/^    static constexpr const char c = "?bBhHiIqQfdg"[detail::is_fmt_numeric<T>::index];$/;"	m	struct:format_descriptor	typeref:typename:constexpr const char
c	src/pybind11/include/pybind11/complex.h	/^    static constexpr const char c = format_descriptor<T>::c;$/;"	m	struct:format_descriptor	typeref:typename:constexpr const char
c	src/pybind11/tests/test_multiple_inheritance.cpp	/^struct I801B3 { int c = 3; virtual ~I801B3() = default; };$/;"	m	struct:I801B3	typeref:typename:int	file:
c	src/pybind11/tests/test_numpy_dtypes.cpp	/^    std::array<uint8_t, 3> c;$/;"	m	struct:ArrayStruct	typeref:typename:std::array<uint8_t,3>	file:
c_object_p	src/pybind11/tools/clang/cindex.py	/^c_object_p = POINTER(c_void_p)$/;"	v
c_strides	src/pybind11/include/pybind11/numpy.h	/^    static std::vector<ssize_t> c_strides(const std::vector<ssize_t> &shape, ssize_t itemsize) {$/;"	f	class:array	typeref:typename:std::vector<ssize_t>
c_style	src/pybind11/include/pybind11/numpy.h	/^        c_style = detail::npy_api::NPY_ARRAY_C_CONTIGUOUS_,$/;"	e	enum:array::__anonc556634c0303
c_trivial	src/pybind11/include/pybind11/numpy.h	/^enum class broadcast_trivial { non_trivial, c_trivial, f_trivial };$/;"	e	enum:broadcast_trivial
cache	src/pybind11/include/pybind11/pytypes.h	/^    mutable object cache;$/;"	m	class:accessor	typeref:typename:object
call	src/pybind11/include/pybind11/cast.h	/^    enable_if_t<std::is_void<Return>::value, void_type> call(Func &&f) && {$/;"	f	class:argument_loader	typeref:typename:enable_if_t<std::is_void<Return>::value,void_type>
call	src/pybind11/include/pybind11/cast.h	/^    object call(PyObject *ptr) const {$/;"	f	class:simple_collector	typeref:typename:object
call	src/pybind11/include/pybind11/cast.h	/^    object call(PyObject *ptr) const {$/;"	f	class:unpacking_collector	typeref:typename:object
call	src/pybind11/include/pybind11/cast.h	/^object object_api<Derived>::call(Args &&...args) const {$/;"	f	class:object_api	typeref:typename:object
call	src/pybind11/include/pybind11/stl.h	/^    static auto call(Args &&...args) -> decltype(visit(std::forward<Args>(args)...)) {$/;"	f	struct:visit_helper	typeref:typename:decltype (visit (std::forward<Args> (args)...))
call_guard	src/pybind11/include/pybind11/attr.h	/^struct call_guard<T, Ts...> {$/;"	s
call_guard	src/pybind11/include/pybind11/attr.h	/^struct call_guard<T> {$/;"	s
call_guard	src/pybind11/include/pybind11/attr.h	/^template <> struct call_guard<> { using type = detail::void_type; };$/;"	s
call_guard	src/pybind11/tests/test_call_policies.cpp	/^test_initializer call_guard([](py::module &pm) {$/;"	v	typeref:typename:test_initializer
call_impl	src/pybind11/include/pybind11/cast.h	/^    Return call_impl(Func &&f, index_sequence<Is...>, Guard &&) {$/;"	f	class:argument_loader	typeref:typename:Return
call_operator_delete	src/pybind11/include/pybind11/pybind11.h	/^inline void call_operator_delete(void *p) { ::operator delete(p); }$/;"	f	typeref:typename:void
call_operator_delete	src/pybind11/include/pybind11/pybind11.h	/^void call_operator_delete(T *p) { T::operator delete(p); }$/;"	f	typeref:typename:> void
call_type	src/pybind11/include/pybind11/numpy.h	/^    using call_type = remove_reference_t<T>;$/;"	t	struct:vectorize_arg	typeref:typename:remove_reference_t<T>
callbacks	src/pybind11/tests/test_callbacks.cpp	/^test_initializer callbacks([](py::module &m) {$/;"	v	typeref:typename:test_initializer
callbacks	src/pybind11/tools/clang/cindex.py	/^callbacks = {}$/;"	v
canonical	src/pybind11/tools/clang/cindex.py	/^    def canonical(self):$/;"	m	class:Cursor
capsule	src/pybind11/include/pybind11/pytypes.h	/^    capsule(PyObject *ptr, bool is_borrowed) : object(is_borrowed ? object(ptr, borrowed_t{}) : /;"	f	class:capsule
capsule	src/pybind11/include/pybind11/pytypes.h	/^    capsule(const void *value, void (*destruct)(PyObject *))$/;"	f	class:capsule	typeref:typename:PYBIND11_DEPRECATED ("")
capsule	src/pybind11/include/pybind11/pytypes.h	/^    capsule(const void *value, void (*destructor)(void *)) {$/;"	f	class:capsule
capsule	src/pybind11/include/pybind11/pytypes.h	/^    capsule(void (*destructor)()) {$/;"	f	class:capsule
capsule	src/pybind11/include/pybind11/pytypes.h	/^    explicit capsule(const void *value, const char *name = nullptr, void (*destructor)(PyObject /;"	f	class:capsule
capsule	src/pybind11/include/pybind11/pytypes.h	/^class capsule : public object {$/;"	c
capture	src/pybind11/include/pybind11/functional.h	/^                struct capture { function_type f; };$/;"	s	function:type_caster::load
capture	src/pybind11/include/pybind11/pybind11.h	/^        struct capture { Func func; };$/;"	s	function:class_::def_buffer
capture	src/pybind11/include/pybind11/pybind11.h	/^        struct capture { detail::remove_reference_t<Func> f; };$/;"	s	function:cpp_function::initialize
capture	src/pybind11/tests/conftest.py	/^def capture(capsys):$/;"	f
cast	src/elka_comm/common/elka_comm.cpp	/^		static handle cast(inty src, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	struct:pybind11::detail::type_caster	typeref:typename:handle	file:
cast	src/pybind11/include/pybind11/cast.h	/^    PYBIND11_NOINLINE static handle cast(const void *_src, return_value_policy policy, handle pa/;"	f	class:type_caster_generic	typeref:typename:PYBIND11_NOINLINE handle
cast	src/pybind11/include/pybind11/cast.h	/^    static handle cast(CharT src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle
cast	src/pybind11/include/pybind11/cast.h	/^    static handle cast(T &&src, return_value_policy policy, handle parent) {$/;"	f	class:tuple_caster	typeref:typename:handle
cast	src/pybind11/include/pybind11/cast.h	/^    static handle cast(T src, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	struct:type_caster	typeref:typename:handle
cast	src/pybind11/include/pybind11/cast.h	/^    static handle cast(T, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	struct:void_caster	typeref:typename:handle
cast	src/pybind11/include/pybind11/cast.h	/^    static handle cast(bool src, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	class:type_caster	typeref:typename:handle
cast	src/pybind11/include/pybind11/cast.h	/^    static handle cast(const CharT *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle
cast	src/pybind11/include/pybind11/cast.h	/^    static handle cast(const StringType &src, return_value_policy \/* policy *\/, handle \/* par/;"	f	struct:string_caster	typeref:typename:handle
cast	src/pybind11/include/pybind11/cast.h	/^    static handle cast(const handle &src, return_value_policy \/* policy *\/, handle \/* parent /;"	f	struct:pyobject_caster	typeref:typename:handle
cast	src/pybind11/include/pybind11/cast.h	/^    static handle cast(const holder_type &src, return_value_policy, handle) {$/;"	f	struct:copyable_holder_caster	typeref:typename:handle
cast	src/pybind11/include/pybind11/cast.h	/^    static handle cast(const itype &src, return_value_policy policy, handle parent) {$/;"	f	class:type_caster_base	typeref:typename:handle
cast	src/pybind11/include/pybind11/cast.h	/^    static handle cast(const itype *src, return_value_policy policy, handle parent) {$/;"	f	class:type_caster_base	typeref:typename:handle
cast	src/pybind11/include/pybind11/cast.h	/^    static handle cast(const std::reference_wrapper<type> &src, return_value_policy policy, hand/;"	f	class:type_caster	typeref:typename:handle
cast	src/pybind11/include/pybind11/cast.h	/^    static handle cast(const void *ptr, return_value_policy \/* policy *\/, handle \/* parent *\//;"	f	class:type_caster	typeref:typename:handle
cast	src/pybind11/include/pybind11/cast.h	/^    static handle cast(holder_type &&src, return_value_policy, handle) {$/;"	f	struct:move_only_holder_caster	typeref:typename:handle
cast	src/pybind11/include/pybind11/cast.h	/^    static handle cast(itype &&src, return_value_policy, handle parent) {$/;"	f	class:type_caster_base	typeref:typename:handle
cast	src/pybind11/include/pybind11/cast.h	/^T cast(const handle &handle) { return T(reinterpret_borrow<object>(handle)); }$/;"	f	typeref:typename:T
cast	src/pybind11/include/pybind11/cast.h	/^template <> inline void handle::cast() const { return; }$/;"	f	class:handle	typeref:typename:void
cast	src/pybind11/include/pybind11/cast.h	/^template <> inline void object::cast() && { return; }$/;"	f	class:object	typeref:typename:void
cast	src/pybind11/include/pybind11/cast.h	/^template <> inline void object::cast() const & { return; }$/;"	f	class:object	typeref:typename:void
cast	src/pybind11/include/pybind11/cast.h	/^template <typename T> T handle::cast() const { return pybind11::cast<T>(*this); }$/;"	f	class:handle	typeref:typename:T
cast	src/pybind11/include/pybind11/cast.h	/^template <typename T> T object::cast() && { return pybind11::cast<T>(std::move(*this)); }$/;"	f	class:object	typeref:typename:T
cast	src/pybind11/include/pybind11/cast.h	/^template <typename T> T object::cast() const & { return pybind11::cast<T>(*this); }$/;"	f	class:object	typeref:typename:T
cast	src/pybind11/include/pybind11/cast.h	/^template <typename T> detail::enable_if_t<detail::move_always<T>::value, T> cast(object &&object/;"	f	typeref:typename:detail::enable_if_t<detail::move_always<T>::value,T>
cast	src/pybind11/include/pybind11/cast.h	/^template <typename T> detail::enable_if_t<detail::move_if_unreferenced<T>::value, T> cast(object/;"	f	typeref:typename:detail::enable_if_t<detail::move_if_unreferenced<T>::value,T>
cast	src/pybind11/include/pybind11/cast.h	/^template <typename T> detail::enable_if_t<detail::move_never<T>::value, T> cast(object &&object)/;"	f	typeref:typename:detail::enable_if_t<detail::move_never<T>::value,T>
cast	src/pybind11/include/pybind11/chrono.h	/^    static handle cast(const std::chrono::time_point<std::chrono::system_clock, Duration> &src, /;"	f	class:type_caster	typeref:typename:handle
cast	src/pybind11/include/pybind11/chrono.h	/^    static handle cast(const type &src, return_value_policy \/* policy *\/, handle \/* parent *\//;"	f	class:duration_caster	typeref:typename:handle
cast	src/pybind11/include/pybind11/complex.h	/^    static handle cast(const std::complex<T> &src, return_value_policy \/* policy *\/, handle \//;"	f	class:type_caster	typeref:typename:handle
cast	src/pybind11/include/pybind11/eigen.h	/^    static handle cast(Type &&src, return_value_policy \/* policy *\/, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle
cast	src/pybind11/include/pybind11/eigen.h	/^    static handle cast(Type &src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle
cast	src/pybind11/include/pybind11/eigen.h	/^    static handle cast(Type *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle
cast	src/pybind11/include/pybind11/eigen.h	/^    static handle cast(const MapType &src, return_value_policy policy, handle parent) {$/;"	f	struct:eigen_map_caster	typeref:typename:handle
cast	src/pybind11/include/pybind11/eigen.h	/^    static handle cast(const Type &&src, return_value_policy \/* policy *\/, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle
cast	src/pybind11/include/pybind11/eigen.h	/^    static handle cast(const Type &src, return_value_policy \/* policy *\/, handle \/* parent *\//;"	f	struct:type_caster	typeref:typename:handle
cast	src/pybind11/include/pybind11/eigen.h	/^    static handle cast(const Type &src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle
cast	src/pybind11/include/pybind11/eigen.h	/^    static handle cast(const Type *src, return_value_policy policy, handle parent) { return cast/;"	f	struct:type_caster	typeref:typename:handle
cast	src/pybind11/include/pybind11/eigen.h	/^    static handle cast(const Type *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle
cast	src/pybind11/include/pybind11/functional.h	/^    static handle cast(Func &&f_, return_value_policy policy, handle \/* parent *\/) {$/;"	f	struct:type_caster	typeref:typename:handle
cast	src/pybind11/include/pybind11/numpy.h	/^    static handle cast(const handle &src, return_value_policy \/* policy *\/, handle \/* parent /;"	f	struct:pyobject_caster	typeref:typename:handle
cast	src/pybind11/include/pybind11/pytypes.h	/^    template <typename T> T cast() const { return get_cache().template cast<T>(); }$/;"	f	class:accessor	typeref:typename:T
cast	src/pybind11/include/pybind11/stl.h	/^    static handle cast(T &&src, return_value_policy policy, handle parent) {$/;"	f	struct:array_caster	typeref:typename:handle
cast	src/pybind11/include/pybind11/stl.h	/^    static handle cast(T &&src, return_value_policy policy, handle parent) {$/;"	f	struct:list_caster	typeref:typename:handle
cast	src/pybind11/include/pybind11/stl.h	/^    static handle cast(T &&src, return_value_policy policy, handle parent) {$/;"	f	struct:map_caster	typeref:typename:handle
cast	src/pybind11/include/pybind11/stl.h	/^    static handle cast(T &&src, return_value_policy policy, handle parent) {$/;"	f	struct:set_caster	typeref:typename:handle
cast	src/pybind11/include/pybind11/stl.h	/^    static handle cast(T_ &&src, return_value_policy policy, handle parent) {$/;"	f	struct:optional_caster	typeref:typename:handle
cast	src/pybind11/include/pybind11/stl.h	/^    static handle cast(Variant &&src, return_value_policy policy, handle parent) {$/;"	f	struct:variant_caster	typeref:typename:handle
cast	src/pybind11/tests/pybind11_tests.h	/^    static handle cast(RValueCaster &&, return_value_policy, handle) { return py::str("rvalue")./;"	f	class:type_caster	typeref:typename:handle
cast	src/pybind11/tests/pybind11_tests.h	/^    static handle cast(const RValueCaster &, return_value_policy, handle) { return py::str("lval/;"	f	class:type_caster	typeref:typename:handle
cast	src/pybind11/tests/test_copy_move.cpp	/^    static handle cast(const CopyOnlyInt &m, return_value_policy r, handle p) { return pybind11:/;"	f	struct:pybind11::detail::type_caster	typeref:typename:handle	file:
cast	src/pybind11/tests/test_copy_move.cpp	/^    static handle cast(const CopyOnlyInt *src, return_value_policy policy, handle parent) {$/;"	f	struct:pybind11::detail::type_caster	typeref:typename:handle	file:
cast	src/pybind11/tests/test_copy_move.cpp	/^    static handle cast(const MoveOnlyInt &m, return_value_policy r, handle p) { return pybind11:/;"	f	struct:pybind11::detail::type_caster	typeref:typename:handle	file:
cast	src/pybind11/tests/test_copy_move.cpp	/^    static handle cast(const MoveOrCopyInt &m, return_value_policy r, handle p) { return pybind1/;"	f	struct:pybind11::detail::type_caster	typeref:typename:handle	file:
cast	src/pybind11/tests/test_methods_and_attributes.cpp	/^    static handle cast(const ArgAlwaysConverts &, return_value_policy, handle) {$/;"	f	struct:pybind11::detail::type_caster	typeref:typename:handle	file:
cast	src/pybind11/tests/test_methods_and_attributes.cpp	/^    static handle cast(const ArgInspector1 &src, return_value_policy, handle) {$/;"	f	struct:pybind11::detail::type_caster	typeref:typename:handle	file:
cast	src/pybind11/tests/test_methods_and_attributes.cpp	/^    static handle cast(const ArgInspector2 &src, return_value_policy, handle) {$/;"	f	struct:pybind11::detail::type_caster	typeref:typename:handle	file:
cast	src/pybind11/tests/test_methods_and_attributes.cpp	/^    static handle cast(const DestructionTester &, return_value_policy, handle) {$/;"	f	struct:pybind11::detail::type_caster	typeref:typename:handle	file:
cast_error	src/pybind11/include/pybind11/cast.h	/^        throw cast_error("Unable to cast Python instance to C++ rvalue: instance has multiple re/;"	v	typeref:typename:throw
cast_holder	src/pybind11/include/pybind11/cast.h	/^    static handle cast_holder(const itype *src, const void *holder) {$/;"	f	class:type_caster_base	typeref:typename:handle
cast_impl	src/pybind11/include/pybind11/cast.h	/^    static handle cast_impl(T &&src, return_value_policy policy, handle parent, index_sequence<I/;"	f	class:tuple_caster	typeref:typename:handle
cast_impl	src/pybind11/include/pybind11/eigen.h	/^    static handle cast_impl(CType *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle
cast_in	src/pybind11/include/pybind11/pybind11.h	/^        using cast_in = detail::argument_loader<Args...>;$/;"	t	function:cpp_function::initialize	typeref:typename:detail::argument_loader<Args...>
cast_is_temporary_value_reference	src/pybind11/include/pybind11/cast.h	/^template <typename type> using cast_is_temporary_value_reference = bool_constant<$/;"	t
cast_op	src/pybind11/include/pybind11/cast.h	/^cast_op(make_caster<T> &&caster) {$/;"	f	typeref:typename:make_caster<T>::cast_op_type
cast_op	src/pybind11/include/pybind11/cast.h	/^template <typename T> typename make_caster<T>::template cast_op_type<T> cast_op(make_caster<T> &/;"	f	typeref:typename:make_caster<T>::cast_op_type
cast_op_type	src/pybind11/include/pybind11/cast.h	/^    template <typename T> using cast_op_type = cast_op_type<T>;$/;"	t	class:type_caster_base	typeref:typename:cast_op_type<T>
cast_op_type	src/pybind11/include/pybind11/cast.h	/^    template <typename T> using cast_op_type = std::reference_wrapper<type>;$/;"	t	class:type_caster	typeref:typename:std::reference_wrapper<type>
cast_op_type	src/pybind11/include/pybind11/cast.h	/^    template <typename T> using cast_op_type = type;$/;"	t	class:tuple_caster	typeref:typename:type
cast_op_type	src/pybind11/include/pybind11/cast.h	/^    template <typename T> using cast_op_type = void*&;$/;"	t	class:type_caster	typeref:typename:void * &
cast_op_type	src/pybind11/include/pybind11/cast.h	/^    template <typename _T> using cast_op_type = remove_reference_t<pybind11::detail::cast_op_typ/;"	t	struct:type_caster	typeref:typename:remove_reference_t<pybind11::detail::cast_op_type<_T>>
cast_op_type	src/pybind11/include/pybind11/cast.h	/^using cast_op_type =$/;"	t
cast_op_type	src/pybind11/include/pybind11/eigen.h	/^    template <typename T> using cast_op_type = movable_cast_op_type<T>;$/;"	t	struct:type_caster	typeref:typename:movable_cast_op_type<T>
cast_op_type	src/pybind11/include/pybind11/eigen.h	/^    template <typename _T> using cast_op_type = pybind11::detail::cast_op_type<_T>;$/;"	t	struct:type_caster	typeref:typename:pybind11::detail::cast_op_type<_T>
cast_op_type	src/pybind11/include/pybind11/eigen.h	/^    template <typename> using cast_op_type = MapType;$/;"	t	struct:eigen_map_caster	typeref:typename:MapType
cast_op_type	src/pybind11/include/pybind11/eigen.h	/^    template <typename> using cast_op_type = Type;$/;"	t	struct:type_caster	typeref:typename:Type
cast_op_type	src/pybind11/tests/test_copy_move.cpp	/^    template <typename T> using cast_op_type = pybind11::detail::cast_op_type<T>;$/;"	t	struct:pybind11::detail::type_caster	typeref:typename:pybind11::detail::cast_op_type<T>	file:
cast_out	src/pybind11/include/pybind11/pybind11.h	/^        using cast_out = detail::make_caster<$/;"	t	function:cpp_function::initialize	typeref:typename:detail::make_caster<detail::conditional_t<std::is_void<Return>::value,detail::void_type,Return>>
cast_ref	src/pybind11/include/pybind11/cast.h	/^template <typename T> enable_if_t<cast_is_temporary_value_reference<T>::value, T> cast_ref(objec/;"	f	typeref:typename:enable_if_t<cast_is_temporary_value_reference<T>::value,T>
cast_safe	src/pybind11/include/pybind11/cast.h	/^template <typename T> enable_if_t<cast_is_temporary_value_reference<T>::value, T> cast_safe(obje/;"	f	typeref:typename:enable_if_t<cast_is_temporary_value_reference<T>::value,T>
caster_t	src/pybind11/include/pybind11/cast.h	/^    using caster_t = make_caster<type>;$/;"	t	class:type_caster	typeref:typename:make_caster<type>
category_name	src/pybind11/tools/clang/cindex.py	/^    def category_name(self):$/;"	m	class:Diagnostic
category_number	src/pybind11/tools/clang/cindex.py	/^    def category_number(self):$/;"	m	class:Diagnostic
cb_bin_search	src/elka_comm/common/elka.cpp	/^int cb_bin_search(uint16_t el, uint16_t *cb,$/;"	f	typeref:typename:int
cb_insertion_sort	src/elka_comm/common/elka.cpp	/^void cb_insertion_sort(uint16_t *cb, uint16_t cb_end,$/;"	f	typeref:typename:void
cb_push	src/elka_comm/common/elka.cpp	/^void cb_push(uint16_t el, uint16_t *cb,$/;"	f	typeref:typename:void
cdbl	src/pybind11/tests/test_numpy_dtypes.cpp	/^    std::complex<double> cdbl;$/;"	m	struct:ComplexStruct	typeref:typename:std::complex<double>	file:
cflt	src/pybind11/tests/test_numpy_dtypes.cpp	/^    std::complex<float> cflt;$/;"	m	struct:ComplexStruct	typeref:typename:std::complex<float>	file:
change	src/pybind11/tools/libsize.py	/^        change = libsize - oldsize$/;"	v
change_route	src/elka_comm/common/elka_comm.cpp	/^void elka::CommPort::change_route($/;"	f	class:elka::CommPort	typeref:typename:void
change_route	src/elka_comm/common/elka_comm.cpp	/^void elka::CommPort::change_route(dev_id_t &dev,$/;"	f	class:elka::CommPort	typeref:typename:void
changes	src/pybind11/docs/Makefile	/^changes:$/;"	t
changes	tools/genmsg/doc/Makefile	/^changes:$/;"	t
char0_bytes	src/pybind11/include/pybind11/cast.h	/^            size_t char0_bytes = !(v0 & 0x80) ? 1 : \/\/ low bits only: 0-127$/;"	m	struct:type_caster	typeref:typename:size_t
check	src/pybind11/include/pybind11/pytypes.h	/^    bool check() const { return m_ptr != nullptr; }$/;"	f	class:handle	typeref:typename:PYBIND11_DEPRECATED ("")bool
check_	src/pybind11/include/pybind11/numpy.h	/^    static bool check_(handle h) {$/;"	f	class:array_t	typeref:typename:bool
check_ack	src/elka_comm/gnd_station/elka_devices.cpp	/^uint8_t elka::GroundPort::check_ack(struct elka_msg_ack_s &elka_ack) {$/;"	f	class:elka::GroundPort	typeref:typename:uint8_t
check_ack	src/elka_comm/posix/elka_devices.cpp	/^uint8_t elka::PX4Port::check_ack(struct elka_msg_ack_s &elka_ack) {$/;"	f	class:elka::PX4Port	typeref:typename:uint8_t
check_ack	src/elka_comm/qurt/snapdragon_uart_devices.cpp	/^uint8_t uart::UARTPort::check_ack(struct elka_msg_ack_s &elka_ack) {$/;"	f	class:uart::UARTPort	typeref:typename:uint8_t
check_alive	src/elka_comm/common/elka_comm.cpp	/^bool elka::DeviceRoute::check_alive() {$/;"	f	class:elka::DeviceRoute	typeref:typename:bool
check_dev_compatible	src/elka_comm/common/elka_comm.cpp	/^bool elka::CommPort::check_dev_compatible($/;"	f	class:elka::CommPort	typeref:typename:bool
check_dimensions	src/pybind11/include/pybind11/numpy.h	/^    template<typename... Ix> void check_dimensions(Ix... index) const {$/;"	f	class:array	typeref:typename:void
check_dimensions_impl	src/pybind11/include/pybind11/numpy.h	/^    template<typename... Ix> void check_dimensions_impl(ssize_t axis, const ssize_t* shape, ssiz/;"	f	class:array	typeref:typename:void
check_dimensions_impl	src/pybind11/include/pybind11/numpy.h	/^    void check_dimensions_impl(ssize_t, const ssize_t*) const { }$/;"	f	class:array	typeref:typename:void
check_elka_ack	src/elka_comm/common/elka.cpp	/^uint8_t check_elka_ack(struct elka_msg_ack_s &elka_msg_ack,$/;"	f	typeref:typename:uint8_t
check_elka_dev	src/elka_comm/posix/elka_manager.cpp	/^bool elka::Manager::check_elka_dev(int dev_num) {$/;"	f	class:elka::Manager	typeref:typename:bool
check_flags	src/pybind11/include/pybind11/numpy.h	/^inline bool check_flags(const void* ptr, int flag) {$/;"	f	typeref:typename:bool
check_holder_compat	src/pybind11/include/pybind11/cast.h	/^    void check_holder_compat() {$/;"	f	struct:copyable_holder_caster	typeref:typename:void
check_holder_compat	src/pybind11/include/pybind11/cast.h	/^    void check_holder_compat() {}$/;"	f	class:type_caster_generic	typeref:typename:void
check_prop	src/elka_comm/common/elka_comm.cpp	/^bool elka::DeviceRoute::check_prop(dev_prop_t prop) {$/;"	f	class:elka::DeviceRoute	typeref:typename:bool
check_recent_acks	src/elka_comm/common/elka_comm.cpp	/^uint8_t elka::SerialBuffer::check_recent_acks(uint16_t msg_num) {$/;"	f	class:elka::SerialBuffer	typeref:typename:uint8_t
check_route	src/elka_comm/common/elka_comm.cpp	/^bool elka::CommPort::check_route(dev_id_t &d) {$/;"	f	class:elka::CommPort	typeref:typename:bool
check_route_contains	src/elka_comm/common/elka_comm.cpp	/^bool elka::CommPort::check_route_contains(dev_id_t &dst, dev_id_t &el) {$/;"	f	class:elka::CommPort	typeref:typename:bool
check_self	src/pybind11/tests/test_methods_and_attributes.py	/^    def check_self(self):$/;"	f	function:test_static_cls	file:
check_uart_dev	src/elka_comm/qurt/snapdragon_uart_manager.cpp	/^bool uart::Manager::check_uart_dev(uint8_t port_num) {$/;"	f	class:uart::Manager	typeref:typename:bool
check_writeable	src/pybind11/include/pybind11/numpy.h	/^    void check_writeable() const {$/;"	f	class:array	typeref:typename:void
children	src/pybind11/tools/clang/cindex.py	/^    def children(self):$/;"	m	class:Diagnostic
chrono	src/pybind11/tests/test_chrono.cpp	/^test_initializer chrono([] (py::module &m) {$/;"	v	typeref:typename:test_initializer
class_	src/pybind11/include/pybind11/attr.h	/^struct is_method { handle class_; is_method(const handle &c) : class_(c) { } };$/;"	m	struct:is_method	typeref:typename:handle
class_	src/pybind11/include/pybind11/pybind11.h	/^    class_(handle scope, const char *name, const Extra &... extra) {$/;"	f	class:class_	typeref:typename:PYBIND11_OBJECT (class_,generic_type,PyType_Check)
class_	src/pybind11/include/pybind11/pybind11.h	/^class class_ : public detail::generic_type {$/;"	c
clean	Makefile	/^.PHONY clean:$/;"	t
clean	build_elka_data_collection/Makefile	/^clean:$/;"	t
clean	build_elka_data_collection/msg/Makefile	/^clean:$/;"	t
clean	build_elka_data_collection/src/Makefile	/^clean:$/;"	t
clean	build_elka_data_collection/src/elka_comm/common/Makefile	/^clean:$/;"	t
clean	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^clean:$/;"	t
clean	build_elka_data_collection/src/pybind11/Makefile	/^clean:$/;"	t
clean	src/pybind11/docs/Makefile	/^clean:$/;"	t
clean	tools/genmsg/doc/Makefile	/^clean:$/;"	t
clean/fast	build_elka_data_collection/Makefile	/^clean\/fast: clean$/;"	t
clean/fast	build_elka_data_collection/msg/Makefile	/^clean\/fast: clean$/;"	t
clean/fast	build_elka_data_collection/src/Makefile	/^clean\/fast: clean$/;"	t
clean/fast	build_elka_data_collection/src/elka_comm/common/Makefile	/^clean\/fast: clean$/;"	t
clean/fast	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^clean\/fast: clean$/;"	t
clean/fast	build_elka_data_collection/src/pybind11/Makefile	/^clean\/fast: clean$/;"	t
clean_type_id	src/pybind11/include/pybind11/typeid.h	/^PYBIND11_NOINLINE inline void clean_type_id(std::string &name) {$/;"	f	typeref:typename:PYBIND11_NOINLINE void
clear	src/pybind11/include/pybind11/common.h	/^    void clear() { restore(); PyErr_Clear(); }$/;"	f	class:error_already_set	typeref:typename:void
clear	src/pybind11/include/pybind11/pytypes.h	/^    void clear() const { PyDict_Clear(ptr()); }$/;"	f	class:dict	typeref:typename:void
clear	src/pybind11/include/pybind11/pytypes.h	/^    void clear() const { PySet_Clear(m_ptr); }$/;"	f	class:set	typeref:typename:void
clear_contents	src/elka_comm/common/elka_comm.cpp	/^void elka::ElkaBufferMsg::clear_contents() {$/;"	f	class:elka::ElkaBufferMsg	typeref:typename:void
clear_instance	src/pybind11/include/pybind11/class_support.h	/^inline void clear_instance(PyObject *self) {$/;"	f	typeref:typename:void
clear_patients	src/pybind11/include/pybind11/class_support.h	/^inline void clear_patients(PyObject *self) {$/;"	f	typeref:typename:void
clip1	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<clipPath id="clip1">$/;"	i
clip1	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<clipPath id="clip1">$/;"	i
clip2	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<clipPath id="clip2">$/;"	i
clip2	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<clipPath id="clip2">$/;"	i
clip3	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<clipPath id="clip3">$/;"	i
clip3	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<clipPath id="clip3">$/;"	i
clip4	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<clipPath id="clip4">$/;"	i
clip4	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<clipPath id="clip4">$/;"	i
clip5	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<clipPath id="clip5">$/;"	i
clip5	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<clipPath id="clip5">$/;"	i
clip6	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<clipPath id="clip6">$/;"	i
clip6	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<clipPath id="clip6">$/;"	i
clip7	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<clipPath id="clip7">$/;"	i
clip8	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<clipPath id="clip8">$/;"	i
close	src/elka_comm/qurt/snapdragon_uart_devices.cpp	/^int uart::UARTPort::close() {$/;"	f	class:uart::UARTPort	typeref:typename:int
cmake_check_build_system	build_elka_data_collection/Makefile	/^cmake_check_build_system:$/;"	t
cmake_check_build_system	build_elka_data_collection/msg/Makefile	/^cmake_check_build_system:$/;"	t
cmake_check_build_system	build_elka_data_collection/src/Makefile	/^cmake_check_build_system:$/;"	t
cmake_check_build_system	build_elka_data_collection/src/elka_comm/common/Makefile	/^cmake_check_build_system:$/;"	t
cmake_check_build_system	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^cmake_check_build_system:$/;"	t
cmake_check_build_system	build_elka_data_collection/src/pybind11/Makefile	/^cmake_check_build_system:$/;"	t
cmake_force	build_elka_data_collection/Makefile	/^cmake_force:$/;"	t
cmake_force	build_elka_data_collection/msg/Makefile	/^cmake_force:$/;"	t
cmake_force	build_elka_data_collection/src/Makefile	/^cmake_force:$/;"	t
cmake_force	build_elka_data_collection/src/elka_comm/common/Makefile	/^cmake_force:$/;"	t
cmake_force	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^cmake_force:$/;"	t
cmake_force	build_elka_data_collection/src/pybind11/Makefile	/^cmake_force:$/;"	t
cmp_dev_id_t	src/elka_comm/common/elka.h	/^inline int8_t cmp_dev_id_t(dev_id_t d1, dev_id_t d2) {$/;"	f	typeref:typename:int8_t
cmp_dev_prop_t	src/elka_comm/common/elka.h	/^inline int8_t cmp_dev_prop_t(dev_prop_t d1, dev_prop_t d2) {$/;"	f	typeref:typename:int8_t
codeComplete	src/pybind11/tools/clang/cindex.py	/^    def codeComplete(self, path, line, column, unsaved_files=None,$/;"	m	class:TranslationUnit
cols	src/pybind11/include/pybind11/eigen.h	/^        cols = Type::ColsAtCompileTime,$/;"	m	struct:EigenProps	typeref:typename:constexpr EigenIndex
cols	src/pybind11/include/pybind11/eigen.h	/^    EigenIndex rows = 0, cols = 0;$/;"	m	struct:EigenConformable	typeref:typename:EigenIndex
cols	src/pybind11/tests/test_buffers.cpp	/^    ssize_t cols() const { return m_cols; }$/;"	f	class:Matrix	typeref:typename:ssize_t	file:
column	src/pybind11/tools/clang/cindex.py	/^    def column(self):$/;"	m	class:SourceLocation
common_iter	src/pybind11/include/pybind11/numpy.h	/^    using common_iter = common_iterator;$/;"	t	class:multi_array_iterator	typeref:typename:common_iterator
common_iterator	src/pybind11/include/pybind11/numpy.h	/^    common_iterator() : p_ptr(0), m_strides() {}$/;"	f	class:common_iterator
common_iterator	src/pybind11/include/pybind11/numpy.h	/^    common_iterator(void* ptr, const container_type& strides, const container_type& shape)$/;"	f	class:common_iterator
common_iterator	src/pybind11/include/pybind11/numpy.h	/^class common_iterator {$/;"	c
compare	src/pybind11/include/pybind11/buffer_info.h	/^    static bool compare(const buffer_info& b) {$/;"	f	struct:compare_buffer_info	typeref:typename:bool
compare	src/pybind11/include/pybind11/numpy.h	/^    static bool compare(const buffer_info& b) {$/;"	f	struct:compare_buffer_info	typeref:typename:bool
compare_buffer_info	src/pybind11/include/pybind11/buffer_info.h	/^template <typename T, typename SFINAE = void> struct compare_buffer_info {$/;"	s
compare_buffer_info	src/pybind11/include/pybind11/buffer_info.h	/^template <typename T> struct compare_buffer_info<T, detail::enable_if_t<std::is_integral<T>::val/;"	s
compare_buffer_info	src/pybind11/include/pybind11/numpy.h	/^struct compare_buffer_info<T, detail::enable_if_t<detail::is_pod_struct<T>::value>> {$/;"	s
compatibility_check	src/pybind11/tools/clang/cindex.py	/^    compatibility_check = False$/;"	v	class:Config
completionChunkKindMap	src/pybind11/tools/clang/cindex.py	/^completionChunkKindMap = {$/;"	v
compute	src/pybind11/include/pybind11/pytypes.h	/^    bool compute(size_t length, size_t *start, size_t *stop, size_t *step,$/;"	f	class:slice	typeref:typename:bool
compute_full_text	tools/genmsg/src/genmsg/gentools.py	/^def compute_full_text(msg_context, spec):$/;"	f
compute_full_type_name	tools/genmsg/src/genmsg/gentools.py	/^def compute_full_type_name(package_name, file_name):$/;"	f
compute_md5	tools/genmsg/src/genmsg/gentools.py	/^def compute_md5(msg_context, spec):$/;"	f
compute_md5_text	tools/genmsg/src/genmsg/gentools.py	/^def compute_md5_text(msg_context, spec):$/;"	f
compute_md5_v2	tools/genmsg/src/genmsg/gentools.py	/^compute_md5_v2 = compute_md5$/;"	v
concat	src/pybind11/include/pybind11/descr.h	/^    concat(const descr<OtherSize1, OtherSize2> &other,$/;"	f	class:descr	typeref:typename:descr<Size1+OtherSize1,Size2+OtherSize2>
concat	src/pybind11/include/pybind11/descr.h	/^inline constexpr descr<0, 0> concat() { return _(""); }$/;"	f	typeref:typename:descr<0,0>
concat	src/pybind11/include/pybind11/descr.h	/^template <size_t Size1, size_t Size2, typename... Args> auto constexpr concat(descr<Size1, Size2/;"	f	typeref:typename:auto constexpr
conditional_t	src/pybind11/include/pybind11/common.h	/^template <bool B, typename T, typename F> using conditional_t = typename std::conditional<B, T, /;"	t	typeref:typename:std::conditional<B,T,F>::type
conf	src/pybind11/tools/clang/cindex.py	/^conf = Config()$/;"	v
conformable	src/pybind11/include/pybind11/eigen.h	/^    bool conformable = false;$/;"	m	struct:EigenConformable	typeref:typename:bool
conformable	src/pybind11/include/pybind11/eigen.h	/^    static EigenConformable<row_major> conformable(const array &a) {$/;"	f	struct:EigenProps	typeref:typename:EigenConformable<row_major>
constants	src/pybind11/include/pybind11/numpy.h	/^    enum constants {$/;"	g	struct:npy_api
constants_and_functions	src/pybind11/tests/test_constants_and_functions.cpp	/^test_initializer constants_and_functions([](py::module &m) {$/;"	v	typeref:typename:test_initializer
constexpr_first	src/pybind11/include/pybind11/common.h	/^constexpr int constexpr_first() { return constexpr_impl::first(0, Predicate<Ts>::value...); }$/;"	f	typeref:typename:NAMESPACE_END (constexpr_impl)constexpr int
constexpr_last	src/pybind11/include/pybind11/common.h	/^constexpr int constexpr_last() { return constexpr_impl::last(0, -1, Predicate<Ts>::value...); }$/;"	f	typeref:typename:int
constexpr_sum	src/pybind11/include/pybind11/common.h	/^constexpr size_t constexpr_sum() { return 0; }$/;"	f	typeref:typename:size_t
constexpr_sum	src/pybind11/include/pybind11/common.h	/^constexpr size_t constexpr_sum(T n, Ts... ns) { return size_t{n} + constexpr_sum(ns...); }$/;"	f	typeref:typename:size_t
constexpr_sum	src/pybind11/include/pybind11/common.h	/^template <typename... Ts> constexpr size_t constexpr_sum(Ts... ns) { return (0 + ... + size_t{ns/;"	f	typeref:typename:size_t
container_traits	src/pybind11/include/pybind11/stl_bind.h	/^template <typename T>  struct container_traits {$/;"	s
container_type	src/pybind11/include/pybind11/numpy.h	/^    using container_type = std::vector<ssize_t>;$/;"	t	class:common_iterator	typeref:typename:std::vector<ssize_t>
container_type	src/pybind11/include/pybind11/numpy.h	/^    using container_type = std::vector<ssize_t>;$/;"	t	class:multi_array_iterator	typeref:typename:std::vector<ssize_t>
contains	src/pybind11/include/pybind11/pytypes.h	/^    bool contains(const char *key) const { return PyDict_Contains(ptr(), pybind11::str(key).ptr(/;"	f	class:dict	typeref:typename:bool
contains	src/pybind11/include/pybind11/pytypes.h	/^    bool contains(handle key) const { return PyDict_Contains(ptr(), key.ptr()) == 1; }$/;"	f	class:dict	typeref:typename:bool
contains	src/pybind11/include/pybind11/pytypes.h	/^template <typename D> template <typename T> bool object_api<D>::contains(T &&item) const {$/;"	f	class:object_api	typeref:typename:bool
contains	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    bool contains(float v) const {$/;"	f	class:Sequence	typeref:typename:bool	file:
convert	src/pybind11/include/pybind11/attr.h	/^    bool convert : 1;  \/\/\/< True if the argument is allowed to convert when loading$/;"	m	struct:argument_record	typeref:typename:bool:1
convert_constant_value	tools/genmsg/src/genmsg/msg_loader.py	/^def convert_constant_value(field_type, val):$/;"	f
convert_dir	tools/px_generate_uorb_topic_files.py	/^def convert_dir(format_idx, inputdir, outputdir, templatedir):$/;"	f
convert_dir_save	tools/px_generate_uorb_topic_files.py	/^def convert_dir_save(format_idx, inputdir, outputdir, templatedir, temporarydir, prefix, quiet=F/;"	f
convert_type	tools/px_generate_uorb_topic_helper.py	/^def convert_type(spec_type):$/;"	f
copy	src/pybind11/include/pybind11/common.h	/^    copy,$/;"	e	enum:uint8_t
copy_assignments	src/pybind11/tests/constructor_stats.h	/^    int copy_assignments = 0;$/;"	m	class:ConstructorStats	typeref:typename:int
copy_changed	tools/px_generate_uorb_topic_files.py	/^def copy_changed(inputdir, outputdir, prefix='', quiet=False):$/;"	f
copy_constructions	src/pybind11/tests/constructor_stats.h	/^    int copy_constructions = 0;$/;"	m	class:ConstructorStats	typeref:typename:int
copy_created	src/pybind11/tests/constructor_stats.h	/^    void copy_created(void *inst) {$/;"	f	class:ConstructorStats	typeref:typename:void
copy_move_policies	src/pybind11/tests/test_copy_move.cpp	/^test_initializer copy_move_policies([](py::module &m) {$/;"	v	typeref:typename:test_initializer
copy_or_ref	src/pybind11/include/pybind11/eigen.h	/^    Array copy_or_ref;$/;"	m	struct:type_caster	typeref:typename:Array
copyable_holder_caster	src/pybind11/include/pybind11/cast.h	/^struct copyable_holder_caster : public type_caster_base<type> {$/;"	s
copyright	src/pybind11/docs/conf.py	/^copyright = '2017, Wenzel Jakob'$/;"	v
copyright	tools/genmsg/doc/conf.py	/^copyright = u'2011, Willow Garage'$/;"	v
corners	src/pybind11/tests/test_eigen.cpp	/^        py::EigenDMap<Eigen::Matrix2d> corners() { return py::EigenDMap<Eigen::Matrix2d>(mat.dat/;"	f	class:__anon898d062d0102::ReturnTester	typeref:typename:py::EigenDMap<Eigen::Matrix2d>	file:
cornersConst	src/pybind11/tests/test_eigen.cpp	/^        py::EigenDMap<const Eigen::Matrix2d> cornersConst() const { return py::EigenDMap<const E/;"	f	class:__anon898d062d0102::ReturnTester	typeref:typename:py::EigenDMap<const Eigen::Matrix2d>	file:
coverage	src/pybind11/docs/Makefile	/^coverage:$/;"	t
cpp_function	src/pybind11/include/pybind11/pybind11.h	/^    cpp_function() { }$/;"	f	class:cpp_function
cpp_function	src/pybind11/include/pybind11/pybind11.h	/^    cpp_function(Return (*f)(Args...), const Extra&... extra) {$/;"	f	class:cpp_function
cpp_function	src/pybind11/include/pybind11/pybind11.h	/^    cpp_function(Return (Class::*f)(Arg...) const, const Extra&... extra) {$/;"	f	class:cpp_function
cpp_function	src/pybind11/include/pybind11/pybind11.h	/^    cpp_function(Return (Class::*f)(Arg...), const Extra&... extra) {$/;"	f	class:cpp_function
cpp_function	src/pybind11/include/pybind11/pybind11.h	/^class cpp_function : public function {$/;"	c
cpp_function	src/pybind11/include/pybind11/pytypes.h	/^    handle cpp_function() const {$/;"	f	class:function
cpp_message_declarations	tools/gencpp/src/gencpp/__init__.py	/^def cpp_message_declarations(name_prefix, msg):$/;"	f
cpp_module	src/pybind11/tests/test_embed/test_interpreter.cpp	/^    auto cpp_module = py::module::import("widget_module");$/;"	v	typeref:typename:auto
cpp_widget	src/pybind11/tests/test_embed/test_interpreter.cpp	/^    const auto &cpp_widget = py_widget.cast<const Widget &>();$/;"	v	typeref:typename:const auto &
cpptype	src/pybind11/include/pybind11/cast.h	/^    const std::type_info *cpptype;$/;"	m	struct:type_info	typeref:typename:const std::type_info *
create	src/pybind11/tests/test_eigen.cpp	/^        static Eigen::MatrixXd create() { return Eigen::MatrixXd::Ones(10, 10); }$/;"	f	class:__anon898d062d0102::ReturnTester	typeref:typename:Eigen::MatrixXd	file:
create	src/pybind11/tools/clang/cindex.py	/^    def create(excludeDecls=False):$/;"	m	class:Index
createConst	src/pybind11/tests/test_eigen.cpp	/^        static const Eigen::MatrixXd createConst() { return Eigen::MatrixXd::Ones(10, 10); }$/;"	f	class:__anon898d062d0102::ReturnTester	typeref:typename:const Eigen::MatrixXd	file:
create_array_array	src/pybind11/tests/test_numpy_dtypes.cpp	/^py::array_t<ArrayStruct, 0> create_array_array(size_t n) {$/;"	f	typeref:typename:py::array_t<ArrayStruct,0>
create_complex_array	src/pybind11/tests/test_numpy_dtypes.cpp	/^py::array_t<ComplexStruct, 0> create_complex_array(size_t n) {$/;"	f	typeref:typename:py::array_t<ComplexStruct,0>
create_default	tools/genmsg/src/genmsg/msg_loader.py	/^    def create_default():$/;"	m	class:MsgContext
create_enum_array	src/pybind11/tests/test_numpy_dtypes.cpp	/^py::array_t<EnumStruct, 0> create_enum_array(size_t n) {$/;"	f	typeref:typename:py::array_t<EnumStruct,0>
create_nested	src/pybind11/tests/test_numpy_dtypes.cpp	/^py::array_t<NestedStruct, 0> create_nested(size_t n) {$/;"	f	typeref:typename:py::array_t<NestedStruct,0>
create_partial_nested	src/pybind11/tests/test_numpy_dtypes.cpp	/^py::array_t<PartialNestedStruct, 0> create_partial_nested(size_t n) {$/;"	f	typeref:typename:py::array_t<PartialNestedStruct,0>
create_recarray	src/pybind11/tests/test_numpy_dtypes.cpp	/^py::array_t<S, 0> create_recarray(size_t n) {$/;"	f	typeref:typename:py::array_t<S,0>
create_string_array	src/pybind11/tests/test_numpy_dtypes.cpp	/^py::array_t<StringStruct, 0> create_string_array(bool non_empty) {$/;"	f	typeref:typename:py::array_t<StringStruct,0>
created	src/pybind11/tests/constructor_stats.h	/^    void created(void *inst) {$/;"	f	class:ConstructorStats	typeref:typename:void
curr	src/pybind11/include/pybind11/cast.h	/^        value_and_holder curr;$/;"	m	struct:values_and_holders::iterator	typeref:typename:value_and_holder
cursor	src/pybind11/tools/clang/cindex.py	/^    def cursor(self):$/;"	m	class:Token
cursor	src/pybind11/tools/clang/cindex.py	/^    def cursor(self):$/;"	m	class:TranslationUnit
custom_exceptions	src/pybind11/tests/test_exceptions.cpp	/^test_initializer custom_exceptions([](py::module &m) {$/;"	v	typeref:typename:test_initializer
d	src/pybind11/tests/test_embed/test_interpreter.cpp	/^    auto d = py::dict();$/;"	v	typeref:typename:auto
d	src/pybind11/tests/test_exceptions.cpp	/^    py::dict d;$/;"	m	struct:PythonCallInDestructor	typeref:typename:py::dict	file:
d	src/pybind11/tests/test_numpy_dtypes.cpp	/^    std::array<float, 2> d[4];$/;"	m	struct:ArrayStruct	typeref:typename:std::array<float,2>[4]	file:
d	src/pybind11/tests/test_pytypes.py	/^        d = {"operator[object]": 1, "operator[char *]": 2}$/;"	v	class:test_accessors.TestObject
d	src/pybind11/tools/mkdoc.py	/^def d(s):$/;"	f
d	tools/gencpp/setup.py	/^d = generate_distutils_setup($/;"	v
d	tools/genmsg/setup.py	/^d = generate_distutils_setup($/;"	v
daemon_task	src/elka_comm/posix/elka_posix.cpp	/^static int daemon_task[MAX_ELKA_DEVS];$/;"	v	typeref:typename:int[]	file:
daemon_task	src/elka_comm/qurt/snapdragon_uart.cpp	/^static int daemon_task[MAX_UART_PORTS];$/;"	v	typeref:typename:int[]	file:
data	build_elka_data_collection/inc/uORB/topics/elka_msg.h	/^	uint8_t data[256];$/;"	m	struct:elka_msg_s	typeref:typename:uint8_t[256]
data	build_elka_data_collection/topics_temporary_header/elka_msg.h	/^	uint8_t data[256];$/;"	m	struct:elka_msg_s	typeref:typename:uint8_t[256]
data	src/pybind11/include/pybind11/eigen.h	/^    Scalar *data(Array &a) { return a.mutable_data(); }$/;"	f	struct:type_caster	typeref:typename:Scalar *
data	src/pybind11/include/pybind11/numpy.h	/^    char *data;$/;"	m	struct:PyArray_Proxy	typeref:typename:PyObject_HEAD char *
data	src/pybind11/include/pybind11/numpy.h	/^    template <size_t K, class T = void> T* data() const {$/;"	f	class:multi_array_iterator	typeref:typename:T *
data	src/pybind11/include/pybind11/numpy.h	/^    template <typename... Ix> const T *data(Ix... ix) const { return &operator()(ssize_t(ix)...)/;"	f	class:unchecked_reference	typeref:typename:const T *
data	src/pybind11/include/pybind11/numpy.h	/^    template<typename... Ix> const T* data(Ix... index) const {$/;"	f	class:array_t	typeref:typename:const T *
data	src/pybind11/include/pybind11/numpy.h	/^    template<typename... Ix> const void* data(Ix... index) const {$/;"	f	class:array	typeref:typename:const void *
data	src/pybind11/include/pybind11/numpy.h	/^    void* data() const {$/;"	f	class:common_iterator	typeref:typename:void *
data	src/pybind11/tests/test_buffers.cpp	/^    float *data() { return m_data; }$/;"	f	class:Matrix	typeref:typename:float *	file:
data	src/pybind11/tests/test_numpy_array.cpp	/^template<typename... Ix> arr data(const arr& a, Ix... index) {$/;"	f	typeref:typename:arr
data_	src/pybind11/include/pybind11/numpy.h	/^    const unsigned char *data_;$/;"	m	class:unchecked_reference	typeref:typename:const unsigned char *
data_	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    std::vector<std::pair<int, int>> data_;$/;"	m	class:IntPairs	typeref:typename:std::vector<std::pair<int,int>>	file:
data_t	src/pybind11/tests/test_numpy_array.cpp	/^template<typename... Ix> arr data_t(const arr_t& a, Ix... index) {$/;"	f	typeref:typename:arr
days	src/pybind11/include/pybind11/chrono.h	/^    typedef std::chrono::duration<uint_fast32_t, std::ratio<86400>> days;$/;"	t	class:duration_caster	typeref:typename:std::chrono::duration<uint_fast32_t,std::ratio<86400>>
dd_t	src/pybind11/include/pybind11/chrono.h	/^        using dd_t = duration<int, std::ratio<86400>>;$/;"	t	function:duration_caster::cast	typeref:typename:duration<int,std::ratio<86400>>
dealloc	src/pybind11/include/pybind11/attr.h	/^    void (*dealloc)(const detail::value_and_holder &) = nullptr;$/;"	m	struct:type_record	typeref:typename:void (*)(const detail::value_and_holder &)
dealloc	src/pybind11/include/pybind11/cast.h	/^    void (*dealloc)(const value_and_holder &v_h);$/;"	m	struct:type_info	typeref:typename:void (*)(const value_and_holder & v_h)
dealloc	src/pybind11/include/pybind11/pybind11.h	/^    static void dealloc(const detail::value_and_holder &v_h) {$/;"	f	class:class_	typeref:typename:void
deallocate_layout	src/pybind11/include/pybind11/cast.h	/^PYBIND11_NOINLINE inline void instance::deallocate_layout() {$/;"	f	class:instance	typeref:typename:PYBIND11_NOINLINE void
decRef	src/pybind11/tests/object.h	/^    void decRef(bool dealloc = true) const {$/;"	f	class:Object	typeref:typename:void
dec_ref	src/pybind11/include/pybind11/pybind11.h	/^    PYBIND11_NOINLINE void dec_ref() {$/;"	f	class:gil_scoped_acquire	typeref:typename:PYBIND11_NOINLINE void
dec_ref	src/pybind11/include/pybind11/pytypes.h	/^    const handle& dec_ref() const & { Py_XDECREF(m_ptr); return *this; }$/;"	f	class:handle	typeref:typename:const handle &
decode_utfN	src/pybind11/include/pybind11/cast.h	/^    static handle decode_utfN(const char *buffer, ssize_t nbytes) {$/;"	f	struct:string_caster	typeref:typename:handle
decrement	src/pybind11/include/pybind11/pytypes.h	/^    void decrement() { --index; }$/;"	f	class:sequence_slow_readwrite	typeref:typename:void
decrement	src/pybind11/include/pybind11/pytypes.h	/^    void decrement() { --ptr; }$/;"	f	class:sequence_fast_readonly	typeref:typename:void
def	src/pybind11/include/pybind11/attr.h	/^    PyMethodDef *def = nullptr;$/;"	m	struct:function_record	typeref:typename:PyMethodDef *
def	src/pybind11/include/pybind11/pybind11.h	/^    class_ &def(const char *name_, Func&& f, const Extra&... extra) {$/;"	f	class:class_	typeref:typename:class_ &
def	src/pybind11/include/pybind11/pybind11.h	/^    class_ &def(const detail::init<Args...> &init, const Extra&... extra) {$/;"	f	class:class_	typeref:typename:class_ &
def	src/pybind11/include/pybind11/pybind11.h	/^    class_ &def(const detail::init_alias<Args...> &init, const Extra&... extra) {$/;"	f	class:class_	typeref:typename:class_ &
def	src/pybind11/include/pybind11/pybind11.h	/^    class_ &def(const detail::op_<id, ot, L, R> &op, const Extra&... extra) {$/;"	f	class:class_	typeref:typename:class_ &
def	src/pybind11/include/pybind11/pybind11.h	/^    module &def(const char *name_, Func &&f, const Extra& ... extra) {$/;"	f	class:module	typeref:typename:module &
def_buffer	src/pybind11/include/pybind11/pybind11.h	/^    class_ &def_buffer(Return (Class::*func)(Args...) const) {$/;"	f	class:class_	typeref:typename:class_ &
def_buffer	src/pybind11/include/pybind11/pybind11.h	/^    class_ &def_buffer(Return (Class::*func)(Args...)) {$/;"	f	class:class_	typeref:typename:class_ &
def_buffer	src/pybind11/include/pybind11/pybind11.h	/^    template <typename Func> class_& def_buffer(Func &&func) {$/;"	f	class:class_	typeref:typename:class_ &
def_cast	src/pybind11/include/pybind11/pybind11.h	/^    class_ & def_cast(const detail::op_<id, ot, L, R> &op, const Extra&... extra) {$/;"	f	class:class_	typeref:typename:class_ &
def_index_fn	src/pybind11/tests/test_numpy_array.cpp	/^#define def_index_fn(/;"	d	file:
def_property	src/pybind11/include/pybind11/pybind11.h	/^    class_ &def_property(const char *name, const Getter &fget, const Setter &fset, const Extra& /;"	f	class:class_	typeref:typename:class_ &
def_property	src/pybind11/include/pybind11/pybind11.h	/^    class_ &def_property(const char *name, const Getter &fget, const cpp_function &fset, const E/;"	f	class:class_	typeref:typename:class_ &
def_property	src/pybind11/include/pybind11/pybind11.h	/^    class_ &def_property(const char *name, const cpp_function &fget, const cpp_function &fset, c/;"	f	class:class_	typeref:typename:class_ &
def_property_readonly	src/pybind11/include/pybind11/pybind11.h	/^    class_ &def_property_readonly(const char *name, const Getter &fget, const Extra& ...extra) {$/;"	f	class:class_	typeref:typename:class_ &
def_property_readonly	src/pybind11/include/pybind11/pybind11.h	/^    class_ &def_property_readonly(const char *name, const cpp_function &fget, const Extra& ...ex/;"	f	class:class_	typeref:typename:class_ &
def_property_readonly_static	src/pybind11/include/pybind11/pybind11.h	/^    class_ &def_property_readonly_static(const char *name, const Getter &fget, const Extra& ...e/;"	f	class:class_	typeref:typename:class_ &
def_property_readonly_static	src/pybind11/include/pybind11/pybind11.h	/^    class_ &def_property_readonly_static(const char *name, const cpp_function &fget, const Extra/;"	f	class:class_	typeref:typename:class_ &
def_property_static	src/pybind11/include/pybind11/pybind11.h	/^    class_ &def_property_static(const char *name, const Getter &fget, const cpp_function &fset, /;"	f	class:class_	typeref:typename:class_ &
def_property_static	src/pybind11/include/pybind11/pybind11.h	/^    class_ &def_property_static(const char *name, const cpp_function &fget, const cpp_function &/;"	f	class:class_	typeref:typename:class_ &
def_property_static_impl	src/pybind11/include/pybind11/pybind11.h	/^    void def_property_static_impl(const char *name,$/;"	f	class:generic_type	typeref:typename:void
def_readonly	src/pybind11/include/pybind11/pybind11.h	/^    class_ &def_readonly(const char *name, const D C::*pm, const Extra& ...extra) {$/;"	f	class:class_	typeref:typename:class_ &
def_readonly_static	src/pybind11/include/pybind11/pybind11.h	/^    class_ &def_readonly_static(const char *name, const D *pm, const Extra& ...extra) {$/;"	f	class:class_	typeref:typename:class_ &
def_readwrite	src/pybind11/include/pybind11/pybind11.h	/^    class_ &def_readwrite(const char *name, D C::*pm, const Extra&... extra) {$/;"	f	class:class_	typeref:typename:class_ &
def_readwrite_static	src/pybind11/include/pybind11/pybind11.h	/^    class_ &def_readwrite_static(const char *name, D *pm, const Extra& ...extra) {$/;"	f	class:class_	typeref:typename:class_ &
def_static	src/pybind11/include/pybind11/pybind11.h	/^    def_static(const char *name_, Func &&f, const Extra&... extra) {$/;"	f	class:class_	typeref:typename:class_ &
def_submodule	src/pybind11/include/pybind11/pybind11.h	/^    module def_submodule(const char *name, const char *doc = nullptr) {$/;"	f	class:module	typeref:typename:module
default_constructions	src/pybind11/tests/constructor_stats.h	/^    int default_constructions = 0;$/;"	m	class:ConstructorStats	typeref:typename:int
default_created	src/pybind11/tests/constructor_stats.h	/^    void default_created(void *inst) {$/;"	f	class:ConstructorStats	typeref:typename:void
default_holder	src/pybind11/include/pybind11/attr.h	/^    bool default_holder : 1;$/;"	m	struct:type_record	typeref:typename:bool:1
default_holder	src/pybind11/include/pybind11/cast.h	/^    bool default_holder : 1;$/;"	m	struct:type_info	typeref:typename:bool:1
default_metaclass	src/pybind11/include/pybind11/common.h	/^    PyTypeObject *default_metaclass;$/;"	m	struct:internals	typeref:typename:PyTypeObject *
default_role	src/pybind11/docs/conf.py	/^default_role = 'any'$/;"	v
default_target	build_elka_data_collection/Makefile	/^default_target: all$/;"	t
default_target	build_elka_data_collection/msg/Makefile	/^default_target: all$/;"	t
default_target	build_elka_data_collection/src/Makefile	/^default_target: all$/;"	t
default_target	build_elka_data_collection/src/elka_comm/common/Makefile	/^default_target: all$/;"	t
default_target	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^default_target: all$/;"	t
default_target	build_elka_data_collection/src/pybind11/Makefile	/^default_target: all$/;"	t
default_value	tools/gencpp/src/gencpp/__init__.py	/^def default_value(type):$/;"	f
deferred_t	src/pybind11/include/pybind11/common.h	/^template <typename T, typename... Us> using deferred_t = typename deferred_type<T, Us...>::type;$/;"	t	typeref:typename:deferred_type<T,Us...>::type
deferred_type	src/pybind11/include/pybind11/common.h	/^template <typename T, typename... \/*Us*\/> struct deferred_type { using type = T; };$/;"	s
deinit	src/elka_comm/gnd_station/elka_devices.cpp	/^int elka::GroundPort::deinit() {$/;"	f	class:elka::GroundPort	typeref:typename:int
deinit	src/elka_comm/posix/elka_devices.cpp	/^int elka::PX4Port::deinit() {$/;"	f	class:elka::PX4Port	typeref:typename:int
deinit	src/elka_comm/qurt/snapdragon_uart_devices.cpp	/^int uart::UARTPort::deinit() {$/;"	f	class:uart::UARTPort	typeref:typename:int
depend	build_elka_data_collection/Makefile	/^depend:$/;"	t
depend	build_elka_data_collection/msg/Makefile	/^depend:$/;"	t
depend	build_elka_data_collection/src/Makefile	/^depend:$/;"	t
depend	build_elka_data_collection/src/elka_comm/common/Makefile	/^depend:$/;"	t
depend	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^depend:$/;"	t
depend	build_elka_data_collection/src/pybind11/Makefile	/^depend:$/;"	t
deps	tools/genmsg/scripts/genmsg_check_deps.py	/^deps = sys.argv[3].split(':') if len(sys.argv) > 3 else []$/;"	v
dereference	src/pybind11/include/pybind11/pytypes.h	/^    reference dereference() const { return *ptr; }$/;"	f	class:sequence_fast_readonly	typeref:typename:reference
dereference	src/pybind11/include/pybind11/pytypes.h	/^    reference dereference() const { return {key, value}; }$/;"	f	class:dict_readonly	typeref:typename:reference
dereference	src/pybind11/include/pybind11/pytypes.h	/^    reference dereference() const { return {obj, static_cast<size_t>(index)}; }$/;"	f	class:sequence_slow_readwrite	typeref:typename:reference
deregister_instance	src/pybind11/include/pybind11/class_support.h	/^inline bool deregister_instance(instance *self, void *valptr, const type_info *tinfo) {$/;"	f	typeref:typename:bool
deregister_instance_impl	src/pybind11/include/pybind11/class_support.h	/^inline bool deregister_instance_impl(void *ptr, instance *self) {$/;"	f	typeref:typename:bool
derived	src/pybind11/include/pybind11/pytypes.h	/^    const Derived &derived() const { return static_cast<const Derived &>(*this); }$/;"	f	class:object_api	typeref:typename:const Derived &
descr	src/pybind11/include/pybind11/attr.h	/^    const char *descr; \/\/\/< Human-readable version of the argument value$/;"	m	struct:argument_record	typeref:typename:const char *
descr	src/pybind11/include/pybind11/cast.h	/^    const char *descr;$/;"	m	struct:arg_v	typeref:typename:const char *
descr	src/pybind11/include/pybind11/descr.h	/^    constexpr descr($/;"	f	class:descr	typeref:typename:constexpr
descr	src/pybind11/include/pybind11/descr.h	/^    constexpr descr(char const (&text) [Size1+1], const std::type_info * const (&types)[Size2+1]/;"	f	class:descr	typeref:typename:constexpr
descr	src/pybind11/include/pybind11/descr.h	/^template <size_t Size1, size_t Size2> class descr {$/;"	c
descr	src/pybind11/include/pybind11/numpy.h	/^    PyArrayDescr_Proxy *descr;$/;"	m	struct:PyVoidScalarObject_Proxy	typeref:typename:PyArrayDescr_Proxy *
descr	src/pybind11/include/pybind11/numpy.h	/^    PyObject *descr;$/;"	m	struct:PyArray_Proxy	typeref:typename:PyObject *
descr	src/pybind11/include/pybind11/numpy.h	/^    dtype descr;$/;"	m	struct:field_descriptor	typeref:typename:dtype
descriptor	src/pybind11/include/pybind11/eigen.h	/^    static PYBIND11_DESCR descriptor() {$/;"	f	struct:EigenProps	typeref:typename:PYBIND11_DESCR
deserialize_elka_msg	src/elka_comm/common/elka.h	/^inline bool deserialize_elka_msg($/;"	f	typeref:typename:bool
destroyed	src/pybind11/tests/constructor_stats.h	/^    void destroyed(void *inst) {$/;"	f	class:ConstructorStats	typeref:typename:void
destruct	src/pybind11/include/pybind11/pybind11.h	/^    static void destruct(detail::function_record *rec) {$/;"	f	class:cpp_function	typeref:typename:void
detail	src/elka_comm/common/elka_comm.cpp	/^namespace pybind11 { namespace detail {$/;"	n	namespace:pybind11	file:
detail	src/pybind11/tests/test_copy_move.cpp	/^namespace pybind11 { namespace detail {$/;"	n	namespace:pybind11	file:
detail	src/pybind11/tests/test_methods_and_attributes.cpp	/^namespace pybind11 { namespace detail {$/;"	n	namespace:pybind11	file:
detail	src/pybind11/tests/test_smart_ptr.cpp	/^namespace pybind11 { namespace detail {$/;"	n	namespace:pybind11	file:
dev_id_t	src/elka_comm/common/elka.h	/^typedef uint16_t dev_id_t;$/;"	t	typeref:typename:uint16_t
dev_id_t	src/elka_comm/common/elka_comm.cpp	/^typedef uint16_t dev_id_t;$/;"	t	typeref:typename:uint16_t	file:
dev_id_tCmp	src/elka_comm/common/elka.h	/^struct dev_id_tCmp {$/;"	s
dev_path	src/pybind11/tools/mkdoc.py	/^        dev_path = '\/Applications\/Xcode.app\/Contents\/Developer\/'$/;"	v
dev_prop_t	src/elka_comm/common/elka.h	/^typedef uint8_t dev_prop_t;$/;"	t	typeref:typename:uint8_t
dev_prop_t	src/elka_comm/common/elka_comm.cpp	/^typedef uint8_t dev_prop_t;$/;"	t	typeref:typename:uint8_t	file:
dev_prop_tCmp	src/elka_comm/common/elka.h	/^struct dev_prop_tCmp {$/;"	s
dev_props_cmp	src/elka_comm/common/elka_comm.cpp	/^bool elka::CommPort::dev_props_cmp($/;"	f	class:elka::CommPort	typeref:typename:bool
dev_props_cmp	src/elka_comm/common/elka_comm.cpp	/^bool elka::DeviceRoute::dev_props_cmp($/;"	f	class:elka::DeviceRoute	typeref:typename:bool
devhelp	src/pybind11/docs/Makefile	/^devhelp:$/;"	t
devhelp	tools/genmsg/doc/Makefile	/^devhelp:$/;"	t
diagnostics	src/pybind11/tools/clang/cindex.py	/^    def diagnostics(self):$/;"	m	class:CodeCompletionResults
diagnostics	src/pybind11/tools/clang/cindex.py	/^    def diagnostics(self):$/;"	m	class:TranslationUnit
dict	src/pybind11/include/pybind11/pytypes.h	/^    dict() : object(PyDict_New(), stolen_t{}) {$/;"	f	class:dict	typeref:typename:PYBIND11_OBJECT_CVT (dict,object,PyDict_Check,raw_dict)
dict	src/pybind11/include/pybind11/pytypes.h	/^class dict : public object {$/;"	c
dict_iterator	src/pybind11/include/pybind11/pytypes.h	/^using dict_iterator = generic_iterator<iterator_policies::dict_readonly>;$/;"	t	typeref:typename:generic_iterator<iterator_policies::dict_readonly>
dict_readonly	src/pybind11/include/pybind11/pytypes.h	/^    dict_readonly(handle obj, ssize_t pos) : obj(obj), pos(pos) { increment(); }$/;"	f	class:dict_readonly
dict_readonly	src/pybind11/include/pybind11/pytypes.h	/^class dict_readonly {$/;"	c
difference_type	src/pybind11/include/pybind11/pytypes.h	/^    using difference_type = ssize_t;$/;"	t	class:generic_iterator	typeref:typename:ssize_t
difference_type	src/pybind11/include/pybind11/pytypes.h	/^    using difference_type = ssize_t;$/;"	t	class:iterator	typeref:typename:ssize_t
digits	src/pybind11/include/pybind11/descr.h	/^    static constexpr auto digits = descr<sizeof...(Digits), 0>({ ('0' + Digits)..., '\\0' }, { n/;"	m	struct:int_to_str	typeref:typename:constexpr auto
dimensions	src/pybind11/include/pybind11/numpy.h	/^    ssize_t *dimensions;$/;"	m	struct:PyArray_Proxy	typeref:typename:ssize_t *
dims_	src/pybind11/include/pybind11/numpy.h	/^    const ssize_t dims_;$/;"	m	class:unchecked_reference	typeref:typename:const ssize_t
direct_conversions	src/pybind11/include/pybind11/cast.h	/^    std::vector<bool (*)(PyObject *, void *&)> *direct_conversions;$/;"	m	struct:type_info	typeref:typename:std::vector<bool (*)(PyObject *,void * &)> *
direct_conversions	src/pybind11/include/pybind11/common.h	/^    type_map<std::vector<bool (*)(PyObject *, void *&)>> direct_conversions;$/;"	m	struct:internals	typeref:typename:type_map<std::vector<bool (*)(PyObject *,void * &)>>
direct_converter	src/pybind11/include/pybind11/numpy.h	/^    static bool direct_converter(PyObject *obj, void*& value) {$/;"	f	struct:npy_format_descriptor	typeref:typename:bool
directory	src/pybind11/tools/clang/cindex.py	/^    def directory(self):$/;"	m	class:CompileCommand
dirhtml	src/pybind11/docs/Makefile	/^dirhtml:$/;"	t
dirhtml	tools/genmsg/doc/Makefile	/^dirhtml:$/;"	t
disable_function_signatures	src/pybind11/include/pybind11/options.h	/^    options& disable_function_signatures() & { global_state().show_function_signatures = false; /;"	f	class:options	typeref:typename:options &
disable_option	src/pybind11/tools/clang/cindex.py	/^    def disable_option(self):$/;"	m	class:Diagnostic
disable_user_defined_docstrings	src/pybind11/include/pybind11/options.h	/^    options& disable_user_defined_docstrings() & { global_state().show_user_defined_docstrings =/;"	f	class:options	typeref:typename:options &
disassoc	src/pybind11/include/pybind11/pybind11.h	/^    bool disassoc;$/;"	m	class:gil_scoped_release	typeref:typename:bool
dispatch	src/pybind11/tests/test_virtual_functions.cpp	/^    virtual std::string dispatch() const { return {}; };$/;"	f	struct:Base	typeref:typename:std::string	file:
dispatch	src/pybind11/tests/test_virtual_functions.cpp	/^    virtual std::string dispatch() const {$/;"	f	struct:DispatchIssue	typeref:typename:std::string	file:
dispatch	src/pybind11/tests/test_virtual_functions.py	/^        def dispatch(self):$/;"	m	class:test_dispatch_issue.PyClass1
dispatch	src/pybind11/tests/test_virtual_functions.py	/^        def dispatch(self):$/;"	m	class:test_dispatch_issue.PyClass2
dispatcher	src/pybind11/include/pybind11/pybind11.h	/^    static PyObject *dispatcher(PyObject *self, PyObject *args_in, PyObject *kwargs_in) {$/;"	f	class:cpp_function	typeref:typename:PyObject *
displayname	src/pybind11/tools/clang/cindex.py	/^    def displayname(self):$/;"	m	class:Cursor
distance_to	src/pybind11/include/pybind11/pytypes.h	/^    ssize_t distance_to(const sequence_fast_readonly &b) const { return ptr - b.ptr; }$/;"	f	class:sequence_fast_readonly	typeref:typename:ssize_t
distance_to	src/pybind11/include/pybind11/pytypes.h	/^    ssize_t distance_to(const sequence_slow_readwrite &b) const { return index - b.index; }$/;"	f	class:sequence_slow_readwrite	typeref:typename:ssize_t
div[class^='highlight'] pre	src/pybind11/docs/_static/theme_overrides.css	/^div[class^='highlight'] pre {$/;"	s
do_nothing	src/pybind11/tests/test_methods_and_attributes.cpp	/^    void do_nothing() const {}$/;"	f	class:UnregisteredBase	typeref:typename:void	file:
doc	src/pybind11/include/pybind11/attr.h	/^    char *doc = nullptr;$/;"	m	struct:function_record	typeref:typename:char *
doc	src/pybind11/include/pybind11/attr.h	/^    const char *doc = nullptr;$/;"	m	struct:type_record	typeref:typename:const char *
doc	src/pybind11/include/pybind11/attr.h	/^struct doc { const char *value; doc(const char *value) : value(value) { } };$/;"	f	struct:doc
doc	src/pybind11/include/pybind11/attr.h	/^struct doc { const char *value; doc(const char *value) : value(value) { } };$/;"	s
doc	src/pybind11/include/pybind11/pytypes.h	/^str_attr_accessor object_api<D>::doc() const { return attr("__doc__"); }$/;"	f	class:object_api	typeref:typename:str_attr_accessor
doc	src/pybind11/tests/conftest.py	/^def doc():$/;"	f
docstring_generation	src/pybind11/tests/test_docstring_options.cpp	/^test_initializer docstring_generation([](py::module &m) {$/;"	v	typeref:typename:test_initializer
doctest	src/pybind11/docs/Makefile	/^doctest:$/;"	t
doctest	tools/genmsg/doc/Makefile	/^doctest:$/;"	t
double	src/pybind11/tests/test_callbacks.py	/^        def double(self, val):$/;"	m	class:test_bound_method_callback.MyClass
dp	serial/python/parse_vispy.py	/^dp = DataPlotter()$/;"	v
dt	src/pybind11/docs/benchmark.py	/^import datetime as dt$/;"	I
dt_fmt	src/pybind11/tests/test_numpy_dtypes.py	/^def dt_fmt():$/;"	f
dtype	src/pybind11/include/pybind11/numpy.h	/^    dtype(const char *format) : dtype(std::string(format)) { }$/;"	f	class:dtype
dtype	src/pybind11/include/pybind11/numpy.h	/^    dtype(list names, list formats, list offsets, ssize_t itemsize) {$/;"	f	class:dtype
dtype	src/pybind11/include/pybind11/numpy.h	/^    explicit dtype(const buffer_info &info) {$/;"	f	class:dtype
dtype	src/pybind11/include/pybind11/numpy.h	/^    explicit dtype(const std::string &format) {$/;"	f	class:dtype
dtype	src/pybind11/include/pybind11/numpy.h	/^    pybind11::dtype dtype() const {$/;"	f	class:array	typeref:typename:pybind11::dtype
dtype	src/pybind11/include/pybind11/numpy.h	/^    static pybind11::dtype dtype() { return base_descr::dtype(); }$/;"	f	struct:npy_format_descriptor	typeref:typename:pybind11::dtype
dtype	src/pybind11/include/pybind11/numpy.h	/^    static pybind11::dtype dtype() {$/;"	f	struct:npy_format_descriptor	typeref:typename:pybind11::dtype
dtype	src/pybind11/include/pybind11/numpy.h	/^class dtype : public object {$/;"	c
dtype_ptr	src/pybind11/include/pybind11/numpy.h	/^    PyObject* dtype_ptr;$/;"	m	struct:numpy_type_info	typeref:typename:PyObject *
dtype_ptr	src/pybind11/include/pybind11/numpy.h	/^    static PyObject* dtype_ptr() {$/;"	f	struct:npy_format_descriptor	typeref:typename:PyObject *
dummy1	src/pybind11/tests/test_numpy_dtypes.cpp	/^    uint64_t dummy1;$/;"	m	struct:PartialNestedStruct	typeref:typename:uint64_t	file:
dummy2	src/pybind11/tests/test_numpy_dtypes.cpp	/^    uint64_t dummy2;$/;"	m	struct:PartialNestedStruct	typeref:typename:uint64_t	file:
dummy2	src/pybind11/tests/test_numpy_dtypes.cpp	/^    uint64_t dummy2;$/;"	m	struct:PartialStruct	typeref:typename:uint64_t	file:
dummy_function	src/pybind11/tests/test_callbacks.cpp	/^int dummy_function(int i) { return i + 1; }$/;"	f	typeref:typename:int
dummy_function2	src/pybind11/tests/test_callbacks.cpp	/^int dummy_function2(int i, int j) { return i + j; }$/;"	f	typeref:typename:int
duration_caster	src/pybind11/include/pybind11/chrono.h	/^template <typename type> class duration_caster {$/;"	c
dynamic	src/pybind11/include/pybind11/eigen.h	/^        dynamic = !fixed_rows && !fixed_cols; \/\/ Fully-dynamic size$/;"	m	struct:EigenProps	typeref:typename:constexpr bool
dynamic_attr	src/pybind11/include/pybind11/attr.h	/^    bool dynamic_attr : 1;$/;"	m	struct:type_record	typeref:typename:bool:1
dynamic_attr	src/pybind11/include/pybind11/attr.h	/^struct dynamic_attr { };$/;"	s
dynamic_stride	src/pybind11/include/pybind11/eigen.h	/^    static constexpr bool dynamic_stride = inner_stride == Eigen::Dynamic && outer_stride == Eig/;"	m	struct:EigenProps	typeref:typename:constexpr bool
edit_cache	build_elka_data_collection/Makefile	/^edit_cache:$/;"	t
edit_cache	build_elka_data_collection/msg/Makefile	/^edit_cache:$/;"	t
edit_cache	build_elka_data_collection/src/Makefile	/^edit_cache:$/;"	t
edit_cache	build_elka_data_collection/src/elka_comm/common/Makefile	/^edit_cache:$/;"	t
edit_cache	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^edit_cache:$/;"	t
edit_cache	build_elka_data_collection/src/pybind11/Makefile	/^edit_cache:$/;"	t
edit_cache/fast	build_elka_data_collection/Makefile	/^edit_cache\/fast: edit_cache$/;"	t
edit_cache/fast	build_elka_data_collection/msg/Makefile	/^edit_cache\/fast: edit_cache$/;"	t
edit_cache/fast	build_elka_data_collection/src/Makefile	/^edit_cache\/fast: edit_cache$/;"	t
edit_cache/fast	build_elka_data_collection/src/elka_comm/common/Makefile	/^edit_cache\/fast: edit_cache$/;"	t
edit_cache/fast	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^edit_cache\/fast: edit_cache$/;"	t
edit_cache/fast	build_elka_data_collection/src/pybind11/Makefile	/^edit_cache\/fast: edit_cache$/;"	t
eigen	src/pybind11/tests/test_eigen.cpp	/^test_initializer eigen([](py::module &m) {$/;"	v	typeref:typename:test_initializer
eigen_array_cast	src/pybind11/include/pybind11/eigen.h	/^template <typename props> handle eigen_array_cast(typename props::Type const &src, handle base =/;"	f	typeref:typename:handle
eigen_encapsulate	src/pybind11/include/pybind11/eigen.h	/^handle eigen_encapsulate(Type *src) {$/;"	f	typeref:typename:::value>> handle
eigen_extract_stride	src/pybind11/include/pybind11/eigen.h	/^struct eigen_extract_stride<Eigen::Map<PlainObjectType, MapOptions, StrideType>> { using type = /;"	s
eigen_extract_stride	src/pybind11/include/pybind11/eigen.h	/^struct eigen_extract_stride<Eigen::Ref<PlainObjectType, Options, StrideType>> { using type = Str/;"	s
eigen_extract_stride	src/pybind11/include/pybind11/eigen.h	/^template <typename Type> struct eigen_extract_stride { using type = Type; };$/;"	s
eigen_map_caster	src/pybind11/include/pybind11/eigen.h	/^template <typename MapType> struct eigen_map_caster {$/;"	s
eigen_ref_array	src/pybind11/include/pybind11/eigen.h	/^handle eigen_ref_array(Type &src, handle parent = none()) {$/;"	f	typeref:typename:handle
elapsed	src/pybind11/docs/benchmark.py	/^        elapsed = (n2 - n1).total_seconds()$/;"	v
element_count	src/pybind11/tools/clang/cindex.py	/^    def element_count(self):$/;"	m	class:Type
element_lengths	serial/python/packet.py	/^    element_lengths =\\$/;"	v	class:SpektrumPacket
element_type	src/pybind11/tools/clang/cindex.py	/^    def element_type(self):$/;"	m	class:Type
elka	src/elka_comm/common/elka_comm.h	/^namespace elka {$/;"	n
elka	src/elka_comm/gnd_station/elka_devices.h	/^namespace elka {$/;"	n
elka	src/elka_comm/posix/elka_devices.h	/^namespace elka {$/;"	n
elka	src/elka_comm/posix/elka_manager.h	/^namespace elka {$/;"	n
elka.cpp.i	build_elka_data_collection/src/elka_comm/common/Makefile	/^elka.cpp.i:$/;"	t
elka.cpp.o	build_elka_data_collection/src/elka_comm/common/Makefile	/^elka.cpp.o:$/;"	t
elka.cpp.s	build_elka_data_collection/src/elka_comm/common/Makefile	/^elka.cpp.s:$/;"	t
elka.i	build_elka_data_collection/src/elka_comm/common/Makefile	/^elka.i: elka.cpp.i$/;"	t
elka.o	build_elka_data_collection/src/elka_comm/common/Makefile	/^elka.o: elka.cpp.o$/;"	t
elka.s	build_elka_data_collection/src/elka_comm/common/Makefile	/^elka.s: elka.cpp.s$/;"	t
elka_comm.cpp.i	build_elka_data_collection/src/elka_comm/common/Makefile	/^elka_comm.cpp.i:$/;"	t
elka_comm.cpp.o	build_elka_data_collection/src/elka_comm/common/Makefile	/^elka_comm.cpp.o:$/;"	t
elka_comm.cpp.s	build_elka_data_collection/src/elka_comm/common/Makefile	/^elka_comm.cpp.s:$/;"	t
elka_comm.i	build_elka_data_collection/src/elka_comm/common/Makefile	/^elka_comm.i: elka_comm.cpp.i$/;"	t
elka_comm.o	build_elka_data_collection/src/elka_comm/common/Makefile	/^elka_comm.o: elka_comm.cpp.o$/;"	t
elka_comm.s	build_elka_data_collection/src/elka_comm/common/Makefile	/^elka_comm.s: elka_comm.cpp.s$/;"	t
elka_data_collection	Makefile	/^.PHONY elka_data_collection:$/;"	t
elka_data_collection	Makefile	/^elka_data_collection:$/;"	t
elka_dev_loop	src/elka_comm/posix/elka_posix.cpp	/^int elka_dev_loop(int argc, char **argv) {$/;"	f	typeref:typename:int
elka_devices.cpp.i	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^elka_devices.cpp.i:$/;"	t
elka_devices.cpp.o	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^elka_devices.cpp.o:$/;"	t
elka_devices.cpp.s	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^elka_devices.cpp.s:$/;"	t
elka_devices.i	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^elka_devices.i: elka_devices.cpp.i$/;"	t
elka_devices.o	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^elka_devices.o: elka_devices.cpp.o$/;"	t
elka_devices.s	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^elka_devices.s: elka_devices.cpp.s$/;"	t
elka_main	src/elka_comm/posix/elka_posix.cpp	/^int elka_main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
elka_msg_ack_s	build_elka_data_collection/inc/uORB/topics/elka_msg_ack.h	/^struct __EXPORT elka_msg_ack_s {$/;"	s
elka_msg_ack_s	build_elka_data_collection/topics_temporary_header/elka_msg_ack.h	/^struct __EXPORT elka_msg_ack_s {$/;"	s
elka_msg_id_s	src/elka_comm/common/elka.h	/^struct elka_msg_id_s {$/;"	s
elka_msg_id_s	src/elka_comm/common/elka_comm.cpp	/^struct elka_msg_id_s {$/;"	s	file:
elka_msg_s	build_elka_data_collection/inc/uORB/topics/elka_msg.h	/^struct __EXPORT elka_msg_s {$/;"	s
elka_msg_s	build_elka_data_collection/topics_temporary_header/elka_msg.h	/^struct __EXPORT elka_msg_s {$/;"	s
elka_read_callback	src/elka_comm/qurt/basic_uart.cpp	/^void elka_read_callback(void *context, $/;"	f	typeref:typename:void
elsize	src/pybind11/include/pybind11/numpy.h	/^    int elsize;$/;"	m	struct:PyArrayDescr_Proxy	typeref:typename:int
embedded_module	src/pybind11/include/pybind11/embed.h	/^    embedded_module(const char *name, init_t init) {$/;"	f	struct:embedded_module
embedded_module	src/pybind11/include/pybind11/embed.h	/^struct embedded_module {$/;"	s
empty	src/pybind11/tests/test_copy_move.cpp	/^struct empty {$/;"	s	file:
enable_buffer_protocol	src/pybind11/include/pybind11/class_support.h	/^inline void enable_buffer_protocol(PyHeapTypeObject *heap_type) {$/;"	f	typeref:typename:void
enable_dynamic_attributes	src/pybind11/include/pybind11/class_support.h	/^inline void enable_dynamic_attributes(PyHeapTypeObject *heap_type) {$/;"	f	typeref:typename:void
enable_function_signatures	src/pybind11/include/pybind11/options.h	/^    options& enable_function_signatures() & { global_state().show_function_signatures = true; re/;"	f	class:options	typeref:typename:options &
enable_if_t	src/pybind11/include/pybind11/common.h	/^template <bool B, typename T = void> using enable_if_t = typename std::enable_if<B, T>::type;$/;"	t	typeref:typename:std::enable_if<B,T>::type
enable_user_defined_docstrings	src/pybind11/include/pybind11/options.h	/^    options& enable_user_defined_docstrings() & { global_state().show_user_defined_docstrings = /;"	f	class:options	typeref:typename:options &
enabled	src/pybind11/tests/test_call_policies.cpp	/^    static bool enabled;$/;"	m	struct:CustomGuard	typeref:typename:bool	file:
enabled	src/pybind11/tests/test_call_policies.cpp	/^    static bool enabled;$/;"	m	struct:DependentGuard	typeref:typename:bool	file:
enabled	src/pybind11/tests/test_call_policies.cpp	/^bool CustomGuard::enabled = false;$/;"	m	class:CustomGuard	typeref:typename:bool
enabled	src/pybind11/tests/test_call_policies.cpp	/^bool DependentGuard::enabled = false;$/;"	m	class:DependentGuard	typeref:typename:bool
end	src/pybind11/include/pybind11/cast.h	/^    iterator end() { return iterator(tinfo.size()); }$/;"	f	struct:values_and_holders	typeref:typename:iterator
end	src/pybind11/include/pybind11/pybind11.h	/^    Sentinel end;$/;"	m	struct:iterator_state	typeref:typename:Sentinel
end	src/pybind11/include/pybind11/pytypes.h	/^    detail::dict_iterator end() const { return {}; }$/;"	f	class:dict	typeref:typename:detail::dict_iterator
end	src/pybind11/include/pybind11/pytypes.h	/^    detail::list_iterator end() const { return {*this, PyList_GET_SIZE(m_ptr)}; }$/;"	f	class:list	typeref:typename:detail::list_iterator
end	src/pybind11/include/pybind11/pytypes.h	/^    detail::sequence_iterator end() const { return {*this, PySequence_Size(m_ptr)}; }$/;"	f	class:sequence	typeref:typename:detail::sequence_iterator
end	src/pybind11/include/pybind11/pytypes.h	/^    detail::tuple_iterator end() const { return {*this, PyTuple_GET_SIZE(m_ptr)}; }$/;"	f	class:tuple	typeref:typename:detail::tuple_iterator
end	src/pybind11/include/pybind11/pytypes.h	/^template <typename D> iterator object_api<D>::end() const { return iterator::sentinel(); }$/;"	f	class:object_api	typeref:typename:iterator
end	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    const float *end() const { return m_data+m_size; }$/;"	f	class:Sequence	typeref:typename:const float *	file:
end	src/pybind11/tools/clang/cindex.py	/^    def end(self):$/;"	m	class:SourceRange
ensure	src/pybind11/include/pybind11/numpy.h	/^    static array ensure(handle h, int ExtraFlags = 0) {$/;"	f	class:array	typeref:typename:array
ensure	src/pybind11/include/pybind11/numpy.h	/^    static array_t ensure(handle h) {$/;"	f	class:array_t	typeref:typename:array_t
enum_	src/pybind11/include/pybind11/pybind11.h	/^    enum_(const handle &scope, const char *name, const Extra&... extra)$/;"	f	class:enum_
enum_	src/pybind11/include/pybind11/pybind11.h	/^template <typename Type> class enum_ : public class_<Type> {$/;"	c
enum_type	src/pybind11/tools/clang/cindex.py	/^    def enum_type(self):$/;"	m	class:Cursor
enum_value	src/pybind11/tools/clang/cindex.py	/^    def enum_value(self):$/;"	m	class:Cursor
enums	src/pybind11/tests/test_enum.cpp	/^test_initializer enums([](py::module &m) {$/;"	v	typeref:typename:test_initializer
epub	src/pybind11/docs/Makefile	/^epub:$/;"	t
epub	tools/genmsg/doc/Makefile	/^epub:$/;"	t
equal	src/pybind11/include/pybind11/pytypes.h	/^    bool equal(const dict_readonly &b) const { return pos == b.pos; }$/;"	f	class:dict_readonly	typeref:typename:bool
equal	src/pybind11/include/pybind11/pytypes.h	/^    bool equal(const sequence_fast_readonly &b) const { return ptr == b.ptr; }$/;"	f	class:sequence_fast_readonly	typeref:typename:bool
equal	src/pybind11/include/pybind11/pytypes.h	/^    bool equal(const sequence_slow_readwrite &b) const { return index == b.index; }$/;"	f	class:sequence_slow_readwrite	typeref:typename:bool
erase_all	src/pybind11/include/pybind11/typeid.h	/^inline void erase_all(std::string &string, const std::string &search) {$/;"	f
erase_msg	src/elka_comm/common/elka_comm.cpp	/^void elka::SerialBuffer::erase_msg(msg_id_t msg_id, uint16_t msg_num,$/;"	f	class:elka::SerialBuffer	typeref:typename:void
error_already_set	src/pybind11/include/pybind11/common.h	/^    error_already_set() : std::runtime_error(detail::error_string()) {$/;"	f	class:error_already_set
error_already_set	src/pybind11/include/pybind11/common.h	/^    error_already_set(error_already_set &&e)$/;"	f	class:error_already_set
error_already_set	src/pybind11/include/pybind11/common.h	/^class error_already_set : public std::runtime_error {$/;"	c
error_scope	src/pybind11/include/pybind11/common.h	/^    error_scope() { PyErr_Fetch(&type, &value, &trace); }$/;"	f	struct:error_scope
error_scope	src/pybind11/include/pybind11/common.h	/^struct error_scope {$/;"	s
error_string	src/pybind11/include/pybind11/cast.h	/^PYBIND11_NOINLINE inline std::string error_string() {$/;"	f	typeref:typename:PYBIND11_NOINLINE std::string
escape_message_definition	tools/gencpp/src/gencpp/__init__.py	/^def escape_message_definition(definition):$/;"	f
escape_string	tools/gencpp/src/gencpp/__init__.py	/^def escape_string(str):$/;"	f
eval	src/pybind11/include/pybind11/eval.h	/^object eval(const char (&s)[N], object global = globals(), object local = object()) {$/;"	f	typeref:typename:object
eval	src/pybind11/include/pybind11/eval.h	/^object eval(str expr, object global = globals(), object local = object()) {$/;"	f	typeref:typename:object
eval	src/pybind11/tests/test_eval.cpp	/^test_initializer eval([](py::module &m) {$/;"	v	typeref:typename:test_initializer
eval_expr	src/pybind11/include/pybind11/eval.h	/^    eval_expr,$/;"	e	enum:eval_mode
eval_file	src/pybind11/include/pybind11/eval.h	/^object eval_file(str fname, object global = globals(), object local = object()) {$/;"	f	typeref:typename:object
eval_mode	src/pybind11/include/pybind11/eval.h	/^enum eval_mode {$/;"	g
eval_single_statement	src/pybind11/include/pybind11/eval.h	/^    eval_single_statement,$/;"	e	enum:eval_mode
eval_statements	src/pybind11/include/pybind11/eval.h	/^    eval_statements$/;"	e	enum:eval_mode
exactly_one	src/pybind11/include/pybind11/common.h	/^struct exactly_one {$/;"	s
exactly_one	src/pybind11/include/pybind11/common.h	/^struct exactly_one<P, Default> { using type = Default; };$/;"	s
exactly_one_t	src/pybind11/include/pybind11/common.h	/^using exactly_one_t = typename exactly_one<Predicate, Default, Ts...>::type;$/;"	t	typeref:typename:exactly_one<Predicate,Default,Ts...>::type
exception	src/pybind11/include/pybind11/pybind11.h	/^    exception(handle scope, const char *name, PyObject *base = PyExc_Exception) {$/;"	f	class:exception
exception	src/pybind11/include/pybind11/pybind11.h	/^class exception : public object {$/;"	c
exception_matches	src/pybind11/tests/test_exceptions.cpp	/^void exception_matches() {$/;"	f	typeref:typename:void
exclude_patterns	src/pybind11/docs/conf.py	/^exclude_patterns = ['.build', 'release.rst']$/;"	v
exclude_patterns	tools/genmsg/doc/conf.py	/^exclude_patterns = ['_build']$/;"	v
exec	src/pybind11/include/pybind11/eval.h	/^inline void exec(str expr, object global = globals(), object local = object()) {$/;"	f	typeref:typename:void
exec	src/pybind11/include/pybind11/eval.h	/^void exec(const char (&s)[N], object global = globals(), object local = object()) {$/;"	f	typeref:typename:void
execute	src/pybind11/include/pybind11/operators.h	/^    template <typename Class, typename... Extra> void execute(Class &cl, const Extra&... extra) /;"	f	struct:op_	typeref:typename:void
execute	src/pybind11/include/pybind11/pybind11.h	/^    static void execute(Class &cl, const Extra&... extra) {$/;"	f	struct:init	typeref:typename:void
execute	src/pybind11/include/pybind11/pybind11.h	/^    static void execute(Class &cl, const Extra&... extra) {$/;"	f	struct:init_alias	typeref:typename:void
execute_cast	src/pybind11/include/pybind11/operators.h	/^    template <typename Class, typename... Extra> void execute_cast(Class &cl, const Extra&... ex/;"	f	struct:op_	typeref:typename:void
exp_opt_int	src/pybind11/tests/test_stl.cpp	/^    using exp_opt_int = std::experimental::optional<int>;$/;"	t	function:TEST_SUBMODULE	typeref:typename:std::experimental::optional<int>	file:
exp_opt_no_assign	src/pybind11/tests/test_stl.cpp	/^    using exp_opt_no_assign = std::experimental::optional<NoAssign>;$/;"	t	function:TEST_SUBMODULE	typeref:typename:std::experimental::optional<NoAssign>	file:
expand_side_effects	src/pybind11/include/pybind11/common.h	/^using expand_side_effects = bool[];$/;"	t	typeref:typename:bool[]
expected_num_args	src/pybind11/include/pybind11/attr.h	/^constexpr bool expected_num_args(size_t nargs, bool has_args, bool has_kwargs) {$/;"	f	typeref:typename:bool
export_values	src/pybind11/include/pybind11/pybind11.h	/^    enum_& export_values() {$/;"	f	class:enum_	typeref:typename:enum_ &
extensions	src/pybind11/docs/conf.py	/^extensions = ['breathe']$/;"	v
extensions	tools/genmsg/doc/conf.py	/^extensions = ['sphinx.ext.autodoc', 'sphinx.ext.intersphinx', 'sphinx.ext.todo', 'sphinx.ext.vie/;"	v
extent	src/pybind11/include/pybind11/numpy.h	/^    static constexpr size_t extent = N;$/;"	m	struct:array_info	typeref:typename:constexpr size_t
extent	src/pybind11/tools/clang/cindex.py	/^    def extent(self):$/;"	m	class:Cursor
extent	src/pybind11/tools/clang/cindex.py	/^    def extent(self):$/;"	m	class:Token
extents	src/pybind11/include/pybind11/numpy.h	/^    static PYBIND11_DESCR extents() { return _(""); }$/;"	f	struct:array_info_scalar	typeref:typename:PYBIND11_DESCR
extents	src/pybind11/include/pybind11/numpy.h	/^    static PYBIND11_DESCR extents() {$/;"	f	struct:array_info	typeref:typename:PYBIND11_DESCR
extra	src/pybind11/tests/test_pickling.cpp	/^    int extra;$/;"	m	class:PickleableWithDict	typeref:typename:int	file:
extra1	src/pybind11/tests/test_pickling.cpp	/^    int extra1() const { return m_extra1; }$/;"	f	class:Pickleable	typeref:typename:int	file:
extra2	src/pybind11/tests/test_pickling.cpp	/^    int extra2() const { return m_extra2; }$/;"	f	class:Pickleable	typeref:typename:int	file:
extract	src/pybind11/tools/mkdoc.py	/^def extract(filename, node, prefix):$/;"	f
extract_guard_t	src/pybind11/include/pybind11/attr.h	/^using extract_guard_t = typename exactly_one_t<is_call_guard, call_guard<>, Extra...>::type;$/;"	t	typeref:typename:exactly_one_t<is_call_guard,call_guard<>,Extra...>::type
f	src/pybind11/include/pybind11/functional.h	/^                struct capture { function_type f; };$/;"	m	struct:type_caster::load::capture	typeref:typename:function_type
f	src/pybind11/include/pybind11/numpy.h	/^    remove_reference_t<Func> f;$/;"	m	struct:vectorize_helper	typeref:typename:remove_reference_t<Func>
f	src/pybind11/include/pybind11/pybind11.h	/^        struct capture { detail::remove_reference_t<Func> f; };$/;"	m	struct:cpp_function::initialize::capture	typeref:typename:detail::remove_reference_t<Func>
f	src/pybind11/tests/test_callbacks.py	/^    def f(*args, **kwargs):$/;"	f	function:test_keyword_args_and_generalized_unpacking	file:
f	src/pybind11/tests/test_methods_and_attributes.cpp	/^        ArgInspector1 f(ArgInspector1 a, ArgAlwaysConverts) { return a; }$/;"	f	class:__anon943d96910102::ArgInspector	typeref:typename:ArgInspector1	file:
f	src/pybind11/tests/test_virtual_functions.cpp	/^        virtual void f() { py::print("A.f()"); }$/;"	f	struct:TEST_SUBMODULE::A	typeref:typename:void	file:
f	src/pybind11/tests/test_virtual_functions.cpp	/^        virtual void f() { py::print("A2.f()"); }$/;"	f	struct:TEST_SUBMODULE::A2	typeref:typename:void	file:
f	src/pybind11/tests/test_virtual_functions.cpp	/^        void f() override {$/;"	f	struct:TEST_SUBMODULE::PyA	typeref:typename:void	file:
f	src/pybind11/tests/test_virtual_functions.cpp	/^        void f() override {$/;"	f	struct:TEST_SUBMODULE::PyA2	typeref:typename:void	file:
f	src/pybind11/tests/test_virtual_functions.py	/^        def f(self):$/;"	m	class:test_alias_delay_initialization1.B
f	src/pybind11/tests/test_virtual_functions.py	/^        def f(self):$/;"	m	class:test_alias_delay_initialization2.B2
f1	src/pybind11/tests/test_constants_and_functions.cpp	/^int f1(int x) noexcept { return x+1; }$/;"	f	namespace:test_exc_sp	typeref:typename:int
f2	src/pybind11/tests/test_constants_and_functions.cpp	/^int f2(int x) noexcept(true) { return x+2; }$/;"	f	namespace:test_exc_sp	typeref:typename:int
f3	src/pybind11/tests/test_constants_and_functions.cpp	/^int f3(int x) noexcept(false) { return x+3; }$/;"	f	namespace:test_exc_sp	typeref:typename:int
f4	src/pybind11/tests/test_constants_and_functions.cpp	/^int f4(int x) throw() { return x+4; } \/\/ Deprecated equivalent to noexcept(true)$/;"	f	namespace:test_exc_sp	typeref:typename:int
f_strides	src/pybind11/include/pybind11/numpy.h	/^    static std::vector<ssize_t> f_strides(const std::vector<ssize_t> &shape, ssize_t itemsize) {$/;"	f	class:array	typeref:typename:std::vector<ssize_t>
f_style	src/pybind11/include/pybind11/numpy.h	/^        f_style = detail::npy_api::NPY_ARRAY_F_CONTIGUOUS_,$/;"	e	enum:array::__anonc556634c0303
f_trivial	src/pybind11/include/pybind11/numpy.h	/^enum class broadcast_trivial { non_trivial, c_trivial, f_trivial };$/;"	e	enum:broadcast_trivial
fail_dim_check	src/pybind11/include/pybind11/numpy.h	/^    void fail_dim_check(ssize_t dim, const std::string& msg) const {$/;"	f	class:array	typeref:typename:void
features	build_elka_data_collection/CMakeFiles/feature_tests.c	/^  const char features[] = {"\\n"$/;"	v	typeref:typename:const char[]
features	build_elka_data_collection/CMakeFiles/feature_tests.cxx	/^  const char features[] = {"\\n"$/;"	v	typeref:typename:const char[]
field_descr	src/pybind11/include/pybind11/numpy.h	/^        struct field_descr { PYBIND11_STR_TYPE name; object format; pybind11::int_ offset; };$/;"	s	function:dtype::strip_padding
field_descriptor	src/pybind11/include/pybind11/numpy.h	/^struct field_descriptor {$/;"	s
fields	src/pybind11/include/pybind11/numpy.h	/^    PyObject *fields;$/;"	m	struct:PyArrayDescr_Proxy	typeref:typename:PyObject *
fields	tools/genmsg/src/genmsg/msgs.py	/^    def fields(self):$/;"	m	class:MsgSpec
file	src/pybind11/tools/clang/cindex.py	/^    def file(self):$/;"	m	class:SourceLocation
filename	src/pybind11/tools/clang/cindex.py	/^    def filename(self):$/;"	m	class:CompileCommand
filenames	src/pybind11/tools/mkdoc.py	/^    filenames = []$/;"	v
filterwarnings	src/pybind11/tests/pytest.ini	/^filterwarnings =$/;"	k	section:pytest
finalize_interpreter	src/pybind11/include/pybind11/embed.h	/^inline void finalize_interpreter() {$/;"	f	typeref:typename:void
find	src/pybind11/include/pybind11/cast.h	/^    iterator find(const type_info *find_type) {$/;"	f	struct:values_and_holders	typeref:typename:iterator
find_msg_dependencies	tools/genmsg/src/genmsg/deps.py	/^def find_msg_dependencies(pkg_name, msg_file, search_paths):$/;"	f
find_msg_dependencies_with_type	tools/genmsg/src/genmsg/deps.py	/^def find_msg_dependencies_with_type(pkg_name, msg_file, search_paths):$/;"	f
find_package vs. add_subdirectory	src/pybind11/docs/compiling.rst	/^find_package vs. add_subdirectory$/;"	S	section:Building with CMake
find_srv_dependencies	tools/genmsg/src/genmsg/deps.py	/^def find_srv_dependencies(pkg_name, msg_file, search_paths):$/;"	f
find_srv_dependencies_with_type	tools/genmsg/src/genmsg/deps.py	/^def find_srv_dependencies_with_type(pkg_name, msg_file, search_paths):$/;"	f
first	src/pybind11/include/pybind11/common.h	/^constexpr int first(int i) { return i; }$/;"	f	typeref:typename:NAMESPACE_BEGIN (constexpr_impl)constexpr int
first	src/pybind11/include/pybind11/common.h	/^constexpr int first(int i, T v, Ts... vs) { return v ? i : first(i + 1, vs...); }$/;"	f	typeref:typename:int
first_or_done	src/pybind11/include/pybind11/pybind11.h	/^    bool first_or_done;$/;"	m	struct:iterator_state	typeref:typename:bool
fixed	src/pybind11/include/pybind11/eigen.h	/^        fixed = size != Eigen::Dynamic, \/\/ Fully-fixed size$/;"	m	struct:EigenProps	typeref:typename:constexpr bool
fixed_cols	src/pybind11/include/pybind11/eigen.h	/^        fixed_cols = cols != Eigen::Dynamic,$/;"	m	struct:EigenProps	typeref:typename:constexpr bool
fixed_rows	src/pybind11/include/pybind11/eigen.h	/^        fixed_rows = rows != Eigen::Dynamic,$/;"	m	struct:EigenProps	typeref:typename:constexpr bool
fixits	src/pybind11/tools/clang/cindex.py	/^    def fixits(self):$/;"	m	class:Diagnostic
flag_noconvert	src/pybind11/include/pybind11/cast.h	/^    bool flag_noconvert : 1; \/\/\/< If set, do not allow conversion (requires a supporting type/;"	m	struct:arg	typeref:typename:bool:1
flag_none	src/pybind11/include/pybind11/cast.h	/^    bool flag_none : 1; \/\/\/< If set (the default), allow None to be passed to this argument$/;"	m	struct:arg	typeref:typename:bool:1
flags	src/pybind11/include/pybind11/numpy.h	/^    char flags;$/;"	m	struct:PyArrayDescr_Proxy	typeref:typename:char
flags	src/pybind11/include/pybind11/numpy.h	/^    int flags() const {$/;"	f	class:array	typeref:typename:int
flags	src/pybind11/include/pybind11/numpy.h	/^    int flags;$/;"	m	struct:PyArray_Proxy	typeref:typename:int
flags	src/pybind11/include/pybind11/numpy.h	/^    int flags;$/;"	m	struct:PyVoidScalarObject_Proxy	typeref:typename:int
float_	src/pybind11/include/pybind11/pytypes.h	/^    float_(double value = .0) : object(PyFloat_FromDouble((double) value), stolen_t{}) {$/;"	f	class:float_
float_	src/pybind11/include/pybind11/pytypes.h	/^    float_(float value) : object(PyFloat_FromDouble((double) value), stolen_t{}) {$/;"	f	class:float_	typeref:typename:PYBIND11_OBJECT_CVT (float_,object,PyFloat_Check,PyNumber_Float)
float_	src/pybind11/include/pybind11/pytypes.h	/^class float_ : public object {$/;"	c
float_	src/pybind11/tests/test_numpy_dtypes.cpp	/^    float float_;$/;"	m	struct:PartialStruct	typeref:typename:float	file:
float_	src/pybind11/tests/test_numpy_dtypes.cpp	/^    float float_;$/;"	m	struct:SimpleStruct	typeref:typename:float	file:
fn_type	src/pybind11/tests/test_callbacks.cpp	/^    using fn_type = int (*)(int);$/;"	t	function:test_dummy_function	file:
foo	src/pybind11/tests/test_kwargs_and_defaults.cpp	/^    void foo(int, float) {}$/;"	f	struct:KWClass	typeref:typename:void	file:
foo	src/pybind11/tests/test_multiple_inheritance.cpp	/^    int foo() { return i; }$/;"	f	struct:Base1	typeref:typename:int	file:
foo	src/pybind11/tests/test_multiple_inheritance.cpp	/^    int foo() { return i; }$/;"	f	struct:Base1a	typeref:typename:int	file:
foo	src/pybind11/tests/test_multiple_inheritance.py	/^        def foo(self):$/;"	m	class:test_multiple_inheritance_mix1.Base1
foo	src/pybind11/tests/test_smart_ptr.cpp	/^struct ElementBase { virtual void foo() { } \/* Force creation of virtual table *\/ };$/;"	f	struct:ElementBase	typeref:typename:void	file:
forcecast	src/pybind11/include/pybind11/numpy.h	/^        forcecast = detail::npy_api::NPY_ARRAY_FORCECAST_$/;"	e	enum:array::__anonc556634c0303
format	src/pybind11/include/pybind11/buffer_info.h	/^    std::string format;           \/\/ For homogeneous buffers, this should be set to format_des/;"	m	struct:buffer_info	typeref:typename:std::string
format	src/pybind11/include/pybind11/common.h	/^    static std::string format() { return std::string(1, c); }$/;"	f	struct:format_descriptor	typeref:typename:std::string
format	src/pybind11/include/pybind11/complex.h	/^    static std::string format() { return std::string(value); }$/;"	f	struct:format_descriptor	typeref:typename:std::string
format	src/pybind11/include/pybind11/numpy.h	/^        struct field_descr { PYBIND11_STR_TYPE name; object format; pybind11::int_ offset; };$/;"	m	struct:dtype::strip_padding::field_descr	typeref:typename:object
format	src/pybind11/include/pybind11/numpy.h	/^    static std::string format() { return std::to_string(N) + "s"; }$/;"	f	struct:format_descriptor	typeref:typename:std::string
format	src/pybind11/include/pybind11/numpy.h	/^    static std::string format() {$/;"	f	struct:format_descriptor	typeref:typename:std::string
format	src/pybind11/include/pybind11/numpy.h	/^    static std::string format() {$/;"	f	struct:npy_format_descriptor	typeref:typename:std::string
format	src/pybind11/include/pybind11/numpy.h	/^    std::string format;$/;"	m	struct:field_descriptor	typeref:typename:std::string
format	src/pybind11/include/pybind11/pytypes.h	/^    str format(Args &&...args) const {$/;"	f	class:str	typeref:typename:str
format_descriptor	src/pybind11/include/pybind11/common.h	/^template <typename T, typename SFINAE = void> struct format_descriptor { };$/;"	s
format_descriptor	src/pybind11/include/pybind11/common.h	/^template <typename T> struct format_descriptor<T, detail::enable_if_t<std::is_arithmetic<T>::val/;"	s
format_descriptor	src/pybind11/include/pybind11/complex.h	/^template <typename T> struct format_descriptor<std::complex<T>, detail::enable_if_t<std::is_floa/;"	s
format_descriptor	src/pybind11/include/pybind11/numpy.h	/^struct format_descriptor<T, detail::enable_if_t<detail::array_info<T>::is_array>> {$/;"	s
format_descriptor	src/pybind11/include/pybind11/numpy.h	/^struct format_descriptor<T, detail::enable_if_t<detail::is_pod_struct<T>::value>> {$/;"	s
format_descriptor	src/pybind11/include/pybind11/numpy.h	/^struct format_descriptor<T, detail::enable_if_t<std::is_enum<T>::value>> {$/;"	s
format_descriptor	src/pybind11/include/pybind11/numpy.h	/^template <size_t N> struct format_descriptor<char[N]> {$/;"	s
format_descriptor	src/pybind11/include/pybind11/numpy.h	/^template <size_t N> struct format_descriptor<std::array<char, N>> {$/;"	s
format_ptrs	src/pybind11/tests/constructor_stats.h	/^auto format_ptrs(T &&x) -> decltype(std::forward<T>(x)) { return std::forward<T>(x); }$/;"	f	typeref:typename:decltype (std::forward<T> (x))
format_ptrs	src/pybind11/tests/constructor_stats.h	/^inline const char *format_ptrs(const char *p) { return p; }$/;"	f	typeref:typename:const char *
format_ptrs	src/pybind11/tests/constructor_stats.h	/^py::str format_ptrs(T *p) { return "{:#x}"_s.format(reinterpret_cast<std::uintptr_t>(p)); }$/;"	f	typeref:typename:py::str
format_str	src/pybind11/include/pybind11/numpy.h	/^    std::string format_str;$/;"	m	struct:numpy_type_info	typeref:typename:std::string
forward_like	src/pybind11/include/pybind11/stl.h	/^forwarded_type<T, U> forward_like(U &&u) {$/;"	f	typeref:typename:forwarded_type<T,U>
forwarded_type	src/pybind11/include/pybind11/stl.h	/^using forwarded_type = conditional_t<$/;"	t	typeref:typename:conditional_t<std::is_lvalue_reference<T>::value,remove_reference_t<U> &,remove_reference_t<U> &&>
found	src/pybind11/include/pybind11/common.h	/^    static constexpr auto found = constexpr_sum(Predicate<Ts>::value...);$/;"	m	struct:exactly_one	typeref:typename:constexpr auto
fp_from	src/elka_comm/gnd_station/inet_comm.h	/^	FILE *fp_from;$/;"	m	struct:Child	typeref:typename:FILE *
fp_from	src/elka_comm/posix/inet_comm.h	/^	FILE *fp_from;$/;"	m	struct:Child	typeref:typename:FILE *
fp_to	src/elka_comm/gnd_station/inet_comm.h	/^	FILE *fp_to;$/;"	m	struct:Child	typeref:typename:FILE *
fp_to	src/elka_comm/posix/inet_comm.h	/^	FILE *fp_to;$/;"	m	struct:Child	typeref:typename:FILE *
free_data	src/pybind11/include/pybind11/attr.h	/^    void (*free_data) (function_record *ptr) = nullptr;$/;"	m	struct:function_record	typeref:typename:void (*)(function_record * ptr)
fromDirectory	src/pybind11/tools/clang/cindex.py	/^    def fromDirectory(buildDir):$/;"	m	class:CompilationDatabase
from_args	src/pybind11/include/pybind11/numpy.h	/^    static dtype from_args(object args) {$/;"	f	class:dtype	typeref:typename:dtype
from_ast_file	src/pybind11/tools/clang/cindex.py	/^    def from_ast_file(cls, filename, index=None):$/;"	m	class:TranslationUnit
from_cursor_result	src/pybind11/tools/clang/cindex.py	/^    def from_cursor_result(res, fn, args):$/;"	m	class:Cursor
from_cursor_result	src/pybind11/tools/clang/cindex.py	/^    def from_cursor_result(res, fn, args):$/;"	m	class:File
from_id	src/pybind11/tools/clang/cindex.py	/^    def from_id(cls, id):$/;"	m	class:BaseEnumeration
from_id	src/pybind11/tools/clang/cindex.py	/^    def from_id(id):$/;"	m	class:StorageClass
from_location	src/pybind11/tools/clang/cindex.py	/^    def from_location(tu, location):$/;"	m	class:Cursor
from_locations	src/pybind11/tools/clang/cindex.py	/^    def from_locations(start, end):$/;"	m	class:SourceRange
from_name	src/pybind11/tools/clang/cindex.py	/^    def from_name(translation_unit, file_name):$/;"	m	class:File
from_offset	src/pybind11/tools/clang/cindex.py	/^    def from_offset(tu, file, offset):$/;"	m	class:SourceLocation
from_param	src/pybind11/tools/clang/cindex.py	/^    def from_param(self):$/;"	m	class:AccessSpecifier
from_param	src/pybind11/tools/clang/cindex.py	/^    def from_param(self):$/;"	m	class:BaseEnumeration
from_param	src/pybind11/tools/clang/cindex.py	/^    def from_param(self):$/;"	m	class:ClangObject
from_param	src/pybind11/tools/clang/cindex.py	/^    def from_param(self):$/;"	m	class:CodeCompletionResults
from_param	src/pybind11/tools/clang/cindex.py	/^    def from_param(self):$/;"	m	class:Diagnostic
from_param	src/pybind11/tools/clang/cindex.py	/^    def from_param(self):$/;"	m	class:RefQualifierKind
from_param	src/pybind11/tools/clang/cindex.py	/^    def from_param(self):$/;"	m	class:StorageClass
from_position	src/pybind11/tools/clang/cindex.py	/^    def from_position(tu, file, line, column):$/;"	m	class:SourceLocation
from_result	src/pybind11/tools/clang/cindex.py	/^    def from_result(res, fn, args):$/;"	m	class:CompilationDatabase
from_result	src/pybind11/tools/clang/cindex.py	/^    def from_result(res, fn, args):$/;"	m	class:CompileCommands
from_result	src/pybind11/tools/clang/cindex.py	/^    def from_result(res, fn, args):$/;"	m	class:Cursor
from_result	src/pybind11/tools/clang/cindex.py	/^    def from_result(res, fn, args):$/;"	m	class:Type
from_result	src/pybind11/tools/clang/cindex.py	/^    def from_result(res, fn, args):$/;"	m	class:_CXString
from_source	src/pybind11/tools/clang/cindex.py	/^    def from_source(cls, filename, args=None, unsaved_files=None, options=0,$/;"	m	class:TranslationUnit
from_value	src/pybind11/tools/clang/cindex.py	/^    def from_value(value):$/;"	m	class:TokenKind
ftdi	serial/python/gui.py	/^import ftdi_uart as ftdi$/;"	I
full_type_name	tools/genmsg/scripts/genmsg_check_deps.py	/^full_type_name = compute_full_type_name(pkg_name, os.path.basename(msg_file))$/;"	v
func	src/pybind11/include/pybind11/cast.h	/^    const function_record &func;$/;"	m	struct:function_call	typeref:typename:const function_record &
func	src/pybind11/include/pybind11/pybind11.h	/^        struct capture { Func func; };$/;"	m	struct:class_::def_buffer::capture	typeref:typename:Func
func	src/pybind11/tests/test_pytypes.py	/^        def func(self, x, *args):$/;"	m	class:test_accessors.TestObject
func1	src/pybind11/tests/test_callbacks.py	/^    def func1():$/;"	f	function:test_callbacks	file:
func2	src/pybind11/tests/test_callbacks.py	/^    def func2(a, b, c, d):$/;"	f	function:test_callbacks	file:
func3	src/pybind11/tests/test_callbacks.py	/^    def func3(a):$/;"	f	function:test_callbacks	file:
func_accepting_func_accepting_base	src/pybind11/tests/test_callbacks.cpp	/^void func_accepting_func_accepting_base(std::function<double(AbstractBase&)>) { }$/;"	f	typeref:typename:void
function	src/pybind11/include/pybind11/pytypes.h	/^class function : public object {$/;"	c
functionList	src/pybind11/tools/clang/cindex.py	/^functionList = [$/;"	v
function_call	src/pybind11/include/pybind11/attr.h	/^inline function_call::function_call(function_record &f, handle p) :$/;"	f	class:function_call
function_call	src/pybind11/include/pybind11/cast.h	/^struct function_call {$/;"	s
function_exists	src/pybind11/tools/clang/cindex.py	/^    def function_exists(self, name):$/;"	m	class:Config
function_record	src/pybind11/include/pybind11/attr.h	/^    function_record()$/;"	f	struct:function_record
function_record	src/pybind11/include/pybind11/attr.h	/^struct function_record {$/;"	s
function_type	src/pybind11/include/pybind11/functional.h	/^    using function_type = Return (*) (Args...);$/;"	t	struct:type_caster
functions	src/pybind11/include/pybind11/numpy.h	/^    enum functions {$/;"	g	struct:npy_api
g	src/pybind11/tests/test_methods_and_attributes.cpp	/^        std::string g(ArgInspector1 a, const ArgInspector1 &b, int c, ArgInspector2 *d, ArgAlway/;"	f	class:__anon943d96910102::ArgInspector	typeref:typename:std::string	file:
gc	src/pybind11/tests/constructor_stats.h	/^    static void gc() {$/;"	f	class:ConstructorStats	typeref:typename:void
gc_collect	src/pybind11/tests/conftest.py	/^def gc_collect():$/;"	f
generate_by_template	tools/px_generate_uorb_topic_files.py	/^def generate_by_template(output_file, template_file, em_globals):$/;"	f
generate_doxygen_xml	src/pybind11/docs/conf.py	/^def generate_doxygen_xml(app):$/;"	f
generate_dummy_code_boost	src/pybind11/docs/benchmark.py	/^def generate_dummy_code_boost(nclasses=10):$/;"	f
generate_dummy_code_pybind11	src/pybind11/docs/benchmark.py	/^def generate_dummy_code_pybind11(nclasses=10):$/;"	f
generate_fixed_length_assigns	tools/gencpp/src/gencpp/__init__.py	/^def generate_fixed_length_assigns(spec, container_gets_allocator, cpp_name_prefix):$/;"	f
generate_from_command_line_options	tools/genmsg/src/genmsg/template_tools.py	/^def generate_from_command_line_options(argv, msg_template_dict, srv_template_dict, module_templa/;"	f
generate_from_file	tools/genmsg/src/genmsg/template_tools.py	/^def generate_from_file(input_file, package_name, output_dir, template_dir, include_path, msg_tem/;"	f
generate_idx	tools/px_generate_uorb_topic_files.py	/^            generate_idx = 0$/;"	v
generate_idx	tools/px_generate_uorb_topic_files.py	/^            generate_idx = 1$/;"	v
generate_initializer_list	tools/gencpp/src/gencpp/__init__.py	/^def generate_initializer_list(spec, container_gets_allocator):$/;"	f
generate_module	tools/genmsg/src/genmsg/template_tools.py	/^def generate_module(package_name, output_dir, template_dir, template_dict):$/;"	f
generate_output_from_file	tools/px_generate_uorb_topic_files.py	/^def generate_output_from_file(format_idx, filename, outputdir, templatedir, includepath):$/;"	f
generate_topics_list_file	tools/px_generate_uorb_topic_files.py	/^def generate_topics_list_file(msgdir, outputdir, templatedir):$/;"	f
generate_topics_list_file_from_files	tools/px_generate_uorb_topic_files.py	/^def generate_topics_list_file_from_files(files, outputdir, templatedir):$/;"	f
generic_item	src/pybind11/include/pybind11/pytypes.h	/^struct generic_item {$/;"	s
generic_iterator	src/pybind11/include/pybind11/pytypes.h	/^    generic_iterator(handle seq, ssize_t index) : Policy(seq, index) { }$/;"	f	class:generic_iterator
generic_iterator	src/pybind11/include/pybind11/pytypes.h	/^class generic_iterator : public Policy {$/;"	c
generic_type	src/pybind11/include/pybind11/pybind11.h	/^class generic_type : public object {$/;"	c
genmsg Python API	tools/genmsg/doc/python_api.rst	/^genmsg Python API$/;"	c
genmsg:  generating code from ros .msg format	tools/genmsg/doc/index.rst	/^genmsg:  generating code from ros .msg format$/;"	c
get	src/pybind11/include/pybind11/cast.h	/^    static auto get(const T &p) -> decltype(p.get()) { return p.get(); }$/;"	f	struct:holder_helper	typeref:typename:decltype (p.get ())
get	src/pybind11/include/pybind11/numpy.h	/^    static npy_api& get() {$/;"	f	struct:npy_api	typeref:typename:npy_api &
get	src/pybind11/include/pybind11/pytypes.h	/^    static object get(handle obj, const char *key) { return getattr(obj, key); }$/;"	f	struct:str_attr	typeref:typename:object
get	src/pybind11/include/pybind11/pytypes.h	/^    static object get(handle obj, handle key) { return getattr(obj, key); }$/;"	f	struct:obj_attr	typeref:typename:object
get	src/pybind11/include/pybind11/pytypes.h	/^    static object get(handle obj, handle key) {$/;"	f	struct:generic_item	typeref:typename:object
get	src/pybind11/include/pybind11/pytypes.h	/^    static object get(handle obj, size_t index) {$/;"	f	struct:list_item	typeref:typename:object
get	src/pybind11/include/pybind11/pytypes.h	/^    static object get(handle obj, size_t index) {$/;"	f	struct:sequence_item	typeref:typename:object
get	src/pybind11/include/pybind11/pytypes.h	/^    static object get(handle obj, size_t index) {$/;"	f	struct:tuple_item	typeref:typename:object
get	src/pybind11/tests/constructor_stats.h	/^    static ConstructorStats& get(py::object class_) {$/;"	f	class:ConstructorStats	typeref:typename:ConstructorStats &
get	src/pybind11/tests/constructor_stats.h	/^    static ConstructorStats& get(std::type_index type) {$/;"	f	class:ConstructorStats	typeref:typename:ConstructorStats &
get	src/pybind11/tests/constructor_stats.h	/^    template <typename T> static ConstructorStats& get() {$/;"	f	class:ConstructorStats	typeref:typename:ConstructorStats &
get	src/pybind11/tests/test_eigen.cpp	/^        Eigen::MatrixXd &get() { return mat; }$/;"	f	class:__anon898d062d0102::ReturnTester	typeref:typename:Eigen::MatrixXd &	file:
get	src/pybind11/tests/test_methods_and_attributes.cpp	/^    int get() const { return value; }$/;"	f	struct:TestProperties	typeref:typename:int	file:
get	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    std::string get(std::string key) const {$/;"	f	class:StringMap	typeref:typename:std::string	file:
get	src/pybind11/tests/test_smart_ptr.cpp	/^        static const T *get(const ref<T> &p) { return p.get_ptr(); }$/;"	f	struct:pybind11::detail::holder_helper	typeref:typename:const T *	file:
get	src/pybind11/tests/test_smart_ptr.cpp	/^    T *get() { return ptr.get(); }$/;"	f	class:huge_unique_ptr	typeref:typename:T *	file:
get	src/pybind11/tests/test_smart_ptr.cpp	/^    T* get() const { return impl.get(); }$/;"	f	class:CustomUniquePtr	typeref:typename:T *	file:
get1	src/pybind11/tests/test_methods_and_attributes.cpp	/^    const SimpleValue &get1() const { return v1; }$/;"	f	struct:TestPropRVP	typeref:typename:const SimpleValue &	file:
get2	src/pybind11/tests/test_methods_and_attributes.cpp	/^    const SimpleValue &get2() const { return v2; }$/;"	f	struct:TestPropRVP	typeref:typename:const SimpleValue &	file:
getAllCompileCommands	src/pybind11/tools/clang/cindex.py	/^    def getAllCompileCommands(self):$/;"	m	class:CompilationDatabase
getCompileCommands	src/pybind11/tools/clang/cindex.py	/^    def getCompileCommands(self, filename):$/;"	m	class:CompilationDatabase
getPtr	src/pybind11/tests/test_eigen.cpp	/^        Eigen::MatrixXd *getPtr() { return &mat; }$/;"	f	class:__anon898d062d0102::ReturnTester	typeref:typename:Eigen::MatrixXd *	file:
getRefCount	src/pybind11/tests/object.h	/^    int getRefCount() const { return m_refCount; };$/;"	f	class:Object	typeref:typename:int
getValue	src/pybind11/tests/test_docstring_options.cpp	/^    int getValue() const { return value; }$/;"	f	struct:DocstringTestFoo	typeref:typename:int	file:
get_a1	src/pybind11/tests/test_modules.cpp	/^    A &get_a1() { return a1; }$/;"	f	class:B	typeref:typename:A &	file:
get_a2	src/pybind11/tests/test_modules.cpp	/^    A &get_a2() { return a2; }$/;"	f	class:B	typeref:typename:A &	file:
get_align	src/pybind11/tools/clang/cindex.py	/^    def get_align(self):$/;"	m	class:Type
get_all_depends	tools/genmsg/src/genmsg/msg_loader.py	/^    def get_all_depends(self, full_msg_type):$/;"	m	class:MsgContext
get_all_kinds	src/pybind11/tools/clang/cindex.py	/^    def get_all_kinds():$/;"	m	class:CursorKind
get_arguments	src/pybind11/tools/clang/cindex.py	/^    def get_arguments(self):$/;"	m	class:Cursor
get_array_element_type	src/pybind11/tools/clang/cindex.py	/^    def get_array_element_type(self):$/;"	m	class:Type
get_array_size	src/pybind11/tools/clang/cindex.py	/^    def get_array_size(self):$/;"	m	class:Type
get_bitfield_width	src/pybind11/tools/clang/cindex.py	/^    def get_bitfield_width(self):$/;"	m	class:Cursor
get_buffer	src/pybind11/include/pybind11/cast.h	/^    buffer_info *(*get_buffer)(PyObject *, void *) = nullptr;$/;"	m	struct:type_info	typeref:typename:buffer_info * (*)(PyObject *,void *)
get_buffer_data	src/pybind11/include/pybind11/cast.h	/^    void *get_buffer_data = nullptr;$/;"	m	struct:type_info	typeref:typename:void *
get_buffer_info	src/pybind11/tests/test_buffers.cpp	/^    py::buffer_info get_buffer_info() const {$/;"	f	class:ConstPTMFBuffer	typeref:typename:py::buffer_info	file:
get_buffer_info	src/pybind11/tests/test_buffers.cpp	/^    py::buffer_info get_buffer_info() {$/;"	f	struct:PTMFBuffer	typeref:typename:py::buffer_info	file:
get_buffer_msg	src/elka_comm/common/elka_comm.cpp	/^elka::ElkaBufferMsg *elka::SerialBuffer::get_buffer_msg($/;"	f	class:elka::SerialBuffer	typeref:typename:elka::ElkaBufferMsg *
get_cache	src/pybind11/include/pybind11/pytypes.h	/^    object &get_cache() const {$/;"	f	class:accessor	typeref:typename:object &
get_canonical	src/pybind11/tools/clang/cindex.py	/^    def get_canonical(self):$/;"	m	class:Type
get_children	src/pybind11/tools/clang/cindex.py	/^    def get_children(self):$/;"	m	class:Cursor
get_children_fields	tools/px_generate_uorb_topic_helper.py	/^def get_children_fields(base_type, search_path):$/;"	f
get_cindex_library	src/pybind11/tools/clang/cindex.py	/^    def get_cindex_library(self):$/;"	m	class:Config
get_class_type	src/pybind11/tools/clang/cindex.py	/^    def get_class_type(self):$/;"	m	class:Type
get_cm	src/pybind11/tests/test_eigen.cpp	/^Eigen::MatrixXd &get_cm() {$/;"	f	typeref:typename:Eigen::MatrixXd &
get_declaration	src/pybind11/tools/clang/cindex.py	/^    def get_declaration(self):$/;"	m	class:Type
get_definition	src/pybind11/tools/clang/cindex.py	/^    def get_definition(self):$/;"	m	class:Cursor
get_depends	tools/genmsg/src/genmsg/msg_loader.py	/^    def get_depends(self, full_msg_type):$/;"	m	class:MsgContext
get_dev_id_t	src/elka_comm/common/elka.cpp	/^void get_dev_id_t(dev_id_t *d) {$/;"	f	typeref:typename:void
get_double	src/pybind11/tests/test_methods_and_attributes.cpp	/^    double get_double() const { return ro_value; }$/;"	f	class:UnregisteredBase	typeref:typename:double	file:
get_duration	src/pybind11/include/pybind11/chrono.h	/^    static const std::chrono::duration<rep, period>& get_duration(const std::chrono::duration<re/;"	f	class:duration_caster	typeref:typename:const std::chrono::duration<rep,period> &
get_duration	src/pybind11/include/pybind11/chrono.h	/^    template <typename Clock> static std::chrono::duration<rep, period> get_duration(const std::/;"	f	class:duration_caster	typeref:typename:std::chrono::duration<rep,period>
get_elem	src/pybind11/tests/test_eigen.cpp	/^double get_elem(Eigen::Ref<const Eigen::MatrixXd> m) { return m(2, 1); };$/;"	f	typeref:typename:double
get_elka_dev	src/elka_comm/posix/elka_manager.cpp	/^elka::PX4Port *elka::Manager::get_elka_dev($/;"	f	class:elka::Manager	typeref:typename:elka::PX4Port *
get_elka_msg_id	src/elka_comm/common/elka.cpp	/^void get_elka_msg_id(msg_id_t *msg_id, struct elka_msg_id_s &msg_id_struct) {$/;"	f	typeref:typename:void
get_elka_msg_id	src/elka_comm/common/elka.cpp	/^void get_elka_msg_id(msg_id_t *msg_id,$/;"	f	typeref:typename:void
get_elka_msg_id_attr	src/elka_comm/common/elka.cpp	/^void get_elka_msg_id_attr($/;"	f	typeref:typename:void
get_extent	src/pybind11/tools/clang/cindex.py	/^    def get_extent(self, filename, locations):$/;"	m	class:TranslationUnit
get_field_offsetof	src/pybind11/tools/clang/cindex.py	/^    def get_field_offsetof(self):$/;"	m	class:Cursor
get_fields	src/pybind11/tools/clang/cindex.py	/^    def get_fields(self):$/;"	m	class:Type
get_file	src/pybind11/tools/clang/cindex.py	/^    def get_file(self, filename):$/;"	m	class:TranslationUnit
get_file	tools/genmsg/src/genmsg/msg_loader.py	/^    def get_file(self, full_msg_type):$/;"	m	class:MsgContext
get_filename	src/pybind11/tools/clang/cindex.py	/^    def get_filename(self):$/;"	m	class:Config
get_format_unbound	src/pybind11/tests/test_numpy_dtypes.cpp	/^std::string get_format_unbound() {$/;"	f	typeref:typename:std::string
get_function	src/pybind11/include/pybind11/pytypes.h	/^inline handle get_function(handle value) {$/;"	f
get_function_record	src/pybind11/include/pybind11/pybind11.h	/^    static detail::function_record *get_function_record(handle h) {$/;"	f	class:class_	typeref:typename:detail::function_record *
get_include	src/pybind11/pybind11/__init__.py	/^def get_include(*args, **kwargs):$/;"	f
get_includes	src/pybind11/tools/clang/cindex.py	/^    def get_includes(self):$/;"	m	class:TranslationUnit
get_instance	src/elka_comm/posix/elka_manager.h	/^  static elka::Manager *get_instance() {$/;"	f	class:elka::Manager	typeref:typename:elka::Manager *
get_instance	src/elka_comm/qurt/snapdragon_uart_manager.h	/^  static uart::Manager *get_instance() {$/;"	f	class:uart::Manager	typeref:typename:uart::Manager *
get_int	src/pybind11/tests/test_methods_and_attributes.cpp	/^    int get_int() const { return rw_value; }$/;"	f	class:UnregisteredBase	typeref:typename:int	file:
get_internals	src/pybind11/include/pybind11/cast.h	/^PYBIND11_NOINLINE inline internals &get_internals() {$/;"	f	typeref:typename:PYBIND11_NOINLINE internals &
get_internals_ptr	src/pybind11/include/pybind11/cast.h	/^internals *&get_internals_ptr() { static internals *internals_ptr = nullptr; return internals_pt/;"	f	typeref:typename:internals * &
get_location	src/pybind11/tools/clang/cindex.py	/^    def get_location(self, filename, position):$/;"	m	class:TranslationUnit
get_movable	src/pybind11/tests/test_virtual_functions.cpp	/^    Movable get_movable(int a, int b) override {$/;"	f	class:NCVirtTrampoline	typeref:typename:Movable	file:
get_movable	src/pybind11/tests/test_virtual_functions.py	/^        def get_movable(self, a, b):$/;"	m	class:test_move_support.NCVirtExt
get_movable	src/pybind11/tests/test_virtual_functions.py	/^        def get_movable(self, a, b):$/;"	m	class:test_move_support.NCVirtExt2
get_msg	src/elka_comm/common/elka_comm.cpp	/^uint8_t elka::CommPort::get_msg($/;"	f	class:elka::CommPort	typeref:typename:uint8_t
get_msg	src/elka_comm/common/elka_comm.cpp	/^uint8_t elka::SerialBuffer::get_msg($/;"	f	class:elka::SerialBuffer	typeref:typename:uint8_t
get_msg_file	tools/genmsg/src/genmsg/msg_loader.py	/^def get_msg_file(package, base_type, search_path, ext=EXT_MSG):$/;"	f
get_msgs_list	tools/px_generate_uorb_topic_files.py	/^def get_msgs_list(msgdir):$/;"	f
get_multi_topics	tools/px_generate_uorb_topic_files.py	/^def get_multi_topics(filename):$/;"	f
get_named_type	src/pybind11/tools/clang/cindex.py	/^    def get_named_type(self):$/;"	m	class:Type
get_next_dev	src/elka_comm/common/elka_comm.cpp	/^bool elka::CommPort::get_next_dev(dev_id_t &end, dev_id_t *nxt) {$/;"	f	class:elka::CommPort	typeref:typename:bool
get_noncopyable	src/pybind11/tests/test_virtual_functions.cpp	/^    NonCopyable get_noncopyable(int a, int b) override {$/;"	f	class:NCVirtTrampoline	typeref:typename:NonCopyable	file:
get_noncopyable	src/pybind11/tests/test_virtual_functions.cpp	/^    virtual NonCopyable get_noncopyable(int a, int b) { return NonCopyable(a, b); }$/;"	f	class:NCVirt	typeref:typename:NonCopyable	file:
get_noncopyable	src/pybind11/tests/test_virtual_functions.py	/^        def get_noncopyable(self, a, b):$/;"	m	class:test_move_support.NCVirtExt
get_noncopyable	src/pybind11/tests/test_virtual_functions.py	/^        def get_noncopyable(self, a, b):$/;"	m	class:test_move_support.NCVirtExt2
get_num_template_arguments	src/pybind11/tools/clang/cindex.py	/^    def get_num_template_arguments(self):$/;"	m	class:Cursor
get_numpy_internals	src/pybind11/include/pybind11/numpy.h	/^inline numpy_internals& get_numpy_internals() {$/;"	f	typeref:typename:numpy_internals &
get_nxt_idx	src/elka_comm/common/elka.cpp	/^uint16_t get_nxt_idx(uint16_t cb_end,$/;"	f	typeref:typename:uint16_t
get_object_handle	src/pybind11/include/pybind11/cast.h	/^PYBIND11_NOINLINE inline handle get_object_handle(const void *ptr, const detail::type_info *type/;"	f	typeref:typename:PYBIND11_NOINLINE handle
get_offset	src/pybind11/tools/clang/cindex.py	/^    def get_offset(self, fieldname):$/;"	m	class:Type
get_one	src/pybind11/tests/test_copy_move.cpp	/^    static const derived& get_one() { return instance_; }$/;"	f	struct:empty	typeref:typename:const derived &	file:
get_or_create_shared_data	src/pybind11/include/pybind11/common.h	/^template<typename T> T& get_or_create_shared_data(const std::string& name) {$/;"	f	typeref:typename:T &
get_overload	src/pybind11/include/pybind11/pybind11.h	/^template <class T> function get_overload(const T *this_ptr, const char *name) {$/;"	f	typeref:typename:function
get_pointee	src/pybind11/tools/clang/cindex.py	/^    def get_pointee(self):$/;"	m	class:Type
get_ptr	src/pybind11/tests/object.h	/^    T* get_ptr() { return m_ptr; }$/;"	f	class:ref	typeref:typename:T *
get_ptr	src/pybind11/tests/object.h	/^    const T* get_ptr() const { return m_ptr; }$/;"	f	class:ref	typeref:typename:const T *
get_ref_qualifier	src/pybind11/tools/clang/cindex.py	/^    def get_ref_qualifier(self):$/;"	m	class:Type
get_registered	tools/genmsg/src/genmsg/msg_loader.py	/^    def get_registered(self, full_msg_type):$/;"	m	class:MsgContext
get_result	src/elka_comm/common/elka_comm.cpp	/^uint8_t elka::ElkaBufferMsg::get_result() {$/;"	f	class:elka::ElkaBufferMsg	typeref:typename:uint8_t
get_result	src/pybind11/tools/clang/cindex.py	/^    def get_result(self):$/;"	m	class:Type
get_rm	src/pybind11/tests/test_eigen.cpp	/^MatrixXdR &get_rm() {$/;"	f	typeref:typename:MatrixXdR &
get_rvalue	src/pybind11/tests/test_methods_and_attributes.cpp	/^    SimpleValue get_rvalue() const { return v2; }$/;"	f	struct:TestPropRVP	typeref:typename:SimpleValue	file:
get_search_path	tools/genmsg/test/test_genmsg_gentools.py	/^def get_search_path():$/;"	f
get_shared_data	src/pybind11/include/pybind11/common.h	/^inline PYBIND11_NOINLINE void* get_shared_data(const std::string& name) {$/;"	f
get_size	src/pybind11/tools/clang/cindex.py	/^    def get_size(self):$/;"	m	class:Type
get_snd_params	src/elka_comm/common/elka.cpp	/^void get_snd_params(uint8_t *snd_params, $/;"	f	typeref:typename:void
get_snd_params	src/elka_comm/common/elka.cpp	/^void get_snd_params(uint8_t *snd_params,$/;"	f	typeref:typename:void
get_snd_params_attr	src/elka_comm/common/elka.cpp	/^void get_snd_params_attr($/;"	f	typeref:typename:void
get_snd_rcv_id	serial/python/elka_network.py	/^def get_snd_rcv_id():$/;"	f
get_srv_file	tools/genmsg/src/genmsg/msg_loader.py	/^def get_srv_file(package, base_type, search_path):$/;"	f
get_state	src/elka_comm/gnd_station/elka_devices.cpp	/^uint8_t elka::GroundPort::get_state() {$/;"	f	class:elka::GroundPort	typeref:typename:uint8_t
get_state	src/elka_comm/posix/elka_devices.cpp	/^uint8_t elka::PX4Port::get_state() {$/;"	f	class:elka::PX4Port	typeref:typename:uint8_t
get_string1	src/pybind11/tests/test_virtual_functions.cpp	/^    const std::string &get_string1() override {$/;"	f	class:PyExampleVirt	typeref:typename:const std::string &	file:
get_string1	src/pybind11/tests/test_virtual_functions.cpp	/^    virtual const std::string &get_string1() { return str1; }$/;"	f	class:ExampleVirt	typeref:typename:const std::string &	file:
get_string1	src/pybind11/tests/test_virtual_functions.py	/^        def get_string1(self):$/;"	m	class:test_override.ExtendedExampleVirt
get_string2	src/pybind11/tests/test_virtual_functions.cpp	/^    const std::string *get_string2() override {$/;"	f	class:PyExampleVirt	typeref:typename:const std::string *	file:
get_string2	src/pybind11/tests/test_virtual_functions.cpp	/^    virtual const std::string *get_string2() { return &str2; }$/;"	f	class:ExampleVirt	typeref:typename:const std::string *	file:
get_string2	src/pybind11/tests/test_virtual_functions.py	/^        def get_string2(self):$/;"	m	class:test_override.ExtendedExampleVirt2
get_template_argument_kind	src/pybind11/tools/clang/cindex.py	/^    def get_template_argument_kind(self, num):$/;"	m	class:Cursor
get_template_argument_type	src/pybind11/tools/clang/cindex.py	/^    def get_template_argument_type(self, num):$/;"	m	class:Cursor
get_template_argument_unsigned_value	src/pybind11/tools/clang/cindex.py	/^    def get_template_argument_unsigned_value(self, num):$/;"	m	class:Cursor
get_template_argument_value	src/pybind11/tools/clang/cindex.py	/^    def get_template_argument_value(self, num):$/;"	m	class:Cursor
get_test_dir	tools/genmsg/test/test_genmsg_gentools.py	/^def get_test_dir():$/;"	f
get_test_dir	tools/genmsg/test/test_genmsg_msg_loader.py	/^def get_test_dir():$/;"	f
get_test_dir	tools/genmsg/test/test_genmsg_srvs.py	/^def get_test_dir():$/;"	f
get_test_msg_dir	tools/genmsg/test/test_genmsg_gentools.py	/^def get_test_msg_dir():$/;"	f
get_thread_state_unchecked	src/pybind11/include/pybind11/cast.h	/^inline PyThreadState *get_thread_state_unchecked() {$/;"	f	typeref:typename:PyThreadState *
get_tokens	src/pybind11/tools/clang/cindex.py	/^    def get_tokens(self):$/;"	m	class:Cursor
get_tokens	src/pybind11/tools/clang/cindex.py	/^    def get_tokens(self, locations=None, extent=None):$/;"	m	class:TranslationUnit
get_tokens	src/pybind11/tools/clang/cindex.py	/^    def get_tokens(tu, extent):$/;"	m	class:TokenGroup
get_type	src/pybind11/include/pybind11/pytypes.h	/^handle object_api<D>::get_type() const { return (PyObject *) Py_TYPE(derived().ptr()); }$/;"	f	class:object_api	typeref:typename:handle
get_type_handle	src/pybind11/include/pybind11/cast.h	/^PYBIND11_NOINLINE inline handle get_type_handle(const std::type_info &tp, bool throw_if_missing)/;"	f	typeref:typename:PYBIND11_NOINLINE handle
get_type_info	src/pybind11/include/pybind11/cast.h	/^PYBIND11_NOINLINE inline detail::type_info *get_type_info(const std::type_info &tp,$/;"	f	typeref:typename:PYBIND11_NOINLINE detail::type_info *
get_type_info	src/pybind11/include/pybind11/cast.h	/^PYBIND11_NOINLINE inline detail::type_info* get_type_info(PyTypeObject *type) {$/;"	f	typeref:typename:PYBIND11_NOINLINE detail::type_info *
get_type_info	src/pybind11/include/pybind11/numpy.h	/^    numpy_type_info *get_type_info(const std::type_info& tinfo, bool throw_if_missing = true) {$/;"	f	struct:numpy_internals	typeref:typename:numpy_type_info *
get_type_info	src/pybind11/include/pybind11/numpy.h	/^    template<typename T> numpy_type_info *get_type_info(bool throw_if_missing = true) {$/;"	f	struct:numpy_internals	typeref:typename:numpy_type_info *
get_type_overload	src/pybind11/include/pybind11/pybind11.h	/^inline function get_type_overload(const void *this_ptr, const detail::type_info *this_type, cons/;"	f	typeref:typename:function
get_uart_dev	src/elka_comm/qurt/snapdragon_uart_manager.cpp	/^uart::UARTPort *uart::Manager::get_uart_dev($/;"	f	class:uart::Manager	typeref:typename:uart::UARTPort *
get_usr	src/pybind11/tools/clang/cindex.py	/^    def get_usr(self):$/;"	m	class:Cursor
get_value	src/pybind11/tests/test_buffers.cpp	/^    int32_t get_value() const { return *value; }$/;"	f	class:ConstPTMFBuffer	typeref:typename:int32_t	file:
get_value	src/pybind11/tests/test_virtual_functions.cpp	/^    std::string get_value() const { return std::to_string(value); }$/;"	f	class:Movable	typeref:typename:std::string	file:
get_value	src/pybind11/tests/test_virtual_functions.cpp	/^    std::string get_value() const {$/;"	f	class:NonCopyable	typeref:typename:std::string	file:
get_value_and_holder	src/pybind11/include/pybind11/cast.h	/^PYBIND11_NOINLINE inline value_and_holder instance::get_value_and_holder(const type_info *find_t/;"	f	class:instance	typeref:typename:PYBIND11_NOINLINE value_and_holder
getattr	src/pybind11/include/pybind11/pytypes.h	/^inline object getattr(handle obj, const char *name) {$/;"	f	typeref:typename:object
getattr	src/pybind11/include/pybind11/pytypes.h	/^inline object getattr(handle obj, const char *name, handle default_) {$/;"	f	typeref:typename:object
getattr	src/pybind11/include/pybind11/pytypes.h	/^inline object getattr(handle obj, handle name) {$/;"	f	typeref:typename:object
getattr	src/pybind11/include/pybind11/pytypes.h	/^inline object getattr(handle obj, handle name, handle default_) {$/;"	f	typeref:typename:object
gettext	src/pybind11/docs/Makefile	/^gettext:$/;"	t
gil_release	src/pybind11/tests/test_embed/test_interpreter.cpp	/^        py::gil_scoped_release gil_release{};$/;"	v	typeref:typename:py::gil_scoped_release
gil_scoped_acquire	src/pybind11/include/pybind11/pybind11.h	/^    PYBIND11_NOINLINE gil_scoped_acquire() {$/;"	f	class:gil_scoped_acquire	typeref:typename:PYBIND11_NOINLINE
gil_scoped_acquire	src/pybind11/include/pybind11/pybind11.h	/^    gil_scoped_acquire() { state = PyGILState_Ensure(); }$/;"	f	class:gil_scoped_acquire
gil_scoped_acquire	src/pybind11/include/pybind11/pybind11.h	/^class gil_scoped_acquire { };$/;"	c
gil_scoped_acquire	src/pybind11/include/pybind11/pybind11.h	/^class gil_scoped_acquire {$/;"	c
gil_scoped_release	src/pybind11/include/pybind11/pybind11.h	/^    explicit gil_scoped_release(bool disassoc = false) : disassoc(disassoc) {$/;"	f	class:gil_scoped_release
gil_scoped_release	src/pybind11/include/pybind11/pybind11.h	/^    gil_scoped_release() { state = PyEval_SaveThread(); }$/;"	f	class:gil_scoped_release
gil_scoped_release	src/pybind11/include/pybind11/pybind11.h	/^class gil_scoped_release { };$/;"	c
gil_scoped_release	src/pybind11/include/pybind11/pybind11.h	/^class gil_scoped_release {$/;"	c
git_elka_comm	build_elka_data_collection/Makefile	/^git_elka_comm: cmake_check_build_system$/;"	t
git_elka_comm/fast	build_elka_data_collection/Makefile	/^git_elka_comm\/fast:$/;"	t
git_gencpp	build_elka_data_collection/Makefile	/^git_gencpp: cmake_check_build_system$/;"	t
git_gencpp/fast	build_elka_data_collection/Makefile	/^git_gencpp\/fast:$/;"	t
git_genmsg	build_elka_data_collection/Makefile	/^git_genmsg: cmake_check_build_system$/;"	t
git_genmsg/fast	build_elka_data_collection/Makefile	/^git_genmsg\/fast:$/;"	t
global_state	src/pybind11/include/pybind11/options.h	/^    static state &global_state() {$/;"	f	class:options	typeref:typename:state &
globals	src/pybind11/include/pybind11/pybind11.h	/^inline dict globals() {$/;"	f	typeref:typename:dict
glyph0-0	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph0-0">$/;"	i
glyph0-0	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph0-0">$/;"	i
glyph0-1	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph0-1">$/;"	i
glyph0-1	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph0-1">$/;"	i
glyph0-10	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph0-10">$/;"	i
glyph0-10	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph0-10">$/;"	i
glyph0-11	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph0-11">$/;"	i
glyph0-12	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph0-12">$/;"	i
glyph0-2	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph0-2">$/;"	i
glyph0-2	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph0-2">$/;"	i
glyph0-3	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph0-3">$/;"	i
glyph0-3	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph0-3">$/;"	i
glyph0-4	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph0-4">$/;"	i
glyph0-4	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph0-4">$/;"	i
glyph0-5	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph0-5">$/;"	i
glyph0-5	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph0-5">$/;"	i
glyph0-6	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph0-6">$/;"	i
glyph0-6	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph0-6">$/;"	i
glyph0-7	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph0-7">$/;"	i
glyph0-7	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph0-7">$/;"	i
glyph0-8	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph0-8">$/;"	i
glyph0-8	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph0-8">$/;"	i
glyph0-9	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph0-9">$/;"	i
glyph0-9	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph0-9">$/;"	i
glyph1-0	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph1-0">$/;"	i
glyph1-0	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph1-0">$/;"	i
glyph1-1	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph1-1">$/;"	i
glyph1-1	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph1-1">$/;"	i
glyph1-2	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph1-2">$/;"	i
glyph1-2	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph1-2">$/;"	i
glyph1-3	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph1-3">$/;"	i
glyph1-3	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph1-3">$/;"	i
glyph1-4	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph1-4">$/;"	i
glyph1-5	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph1-5">$/;"	i
glyph1-6	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph1-6">$/;"	i
glyph1-7	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph1-7">$/;"	i
glyph2-0	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph2-0">$/;"	i
glyph2-0	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph2-0">$/;"	i
glyph2-1	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph2-1">$/;"	i
glyph2-1	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph2-1">$/;"	i
glyph2-10	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph2-10">$/;"	i
glyph2-11	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph2-11">$/;"	i
glyph2-12	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph2-12">$/;"	i
glyph2-13	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph2-13">$/;"	i
glyph2-2	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph2-2">$/;"	i
glyph2-2	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph2-2">$/;"	i
glyph2-3	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph2-3">$/;"	i
glyph2-3	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph2-3">$/;"	i
glyph2-4	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph2-4">$/;"	i
glyph2-4	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph2-4">$/;"	i
glyph2-5	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph2-5">$/;"	i
glyph2-5	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph2-5">$/;"	i
glyph2-6	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph2-6">$/;"	i
glyph2-7	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph2-7">$/;"	i
glyph2-8	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph2-8">$/;"	i
glyph2-9	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph2-9">$/;"	i
glyph3-0	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph3-0">$/;"	i
glyph3-0	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph3-0">$/;"	i
glyph3-1	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph3-1">$/;"	i
glyph3-1	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph3-1">$/;"	i
glyph3-10	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph3-10">$/;"	i
glyph3-10	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph3-10">$/;"	i
glyph3-11	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph3-11">$/;"	i
glyph3-11	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph3-11">$/;"	i
glyph3-12	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph3-12">$/;"	i
glyph3-13	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph3-13">$/;"	i
glyph3-14	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph3-14">$/;"	i
glyph3-2	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph3-2">$/;"	i
glyph3-2	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph3-2">$/;"	i
glyph3-3	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph3-3">$/;"	i
glyph3-3	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph3-3">$/;"	i
glyph3-4	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph3-4">$/;"	i
glyph3-4	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph3-4">$/;"	i
glyph3-5	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph3-5">$/;"	i
glyph3-5	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph3-5">$/;"	i
glyph3-6	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph3-6">$/;"	i
glyph3-6	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph3-6">$/;"	i
glyph3-7	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph3-7">$/;"	i
glyph3-7	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph3-7">$/;"	i
glyph3-8	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph3-8">$/;"	i
glyph3-8	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph3-8">$/;"	i
glyph3-9	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph3-9">$/;"	i
glyph3-9	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph3-9">$/;"	i
glyph4-0	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph4-0">$/;"	i
glyph4-1	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph4-1">$/;"	i
glyph4-10	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph4-10">$/;"	i
glyph4-11	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph4-11">$/;"	i
glyph4-12	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph4-12">$/;"	i
glyph4-13	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph4-13">$/;"	i
glyph4-14	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph4-14">$/;"	i
glyph4-2	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph4-2">$/;"	i
glyph4-3	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph4-3">$/;"	i
glyph4-4	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph4-4">$/;"	i
glyph4-5	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph4-5">$/;"	i
glyph4-6	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph4-6">$/;"	i
glyph4-7	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph4-7">$/;"	i
glyph4-8	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph4-8">$/;"	i
glyph4-9	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph4-9">$/;"	i
guard	src/pybind11/include/pybind11/attr.h	/^        T guard{}; \/\/ Compose multiple guard types with left-to-right default-constructor orde/;"	m	struct:call_guard::type	typeref:typename:T
h	src/pybind11/tests/test_methods_and_attributes.cpp	/^        static ArgInspector2 h(ArgInspector2 a, ArgAlwaysConverts) { return a; }$/;"	f	class:__anon943d96910102::ArgInspector	typeref:typename:ArgInspector2	file:
handle	build_elka_data_collection/multi_topics_temporary/ubuntu/elka_msg.h	/^	static PX4TopicHandle handle() {return ORB_ID(elka_msg);}$/;"	f	class:px4::px4_elka_msg	typeref:typename:PX4TopicHandle
handle	build_elka_data_collection/multi_topics_temporary/ubuntu/elka_msg_ack.h	/^	static PX4TopicHandle handle() {return ORB_ID(elka_msg_ack);}$/;"	f	class:px4::px4_elka_msg_ack	typeref:typename:PX4TopicHandle
handle	build_elka_data_collection/src/platforms/ubuntu/elka_messages/elka_elka_msg.h	/^	static PX4TopicHandle handle() {return ORB_ID(elka_msg);}$/;"	f	class:px4::px4_elka_msg	typeref:typename:PX4TopicHandle
handle	build_elka_data_collection/src/platforms/ubuntu/elka_messages/elka_elka_msg_ack.h	/^	static PX4TopicHandle handle() {return ORB_ID(elka_msg_ack);}$/;"	f	class:px4::px4_elka_msg_ack	typeref:typename:PX4TopicHandle
handle	src/pybind11/include/pybind11/pytypes.h	/^    handle(PyObject *ptr) : m_ptr(ptr) { } \/\/ Allow implicit conversion from PyObject*$/;"	f	class:handle
handle	src/pybind11/include/pybind11/pytypes.h	/^class handle : public detail::object_api<handle> {$/;"	c
handle_type_name	src/pybind11/include/pybind11/cast.h	/^template <> struct handle_type_name<args> { static PYBIND11_DESCR name() { return _("*args"); } /;"	s
handle_type_name	src/pybind11/include/pybind11/cast.h	/^template <> struct handle_type_name<bytes> { static PYBIND11_DESCR name() { return _(PYBIND11_BY/;"	s
handle_type_name	src/pybind11/include/pybind11/cast.h	/^template <> struct handle_type_name<kwargs> { static PYBIND11_DESCR name() { return _("**kwargs"/;"	s
handle_type_name	src/pybind11/include/pybind11/cast.h	/^template <typename T> struct handle_type_name { static PYBIND11_DESCR name() { return _<T>(); } /;"	s
handle_type_name	src/pybind11/include/pybind11/numpy.h	/^template <typename T, int Flags> struct handle_type_name<array_t<T, Flags>> {$/;"	s
has_alias	src/pybind11/include/pybind11/pybind11.h	/^    constexpr static bool has_alias = !std::is_void<type_alias>::value;$/;"	m	class:class_	typeref:typename:constexpr bool
has_args	src/pybind11/include/pybind11/attr.h	/^    bool has_args : 1;$/;"	m	struct:function_record	typeref:typename:bool:1
has_args	src/pybind11/include/pybind11/cast.h	/^    static constexpr bool has_args = args_pos < 0;$/;"	m	class:argument_loader	typeref:typename:constexpr bool
has_fields	src/pybind11/include/pybind11/numpy.h	/^    bool has_fields() const {$/;"	f	class:dtype	typeref:typename:bool
has_header	tools/genmsg/src/genmsg/msgs.py	/^    def has_header(self):$/;"	m	class:MsgSpec
has_kwargs	src/pybind11/include/pybind11/attr.h	/^    bool has_kwargs : 1;$/;"	m	struct:function_record	typeref:typename:bool:1
has_kwargs	src/pybind11/include/pybind11/cast.h	/^    static constexpr bool has_kwargs = kwargs_pos < 0;$/;"	m	class:argument_loader	typeref:typename:constexpr bool
has_patients	src/pybind11/include/pybind11/common.h	/^    bool has_patients : 1;$/;"	m	struct:instance	typeref:typename:bool:1
has_pybind11_internals_builtin	src/pybind11/tests/test_embed/test_interpreter.cpp	/^bool has_pybind11_internals_builtin() {$/;"	f	typeref:typename:bool
has_pybind11_internals_static	src/pybind11/tests/test_embed/test_interpreter.cpp	/^bool has_pybind11_internals_static() {$/;"	f	typeref:typename:bool
hasattr	src/pybind11/include/pybind11/pytypes.h	/^inline bool hasattr(handle obj, const char *name) {$/;"	f	typeref:typename:bool
hasattr	src/pybind11/include/pybind11/pytypes.h	/^inline bool hasattr(handle obj, handle name) {$/;"	f	typeref:typename:bool
hash	src/pybind11/tests/test_stl.cpp	/^    struct hash<TplCtorClass> { size_t operator()(const TplCtorClass &) const { return 0; } };$/;"	s	namespace:std	file:
hash	src/pybind11/tools/clang/cindex.py	/^    def hash(self):$/;"	m	class:Cursor
headers	src/pybind11/setup.py	/^    headers = [$/;"	v
headers	src/pybind11/setup.py	/^    headers = []$/;"	v
help	build_elka_data_collection/Makefile	/^help:$/;"	t
help	build_elka_data_collection/msg/Makefile	/^help:$/;"	t
help	build_elka_data_collection/src/Makefile	/^help:$/;"	t
help	build_elka_data_collection/src/elka_comm/common/Makefile	/^help:$/;"	t
help	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^help:$/;"	t
help	build_elka_data_collection/src/pybind11/Makefile	/^help:$/;"	t
help	src/pybind11/docs/Makefile	/^help:$/;"	t
help	tools/genmsg/doc/Makefile	/^help:$/;"	t
highlight_language	src/pybind11/docs/conf.py	/^highlight_language = 'cpp'$/;"	v
hil_state_t	inc/uORB/uORB.h	/^typedef uint8_t hil_state_t;$/;"	t	typeref:typename:uint8_t
holder	src/pybind11/include/pybind11/cast.h	/^    holder_type holder;$/;"	m	struct:copyable_holder_caster	typeref:typename:holder_type
holder	src/pybind11/include/pybind11/cast.h	/^    template <typename H> H &holder() const {$/;"	f	struct:value_and_holder	typeref:typename:H &
holder_constructed	src/pybind11/include/pybind11/cast.h	/^    bool holder_constructed() const {$/;"	f	struct:value_and_holder	typeref:typename:bool
holder_constructed	src/pybind11/include/pybind11/common.h	/^            bool *holder_constructed;$/;"	m	struct:instance::__anon7b367e7c010a::__anon7b367e7c0208	typeref:typename:bool *
holder_helper	src/pybind11/include/pybind11/cast.h	/^struct holder_helper {$/;"	s
holder_helper	src/pybind11/tests/test_smart_ptr.cpp	/^    struct holder_helper<ref<T>> {$/;"	s	namespace:pybind11::detail	file:
holder_size	src/pybind11/include/pybind11/attr.h	/^    size_t holder_size = 0;$/;"	m	struct:type_record	typeref:typename:size_t
holder_size_in_ptrs	src/pybind11/include/pybind11/cast.h	/^    size_t type_size, holder_size_in_ptrs;$/;"	m	struct:type_info	typeref:typename:size_t
holder_type	src/pybind11/include/pybind11/pybind11.h	/^    using holder_type = detail::exactly_one_t<is_holder, std::unique_ptr<type>, options...>;$/;"	t	class:class_	typeref:typename:detail::exactly_one_t<is_holder,std::unique_ptr<type>,options...>
html	src/pybind11/docs/Makefile	/^html:$/;"	t
html	tools/genmsg/doc/Makefile	/^html:$/;"	t
html_context	src/pybind11/docs/conf.py	/^    html_context = {$/;"	v
html_logo	tools/genmsg/doc/conf.py	/^html_logo = 'ros.png'$/;"	v
html_static_path	src/pybind11/docs/conf.py	/^html_static_path = ['_static']$/;"	v
html_static_path	tools/genmsg/doc/conf.py	/^html_static_path = []$/;"	v
html_theme	src/pybind11/docs/conf.py	/^    html_theme = 'sphinx_rtd_theme'$/;"	v
html_theme	tools/genmsg/doc/conf.py	/^html_theme = 'ros-theme'$/;"	v
html_theme_path	src/pybind11/docs/conf.py	/^    html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]$/;"	v
html_theme_path	tools/genmsg/doc/conf.py	/^html_theme_path = [os.path.join(os.path.dirname(catkin_sphinx.__file__),$/;"	v
htmlhelp	src/pybind11/docs/Makefile	/^htmlhelp:$/;"	t
htmlhelp	tools/genmsg/doc/Makefile	/^htmlhelp:$/;"	t
htmlhelp_basename	src/pybind11/docs/conf.py	/^htmlhelp_basename = 'pybind11doc'$/;"	v
htmlhelp_basename	tools/genmsg/doc/conf.py	/^htmlhelp_basename = 'genmsgdoc'$/;"	v
huge_unique_ptr	src/pybind11/tests/test_smart_ptr.cpp	/^    huge_unique_ptr(T *p) : ptr(p) {};$/;"	f	class:huge_unique_ptr	file:
huge_unique_ptr	src/pybind11/tests/test_smart_ptr.cpp	/^template <typename T> class huge_unique_ptr {$/;"	c	file:
i	src/pybind11/include/pybind11/numpy.h	/^        for (size_t i = 0; i < (size_t) dims_; i++) {$/;"	m	class:unchecked_reference	typeref:typename:size_t
i	src/pybind11/tests/pybind11_tests.h	/^    int i = -1;$/;"	m	class:UserType	typeref:typename:int
i	src/pybind11/tests/test_class.cpp	/^        int i;$/;"	m	struct:TEST_SUBMODULE::ConvertibleFromUserType	typeref:typename:int	file:
i	src/pybind11/tests/test_embed/test_interpreter.cpp	/^        for (auto i = 0; i < num_threads; ++i) {$/;"	v	typeref:typename:auto
i	src/pybind11/tests/test_multiple_inheritance.cpp	/^    int i;$/;"	m	struct:Base1	typeref:typename:int	file:
i	src/pybind11/tests/test_multiple_inheritance.cpp	/^    int i;$/;"	m	struct:Base1a	typeref:typename:int	file:
i	src/pybind11/tests/test_multiple_inheritance.cpp	/^    int i;$/;"	m	struct:Base2	typeref:typename:int	file:
i	src/pybind11/tests/test_multiple_inheritance.cpp	/^    int i;$/;"	m	struct:Base2a	typeref:typename:int	file:
i	src/pybind11/tests/test_multiple_inheritance.cpp	/^    int i;$/;"	m	struct:BaseN	typeref:typename:int	file:
if_zero	src/pybind11/include/pybind11/eigen.h	/^    template <EigenIndex i, EigenIndex ifzero> using if_zero = std::integral_constant<EigenIndex/;"	t	struct:EigenProps	typeref:typename:std::integral_constant<EigenIndex,i==0?ifzero:i>
ignore_unused	src/pybind11/include/pybind11/common.h	/^inline void ignore_unused(const int *) { }$/;"	f	typeref:typename:void
impl	src/pybind11/include/pybind11/attr.h	/^    handle (*impl) (function_call &) = nullptr;$/;"	m	struct:function_record	typeref:typename:handle (*)(function_call &)
impl	src/pybind11/tests/test_smart_ptr.cpp	/^    std::unique_ptr<T> impl;$/;"	m	class:CustomUniquePtr	typeref:typename:std::unique_ptr<T>	file:
implicit_cast	src/pybind11/include/pybind11/cast.h	/^    type implicit_cast(index_sequence<Is...>) & { return type(cast_op<Ts>(std::get<Is>(subcaster/;"	f	class:tuple_caster	typeref:typename:type
implicit_cast	src/pybind11/include/pybind11/cast.h	/^    type implicit_cast(index_sequence<Is...>) && { return type(cast_op<Ts>(std::move(std::get<Is/;"	f	class:tuple_caster	typeref:typename:type
implicit_casts	src/pybind11/include/pybind11/cast.h	/^    std::vector<std::pair<const std::type_info *, void *(*)(void *)>> implicit_casts;$/;"	m	struct:type_info	typeref:typename:std::vector<std::pair<const std::type_info *,void * (*)(void *)>>
implicit_conversions	src/pybind11/include/pybind11/cast.h	/^    std::vector<PyObject *(*)(PyObject *, PyTypeObject *)> implicit_conversions;$/;"	m	struct:type_info	typeref:typename:std::vector<PyObject * (*)(PyObject *,PyTypeObject *)>
implicitly_convertible	src/pybind11/include/pybind11/pybind11.h	/^template <typename InputType, typename OutputType> void implicitly_convertible() {$/;"	f	typeref:typename:void
import	src/pybind11/include/pybind11/pybind11.h	/^    static module import(const char *name) {$/;"	f	class:module	typeref:typename:module
inactive_overload_cache	src/pybind11/include/pybind11/common.h	/^    std::unordered_set<std::pair<const PyObject *, const char *>, overload_hash> inactive_overlo/;"	m	struct:internals	typeref:typename:std::unordered_set<std::pair<const PyObject *,const char * >,overload_hash>
incRef	src/pybind11/tests/object.h	/^    void incRef() const { ++m_refCount; }$/;"	f	class:Object	typeref:typename:void
inc_ref	src/pybind11/include/pybind11/pybind11.h	/^    void inc_ref() {$/;"	f	class:gil_scoped_acquire	typeref:typename:void
inc_ref	src/pybind11/include/pybind11/pytypes.h	/^    const handle& inc_ref() const & { Py_XINCREF(m_ptr); return *this; }$/;"	f	class:handle	typeref:typename:const handle &
includepath_to_dict	tools/genmsg/src/genmsg/command_line.py	/^def includepath_to_dict(includepath):$/;"	f
increase_value	src/pybind11/tests/test_methods_and_attributes.cpp	/^    void increase_value() { rw_value++; ro_value += 0.25; }$/;"	f	class:UnregisteredBase	typeref:typename:void	file:
increment	src/pybind11/include/pybind11/numpy.h	/^    void increment(size_type dim) {$/;"	f	class:common_iterator	typeref:typename:void
increment	src/pybind11/include/pybind11/pytypes.h	/^    void increment() { ++index; }$/;"	f	class:sequence_slow_readwrite	typeref:typename:void
increment	src/pybind11/include/pybind11/pytypes.h	/^    void increment() { ++ptr; }$/;"	f	class:sequence_fast_readonly	typeref:typename:void
increment	src/pybind11/include/pybind11/pytypes.h	/^    void increment() { if (!PyDict_Next(obj.ptr(), &pos, &key, &value)) { pos = -1; } }$/;"	f	class:dict_readonly	typeref:typename:void
increment_common_iterator	src/pybind11/include/pybind11/numpy.h	/^    void increment_common_iterator(size_t dim) {$/;"	f	class:multi_array_iterator	typeref:typename:void
index	src/pybind11/include/pybind11/cast.h	/^    size_t index;$/;"	m	struct:value_and_holder	typeref:typename:size_t
index	src/pybind11/include/pybind11/common.h	/^    static constexpr auto index = found ? constexpr_first<Predicate, Ts...>() : 0;$/;"	m	struct:exactly_one	typeref:typename:constexpr auto
index	src/pybind11/include/pybind11/common.h	/^    static constexpr int index = std::is_same<T, bool>::value ? 0 : 1 + ($/;"	m	struct:is_fmt_numeric	typeref:typename:constexpr int
index	src/pybind11/include/pybind11/complex.h	/^    static constexpr int index = is_fmt_numeric<T>::index + 3;$/;"	m	struct:is_fmt_numeric	typeref:typename:constexpr int
index	src/pybind11/include/pybind11/pytypes.h	/^    ssize_t index;$/;"	m	class:sequence_slow_readwrite	typeref:typename:ssize_t
index_at	src/pybind11/include/pybind11/numpy.h	/^    template<typename... Ix> ssize_t index_at(Ix... index) const {$/;"	f	class:array	typeref:typename:ssize_t
index_at	src/pybind11/include/pybind11/numpy.h	/^    template<typename... Ix> ssize_t index_at(Ix... index) const {$/;"	f	class:array_t	typeref:typename:ssize_t
index_at	src/pybind11/tests/test_numpy_array.cpp	/^template<typename... Ix> ssize_t index_at(const arr& a, Ix... idx) { return a.index_at(idx...); /;"	f	typeref:typename:ssize_t
index_at_t	src/pybind11/tests/test_numpy_array.cpp	/^template<typename... Ix> ssize_t index_at_t(const arr_t& a, Ix... idx) { return a.index_at(idx../;"	f	typeref:typename:ssize_t
index_sequence	src/pybind11/include/pybind11/common.h	/^template<size_t ...> struct index_sequence  { };$/;"	s
indices	src/pybind11/include/pybind11/cast.h	/^    using indices = make_index_sequence<size>;$/;"	t	class:tuple_caster	typeref:typename:make_index_sequence<size>
indices	src/pybind11/include/pybind11/cast.h	/^    using indices = make_index_sequence<sizeof...(Args)>;$/;"	t	class:argument_loader
inet_comm.cpp.i	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^inet_comm.cpp.i:$/;"	t
inet_comm.cpp.o	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^inet_comm.cpp.o:$/;"	t
inet_comm.cpp.s	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^inet_comm.cpp.s:$/;"	t
inet_comm.i	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^inet_comm.i: inet_comm.cpp.i$/;"	t
inet_comm.o	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^inet_comm.o: inet_comm.cpp.o$/;"	t
inet_comm.s	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^inet_comm.s: inet_comm.cpp.s$/;"	t
info	src/pybind11/docs/Makefile	/^info:$/;"	t
info_arch	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	typeref:typename:char const *
info_arch	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	typeref:typename:char const *
info_compiler	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	typeref:typename:char const *
info_compiler	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	typeref:typename:char const *
info_language_dialect_default	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v	typeref:typename:const char *
info_language_dialect_default	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v	typeref:typename:const char *
info_platform	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	typeref:typename:char const *
info_platform	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	typeref:typename:char const *
info_simulate	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	typeref:typename:char const *
info_simulate	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	typeref:typename:char const *
info_simulate_version	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v	typeref:typename:char const[]
info_simulate_version	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v	typeref:typename:char const[]
info_version	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v	typeref:typename:char const[]
info_version	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v	typeref:typename:char const[]
init	src/elka_comm/gnd_station/elka_devices.cpp	/^int elka::GroundPort::init() {$/;"	f	class:elka::GroundPort	typeref:typename:int
init	src/elka_comm/posix/elka_devices.cpp	/^int elka::PX4Port::init() {$/;"	f	class:elka::PX4Port	typeref:typename:int
init	src/elka_comm/qurt/snapdragon_uart_devices.cpp	/^int uart::UARTPort::init() {$/;"	f	class:uart::UARTPort	typeref:typename:int
init	src/pybind11/include/pybind11/attr.h	/^    static void init(const Args&... args, function_record *r) {$/;"	f	struct:process_attributes	typeref:typename:void
init	src/pybind11/include/pybind11/attr.h	/^    static void init(const Args&... args, type_record *r) {$/;"	f	struct:process_attributes	typeref:typename:void
init	src/pybind11/include/pybind11/attr.h	/^    static void init(const T &, function_record *) { }$/;"	f	struct:process_attribute_default	typeref:typename:void
init	src/pybind11/include/pybind11/attr.h	/^    static void init(const T &, type_record *) { }$/;"	f	struct:process_attribute_default	typeref:typename:void
init	src/pybind11/include/pybind11/attr.h	/^    static void init(const arg &a, function_record *r) {$/;"	f	struct:process_attribute	typeref:typename:void
init	src/pybind11/include/pybind11/attr.h	/^    static void init(const arg_v &a, function_record *r) {$/;"	f	struct:process_attribute	typeref:typename:void
init	src/pybind11/include/pybind11/attr.h	/^    static void init(const base<T> &, type_record *r) { r->add_base(typeid(T), nullptr); }$/;"	f	struct:process_attribute	typeref:typename:void
init	src/pybind11/include/pybind11/attr.h	/^    static void init(const buffer_protocol &, type_record *r) { r->buffer_protocol = true; }$/;"	f	struct:process_attribute	typeref:typename:void
init	src/pybind11/include/pybind11/attr.h	/^    static void init(const char *d, function_record *r) { r->doc = const_cast<char *>(d); }$/;"	f	struct:process_attribute	typeref:typename:void
init	src/pybind11/include/pybind11/attr.h	/^    static void init(const char *d, type_record *r) { r->doc = const_cast<char *>(d); }$/;"	f	struct:process_attribute	typeref:typename:void
init	src/pybind11/include/pybind11/attr.h	/^    static void init(const doc &n, function_record *r) { r->doc = const_cast<char *>(n.value); }$/;"	f	struct:process_attribute	typeref:typename:void
init	src/pybind11/include/pybind11/attr.h	/^    static void init(const dynamic_attr &, type_record *r) { r->dynamic_attr = true; }$/;"	f	struct:process_attribute	typeref:typename:void
init	src/pybind11/include/pybind11/attr.h	/^    static void init(const handle &h, type_record *r) { r->bases.append(h); }$/;"	f	struct:process_attribute	typeref:typename:void
init	src/pybind11/include/pybind11/attr.h	/^    static void init(const is_method &s, function_record *r) { r->is_method = true; r->scope = s/;"	f	struct:process_attribute	typeref:typename:void
init	src/pybind11/include/pybind11/attr.h	/^    static void init(const is_operator &, function_record *r) { r->is_operator = true; }$/;"	f	struct:process_attribute	typeref:typename:void
init	src/pybind11/include/pybind11/attr.h	/^    static void init(const metaclass &m, type_record *r) { r->metaclass = m.value; }$/;"	f	struct:process_attribute	typeref:typename:void
init	src/pybind11/include/pybind11/attr.h	/^    static void init(const multiple_inheritance &, type_record *r) { r->multiple_inheritance = t/;"	f	struct:process_attribute	typeref:typename:void
init	src/pybind11/include/pybind11/attr.h	/^    static void init(const name &n, function_record *r) { r->name = const_cast<char *>(n.value);/;"	f	struct:process_attribute	typeref:typename:void
init	src/pybind11/include/pybind11/attr.h	/^    static void init(const return_value_policy &p, function_record *r) { r->policy = p; }$/;"	f	struct:process_attribute	typeref:typename:void
init	src/pybind11/include/pybind11/attr.h	/^    static void init(const scope &s, function_record *r) { r->scope = s.value; }$/;"	f	struct:process_attribute	typeref:typename:void
init	src/pybind11/include/pybind11/attr.h	/^    static void init(const sibling &s, function_record *r) { r->sibling = s.value; }$/;"	f	struct:process_attribute	typeref:typename:void
init	src/pybind11/include/pybind11/pybind11.h	/^template <typename... Args> detail::init<Args...> init() { return detail::init<Args...>(); }$/;"	f
init	src/pybind11/include/pybind11/pybind11.h	/^template <typename... Args> struct init {$/;"	s
init_alias	src/pybind11/include/pybind11/pybind11.h	/^template <typename... Args> detail::init_alias<Args...> init_alias() { return detail::init_alias/;"	f	typeref:typename:detail::init_alias<Args...>
init_alias	src/pybind11/include/pybind11/pybind11.h	/^template <typename... Args> struct init_alias {$/;"	s
init_common_iterator	src/pybind11/include/pybind11/numpy.h	/^    void init_common_iterator(const buffer_info &buffer,$/;"	f	class:multi_array_iterator	typeref:typename:void
init_holder	src/pybind11/include/pybind11/attr.h	/^    void (*init_holder)(instance *, const void *) = nullptr;$/;"	m	struct:type_record	typeref:typename:void (*)(instance *,const void *)
init_holder	src/pybind11/include/pybind11/cast.h	/^    void (*init_holder)(instance *, const void *);$/;"	m	struct:type_info	typeref:typename:void (*)(instance *,const void *)
init_holder	src/pybind11/include/pybind11/pybind11.h	/^    static void init_holder(detail::instance *inst, const void *holder_ptr) {$/;"	f	class:class_	typeref:typename:void
init_holder_from_existing	src/pybind11/include/pybind11/pybind11.h	/^    static void init_holder_from_existing(const detail::value_and_holder &v_h,$/;"	f	class:class_	typeref:typename:void
init_holder_helper	src/pybind11/include/pybind11/pybind11.h	/^    static void init_holder_helper(detail::instance *inst, detail::value_and_holder &v_h,$/;"	f	class:class_	typeref:typename:void
init_t	src/pybind11/include/pybind11/embed.h	/^    using init_t = PyObject *(*)();$/;"	t	struct:embedded_module
initial_msg	src/elka_comm/common/elka.h	/^inline bool initial_msg(msg_id_t &msg_id) {$/;"	f	typeref:typename:bool
initialize	src/elka_comm/posix/elka_manager.cpp	/^bool elka::Manager::initialize() {$/;"	f	class:elka::Manager	typeref:typename:bool
initialize	src/elka_comm/qurt/snapdragon_uart_manager.cpp	/^bool uart::Manager::initialize() {$/;"	f	class:uart::Manager	typeref:typename:bool
initialize	src/pybind11/include/pybind11/pybind11.h	/^    void initialize(Func &&f, Return (*)(Args...), const Extra&... extra) {$/;"	f	class:cpp_function	typeref:typename:void
initialize	src/pybind11/include/pybind11/pybind11.h	/^    void initialize(const type_record &rec) {$/;"	f	class:generic_type	typeref:typename:void
initialize_generic	src/pybind11/include/pybind11/pybind11.h	/^    void initialize_generic(detail::function_record *rec, const char *text,$/;"	f	class:cpp_function	typeref:typename:void
initialize_inherited_virtuals	src/pybind11/tests/test_virtual_functions.cpp	/^void initialize_inherited_virtuals(py::module &m) {$/;"	f	typeref:typename:void
initialize_interpreter	src/pybind11/include/pybind11/embed.h	/^inline void initialize_interpreter(bool init_signal_handlers = true) {$/;"	f	typeref:typename:NAMESPACE_END (detail)void
initializers	src/pybind11/tests/pybind11_tests.cpp	/^std::list<std::function<void(py::module &)>> &initializers() {$/;"	f	typeref:typename:std::list<std::function<void (py::module &)>> &
inner_stride	src/pybind11/include/pybind11/eigen.h	/^    static constexpr EigenIndex inner_stride = if_zero<StrideType::InnerStrideAtCompileTime, 1>:/;"	m	struct:EigenProps	typeref:typename:constexpr EigenIndex
inst	src/pybind11/include/pybind11/cast.h	/^        instance *inst;$/;"	m	struct:values_and_holders::iterator	typeref:typename:instance *
inst	src/pybind11/include/pybind11/cast.h	/^    instance *inst;$/;"	m	struct:value_and_holder	typeref:typename:instance *
inst	src/pybind11/include/pybind11/cast.h	/^    instance *inst;$/;"	m	struct:values_and_holders	typeref:typename:instance *
install_buffer_funcs	src/pybind11/include/pybind11/pybind11.h	/^    void install_buffer_funcs($/;"	f	class:generic_type	typeref:typename:void
instance	src/pybind11/include/pybind11/common.h	/^struct instance {$/;"	s
instance_	src/pybind11/tests/test_copy_move.cpp	/^    static derived instance_;$/;"	m	struct:empty	typeref:typename:derived	file:
instance_	src/pybind11/tests/test_copy_move.cpp	/^template <> lacking_copy_ctor empty<lacking_copy_ctor>::instance_ = {};$/;"	m	class:empty<lacking_copy_ctor>	typeref:typename:lacking_copy_ctor
instance_	src/pybind11/tests/test_copy_move.cpp	/^template <> lacking_move_ctor empty<lacking_move_ctor>::instance_ = {};$/;"	m	class:empty<lacking_move_ctor>	typeref:typename:lacking_move_ctor
instance_base	src/pybind11/include/pybind11/common.h	/^    PyObject *instance_base;$/;"	m	struct:internals	typeref:typename:PyObject *
instance_simple_holder_in_ptrs	src/pybind11/include/pybind11/common.h	/^constexpr size_t instance_simple_holder_in_ptrs() {$/;"	f	typeref:typename:size_t
int64_t	src/pybind11/tests/test_numpy_dtypes.cpp	/^enum class E1 : int64_t { A = -1, B = 1 };$/;"	g	file:
int_	src/pybind11/include/pybind11/pytypes.h	/^    int_() : object(PyLong_FromLong(0), stolen_t{}) { }$/;"	f	class:int_	typeref:typename:PYBIND11_OBJECT_CVT (int_,object,PYBIND11_LONG_CHECK,PyNumber_Long)
int_	src/pybind11/include/pybind11/pytypes.h	/^    int_(T value) {$/;"	f	class:int_
int_	src/pybind11/include/pybind11/pytypes.h	/^class int_ : public object {$/;"	c
int_to_str	src/pybind11/include/pybind11/descr.h	/^template <size_t Rem, size_t... Digits> struct int_to_str : int_to_str<Rem\/10, Rem%10, Digits../;"	s
int_to_str	src/pybind11/include/pybind11/descr.h	/^template <size_t...Digits> struct int_to_str<0, Digits...> {$/;"	s
internal1	src/pybind11/tests/test_methods_and_attributes.cpp	/^    int internal1() { return value; }                             \/\/ return by value$/;"	f	class:ExampleMandA	typeref:typename:int	file:
internal2	src/pybind11/tests/test_methods_and_attributes.cpp	/^    int &internal2() { return value; }                            \/\/ return by reference$/;"	f	class:ExampleMandA	typeref:typename:int &	file:
internal3	src/pybind11/tests/test_methods_and_attributes.cpp	/^    const int &internal3() { return value; }                      \/\/ return by const reference$/;"	f	class:ExampleMandA	typeref:typename:const int &	file:
internal4	src/pybind11/tests/test_methods_and_attributes.cpp	/^    int *internal4() { return &value; }                           \/\/ return by pointer$/;"	f	class:ExampleMandA	typeref:typename:int *	file:
internal5	src/pybind11/tests/test_methods_and_attributes.cpp	/^    const int *internal5() { return &value; }                     \/\/ return by const pointer$/;"	f	class:ExampleMandA	typeref:typename:const int *	file:
internals	src/pybind11/include/pybind11/common.h	/^struct internals {$/;"	s
intersphinx_mapping	tools/genmsg/doc/conf.py	/^intersphinx_mapping = {$/;"	v
intrinsic_t	src/pybind11/include/pybind11/common.h	/^template <typename T> using intrinsic_t = typename intrinsic_type<T>::type;$/;"	t	typeref:typename:intrinsic_type<T>::type
intrinsic_type	src/pybind11/include/pybind11/common.h	/^template <typename T, size_t N> struct intrinsic_type<T[N]>       { typedef typename intrinsic_t/;"	s
intrinsic_type	src/pybind11/include/pybind11/common.h	/^template <typename T, size_t N> struct intrinsic_type<const T[N]> { typedef typename intrinsic_t/;"	s
intrinsic_type	src/pybind11/include/pybind11/common.h	/^template <typename T> struct intrinsic_type                       { typedef T type; };$/;"	s
intrinsic_type	src/pybind11/include/pybind11/common.h	/^template <typename T> struct intrinsic_type<T&&>                  { typedef typename intrinsic_t/;"	s
intrinsic_type	src/pybind11/include/pybind11/common.h	/^template <typename T> struct intrinsic_type<T&>                   { typedef typename intrinsic_t/;"	s
intrinsic_type	src/pybind11/include/pybind11/common.h	/^template <typename T> struct intrinsic_type<T*>                   { typedef typename intrinsic_t/;"	s
intrinsic_type	src/pybind11/include/pybind11/common.h	/^template <typename T> struct intrinsic_type<const T>              { typedef typename intrinsic_t/;"	s
is	src/pybind11/include/pybind11/pytypes.h	/^    bool is(object_api const& other) const { return derived().ptr() == other.derived().ptr(); }$/;"	f	class:object_api	typeref:typename:bool
isKindInformative	src/pybind11/tools/clang/cindex.py	/^    def isKindInformative(self):$/;"	m	class:CompletionChunk
isKindOptional	src/pybind11/tools/clang/cindex.py	/^    def isKindOptional(self):$/;"	m	class:CompletionChunk
isKindPlaceHolder	src/pybind11/tools/clang/cindex.py	/^    def isKindPlaceHolder(self):$/;"	m	class:CompletionChunk
isKindResultType	src/pybind11/tools/clang/cindex.py	/^    def isKindResultType(self):$/;"	m	class:CompletionChunk
isKindTypedText	src/pybind11/tools/clang/cindex.py	/^    def isKindTypedText(self):$/;"	m	class:CompletionChunk
is_anonymous	src/pybind11/tools/clang/cindex.py	/^    def is_anonymous(self):$/;"	m	class:Cursor
is_arithmetic	src/pybind11/include/pybind11/numpy.h	/^        satisfies_any_of<call_type, std::is_arithmetic, is_complex, std::is_pod>::value &&$/;"	m	class:vectorize_arg::std	typeref:typename:constexpr bool
is_array	src/pybind11/include/pybind11/numpy.h	/^    static constexpr bool is_array = false;$/;"	m	struct:array_info_scalar	typeref:typename:constexpr bool
is_array	src/pybind11/include/pybind11/numpy.h	/^    static constexpr bool is_array = true;$/;"	m	struct:array_info	typeref:typename:constexpr bool
is_attribute	src/pybind11/tools/clang/cindex.py	/^    def is_attribute(self):$/;"	m	class:CursorKind
is_base	src/pybind11/include/pybind11/pybind11.h	/^    template <typename T> using is_base = detail::is_strict_base_of<T, type_>;$/;"	t	class:class_	typeref:typename:detail::is_strict_base_of<T,type_>
is_bitfield	src/pybind11/tools/clang/cindex.py	/^    def is_bitfield(self):$/;"	m	class:Cursor
is_builtin	tools/genmsg/src/genmsg/msgs.py	/^def is_builtin(msg_type_name):$/;"	f
is_call_guard	src/pybind11/include/pybind11/attr.h	/^using is_call_guard = is_instantiation<call_guard, T>;$/;"	t	typeref:typename:is_instantiation<call_guard,T>
is_comparable	src/pybind11/include/pybind11/stl_bind.h	/^    static constexpr const bool is_comparable = std::is_same<std::true_type, decltype(test_compa/;"	m	struct:container_traits	typeref:typename:constexpr const bool
is_comparable	src/pybind11/include/pybind11/stl_bind.h	/^struct is_comparable : std::false_type { };$/;"	s
is_comparable	src/pybind11/include/pybind11/stl_bind.h	/^struct is_comparable<$/;"	s
is_comparable	src/pybind11/include/pybind11/stl_bind.h	/^struct is_comparable<T, enable_if_t<container_traits<T>::is_pair>> {$/;"	s
is_comparable	src/pybind11/include/pybind11/stl_bind.h	/^struct is_comparable<T, enable_if_t<container_traits<T>::is_vector>> {$/;"	s
is_complex	src/pybind11/include/pybind11/numpy.h	/^        satisfies_any_of<call_type, std::is_arithmetic, is_complex, std::is_pod>::value &&$/;"	m	struct:vectorize_arg	typeref:typename:constexpr bool
is_complex	src/pybind11/include/pybind11/numpy.h	/^template <typename T> struct is_complex : std::false_type { };$/;"	s
is_complex	src/pybind11/include/pybind11/numpy.h	/^template <typename T> struct is_complex<std::complex<T>> : std::true_type { };$/;"	s
is_const_method	src/pybind11/tools/clang/cindex.py	/^    def is_const_method(self):$/;"	m	class:Cursor
is_const_qualified	src/pybind11/tools/clang/cindex.py	/^    def is_const_qualified(self):$/;"	m	class:Type
is_constructor	src/pybind11/include/pybind11/attr.h	/^    bool is_constructor : 1;$/;"	m	struct:function_record	typeref:typename:bool:1
is_converting_constructor	src/pybind11/tools/clang/cindex.py	/^    def is_converting_constructor(self):$/;"	m	class:Cursor
is_copy_constructible	src/pybind11/include/pybind11/cast.h	/^template <typename Container> struct is_copy_constructible<Container, enable_if_t<$/;"	s
is_copy_constructible	src/pybind11/include/pybind11/cast.h	/^template <typename T, typename SFINAE = void> struct is_copy_constructible : std::is_copy_constr/;"	s
is_copy_constructor	src/pybind11/tools/clang/cindex.py	/^    def is_copy_constructor(self):$/;"	m	class:Cursor
is_cpp_function	src/pybind11/include/pybind11/pytypes.h	/^    bool is_cpp_function() const { return (bool) cpp_function(); }$/;"	f	class:function	typeref:typename:bool
is_declaration	src/pybind11/tools/clang/cindex.py	/^    def is_declaration(self):$/;"	m	class:CursorKind
is_default_constructor	src/pybind11/tools/clang/cindex.py	/^    def is_default_constructor(self):$/;"	m	class:Cursor
is_default_method	src/pybind11/tools/clang/cindex.py	/^    def is_default_method(self):$/;"	m	class:Cursor
is_definition	src/pybind11/tools/clang/cindex.py	/^    def is_definition(self):$/;"	m	class:Cursor
is_ds_unpacking	src/pybind11/include/pybind11/pytypes.h	/^template <typename T> using is_ds_unpacking = std::is_same<kwargs_proxy, T>; \/\/ ** unpacking$/;"	t	typeref:typename:std::is_same<kwargs_proxy,T>
is_eigen_dense_map	src/pybind11/include/pybind11/eigen.h	/^template <typename T> using is_eigen_dense_map = all_of<is_template_base_of<Eigen::DenseBase, T>/;"	t	typeref:typename:all_of<is_template_base_of<Eigen::DenseBase,T>,std::is_base_of<Eigen::MapBase<T,Eigen::ReadOnlyAccessors>,T>>
is_eigen_dense_plain	src/pybind11/include/pybind11/eigen.h	/^template <typename T> using is_eigen_dense_plain = all_of<negation<is_eigen_dense_map<T>>, is_te/;"	t	typeref:typename:all_of<negation<is_eigen_dense_map<T>>,is_template_base_of<Eigen::PlainObjectBase,T>>
is_eigen_mutable_map	src/pybind11/include/pybind11/eigen.h	/^template <typename T> using is_eigen_mutable_map = std::is_base_of<Eigen::MapBase<T, Eigen::Writ/;"	t	typeref:typename:std::is_base_of<Eigen::MapBase<T,Eigen::WriteAccessors>,T>
is_eigen_other	src/pybind11/include/pybind11/eigen.h	/^template <typename T> using is_eigen_other = all_of<$/;"	t
is_eigen_sparse	src/pybind11/include/pybind11/eigen.h	/^template <typename T> using is_eigen_sparse = is_template_base_of<Eigen::SparseMatrixBase, T>;$/;"	t	typeref:typename:is_template_base_of<Eigen::SparseMatrixBase,T>
is_element	src/pybind11/include/pybind11/stl_bind.h	/^    static constexpr const bool is_element = !is_pair && !is_vector;$/;"	m	struct:container_traits	typeref:typename:constexpr const bool
is_empty	src/pybind11/include/pybind11/numpy.h	/^    static constexpr bool is_empty = (N == 0) || array_info<T>::is_empty;$/;"	m	struct:array_info	typeref:typename:constexpr bool
is_empty	src/pybind11/include/pybind11/numpy.h	/^    static constexpr bool is_empty = false;$/;"	m	struct:array_info_scalar	typeref:typename:constexpr bool
is_expression	src/pybind11/tools/clang/cindex.py	/^    def is_expression(self):$/;"	m	class:CursorKind
is_fixed_length	tools/gencpp/src/gencpp/__init__.py	/^def is_fixed_length(spec, msg_context, includepath):$/;"	f
is_fmt_numeric	src/pybind11/include/pybind11/common.h	/^template <typename T, typename SFINAE = void> struct is_fmt_numeric { static constexpr bool valu/;"	s
is_fmt_numeric	src/pybind11/include/pybind11/common.h	/^template <typename T> struct is_fmt_numeric<T, enable_if_t<std::is_arithmetic<T>::value>> {$/;"	s
is_fmt_numeric	src/pybind11/include/pybind11/complex.h	/^template <typename T> struct is_fmt_numeric<std::complex<T>, detail::enable_if_t<std::is_floatin/;"	s
is_function_variadic	src/pybind11/tools/clang/cindex.py	/^    def is_function_variadic(self):$/;"	m	class:Type
is_header_type	tools/genmsg/src/genmsg/msgs.py	/^def is_header_type(msg_type):$/;"	f
is_holder	src/pybind11/include/pybind11/pybind11.h	/^    template <typename T> using is_holder = detail::is_holder_type<type_, T>;$/;"	t	class:class_	typeref:typename:detail::is_holder_type<type_,T>
is_holder_type	src/pybind11/include/pybind11/cast.h	/^template <typename base, typename deleter> struct is_holder_type<base, std::unique_ptr<base, del/;"	s
is_holder_type	src/pybind11/include/pybind11/cast.h	/^template <typename base, typename holder> struct is_holder_type :$/;"	s
is_input_file	src/pybind11/tools/clang/cindex.py	/^    def is_input_file(self):$/;"	m	class:FileInclusion
is_input_iterator	src/pybind11/include/pybind11/common.h	/^struct is_input_iterator<T, void_t<decltype(*std::declval<T &>()), decltype(++std::declval<T &>(/;"	s
is_input_iterator	src/pybind11/include/pybind11/common.h	/^template <typename T, typename = void> struct is_input_iterator : std::false_type {};$/;"	s
is_instantiation	src/pybind11/include/pybind11/common.h	/^struct is_instantiation : std::false_type { };$/;"	s
is_instantiation	src/pybind11/include/pybind11/common.h	/^struct is_instantiation<Class, Class<Us...>> : std::true_type { };$/;"	s
is_invalid	src/pybind11/tools/clang/cindex.py	/^    def is_invalid(self):$/;"	m	class:CursorKind
is_keyword	src/pybind11/include/pybind11/pytypes.h	/^template <typename T> using is_keyword = std::is_base_of<arg, T>;$/;"	t	typeref:typename:std::is_base_of<arg,T>
is_keyword_or_ds	src/pybind11/include/pybind11/pytypes.h	/^template <typename T> using is_keyword_or_ds = satisfies_any_of<T, is_keyword, is_ds_unpacking>;$/;"	t	typeref:typename:satisfies_any_of<T,is_keyword,is_ds_unpacking>
is_legal_resource_base_name	tools/genmsg/src/genmsg/names.py	/^def is_legal_resource_base_name(name):$/;"	f
is_legal_resource_name	tools/genmsg/src/genmsg/names.py	/^def is_legal_resource_name(name):$/;"	f
is_method	src/pybind11/include/pybind11/attr.h	/^    bool is_method : 1;$/;"	m	struct:function_record	typeref:typename:bool:1
is_method	src/pybind11/include/pybind11/attr.h	/^struct is_method { handle class_; is_method(const handle &c) : class_(c) { } };$/;"	f	struct:is_method
is_method	src/pybind11/include/pybind11/attr.h	/^struct is_method { handle class_; is_method(const handle &c) : class_(c) { } };$/;"	s
is_move_constructor	src/pybind11/tools/clang/cindex.py	/^    def is_move_constructor(self):$/;"	m	class:Cursor
is_mutable_field	src/pybind11/tools/clang/cindex.py	/^    def is_mutable_field(self):$/;"	m	class:Cursor
is_none	src/pybind11/include/pybind11/pytypes.h	/^    bool is_none() const { return derived().ptr() == Py_None; }$/;"	f	class:object_api	typeref:typename:bool
is_operator	src/pybind11/include/pybind11/attr.h	/^    bool is_operator : 1;$/;"	m	struct:function_record	typeref:typename:bool:1
is_operator	src/pybind11/include/pybind11/attr.h	/^struct is_operator { };$/;"	s
is_pair	src/pybind11/include/pybind11/stl_bind.h	/^    static constexpr const bool is_pair = std::is_same<std::true_type, decltype(test_pair<T>(nul/;"	m	struct:container_traits	typeref:typename:constexpr const bool
is_pod	src/pybind11/tools/clang/cindex.py	/^    def is_pod(self):$/;"	m	class:Type
is_pod_struct	src/pybind11/include/pybind11/numpy.h	/^template <typename T> using is_pod_struct = all_of<$/;"	t
is_positional	src/pybind11/include/pybind11/pytypes.h	/^template <typename T> using is_positional = satisfies_none_of<T,$/;"	t	typeref:typename:satisfies_none_of<T,is_keyword,is_s_unpacking,is_ds_unpacking>
is_preprocessing	src/pybind11/tools/clang/cindex.py	/^    def is_preprocessing(self):$/;"	m	class:CursorKind
is_pure_virtual_method	src/pybind11/tools/clang/cindex.py	/^    def is_pure_virtual_method(self):$/;"	m	class:Cursor
is_pyobject	src/pybind11/include/pybind11/pytypes.h	/^template <typename T> using is_pyobject = std::is_base_of<pyobject_tag, remove_reference_t<T>>;$/;"	t	typeref:typename:std::is_base_of<pyobject_tag,remove_reference_t<T>>
is_reference	src/pybind11/tools/clang/cindex.py	/^    def is_reference(self):$/;"	m	class:CursorKind
is_registered	tools/genmsg/src/genmsg/msg_loader.py	/^    def is_registered(self, full_msg_type):$/;"	m	class:MsgContext
is_restrict_qualified	src/pybind11/tools/clang/cindex.py	/^    def is_restrict_qualified(self):$/;"	m	class:Type
is_s_unpacking	src/pybind11/include/pybind11/pytypes.h	/^template <typename T> using is_s_unpacking = std::is_same<args_proxy, T>; \/\/ * unpacking$/;"	t	typeref:typename:std::is_same<args_proxy,T>
is_shared_ptr	src/pybind11/include/pybind11/common.h	/^template <typename T> using is_shared_ptr = is_instantiation<std::shared_ptr, T>;$/;"	t	typeref:typename:is_instantiation<std::shared_ptr,T>
is_stateless	src/pybind11/include/pybind11/attr.h	/^    bool is_stateless : 1;$/;"	m	struct:function_record	typeref:typename:bool:1
is_statement	src/pybind11/tools/clang/cindex.py	/^    def is_statement(self):$/;"	m	class:CursorKind
is_static_method	src/pybind11/tools/clang/cindex.py	/^    def is_static_method(self):$/;"	m	class:Cursor
is_std_array	src/pybind11/include/pybind11/numpy.h	/^template <typename T, size_t N> struct is_std_array<std::array<T, N>> : std::true_type { };$/;"	s
is_std_array	src/pybind11/include/pybind11/numpy.h	/^template <typename T> struct is_std_array : std::false_type { };$/;"	s
is_std_char_type	src/pybind11/include/pybind11/cast.h	/^template <typename CharT> using is_std_char_type = any_of<$/;"	t
is_strict_base_of	src/pybind11/include/pybind11/common.h	/^template <typename Base, typename Derived> using is_strict_base_of = bool_constant<$/;"	t	typeref:typename:bool_constant<std::is_base_of<Base,Derived>::value &&!std::is_same<Base,Derived>::value>
is_subtype	src/pybind11/include/pybind11/pybind11.h	/^    template <typename T> using is_subtype = detail::is_strict_base_of<type_, T>;$/;"	t	class:class_	typeref:typename:detail::is_strict_base_of<type_,T>
is_template_base_of	src/pybind11/include/pybind11/common.h	/^using is_template_base_of = decltype(is_template_base_of_impl<Base>::check((remove_cv_t<T>*)null/;"	t
is_template_base_of_impl	src/pybind11/include/pybind11/common.h	/^struct is_template_base_of_impl {$/;"	s
is_translation_unit	src/pybind11/tools/clang/cindex.py	/^    def is_translation_unit(self):$/;"	m	class:CursorKind
is_unexposed	src/pybind11/tools/clang/cindex.py	/^    def is_unexposed(self):$/;"	m	class:CursorKind
is_valid	src/pybind11/include/pybind11/embed.h	/^    bool is_valid = true;$/;"	m	class:scoped_interpreter	typeref:typename:bool
is_valid_class_option	src/pybind11/include/pybind11/pybind11.h	/^    template <typename T> struct is_valid_class_option :$/;"	s	class:class_
is_valid_constant_type	tools/genmsg/src/genmsg/msgs.py	/^def is_valid_constant_type(x):$/;"	f
is_valid_msg_field_name	tools/genmsg/src/genmsg/msgs.py	/^def is_valid_msg_field_name(x):$/;"	f
is_valid_msg_type	tools/genmsg/src/genmsg/msgs.py	/^def is_valid_msg_type(x):$/;"	f
is_vector	src/pybind11/include/pybind11/stl_bind.h	/^    static constexpr const bool is_vector = std::is_same<std::true_type, decltype(test_value<T>(/;"	m	struct:container_traits	typeref:typename:constexpr const bool
is_virtual_method	src/pybind11/tools/clang/cindex.py	/^    def is_virtual_method(self):$/;"	m	class:Cursor
is_volatile_qualified	src/pybind11/tools/clang/cindex.py	/^    def is_volatile_qualified(self):$/;"	m	class:Type
isclose	src/pybind11/tests/test_sequences_and_iterators.py	/^def isclose(a, b, rel_tol=1e-05, abs_tol=0.0):$/;"	f
isinstance	src/pybind11/include/pybind11/pytypes.h	/^bool isinstance(handle obj) { return T::check_(obj); }$/;"	f	typeref:typename:bool
isinstance	src/pybind11/include/pybind11/pytypes.h	/^inline bool isinstance(handle obj, handle type) {$/;"	f	typeref:typename:bool
isinstance_generic	src/pybind11/include/pybind11/cast.h	/^PYBIND11_NOINLINE inline bool isinstance_generic(handle obj, const std::type_info &tp) {$/;"	f	typeref:typename:PYBIND11_NOINLINE bool
istate	src/pybind11/include/pybind11/common.h	/^    PyInterpreterState *istate = nullptr;$/;"	m	struct:internals	typeref:typename:PyInterpreterState *
it	src/pybind11/include/pybind11/pybind11.h	/^    Iterator it;$/;"	m	struct:iterator_state	typeref:typename:Iterator
item_accessor	src/pybind11/include/pybind11/pytypes.h	/^using item_accessor = accessor<accessor_policies::generic_item>;$/;"	t	typeref:typename:accessor<accessor_policies::generic_item>
itemsize	src/pybind11/include/pybind11/buffer_info.h	/^    ssize_t itemsize = 0;         \/\/ Size of individual items in bytes$/;"	m	struct:buffer_info	typeref:typename:ssize_t
itemsize	src/pybind11/include/pybind11/numpy.h	/^    constexpr ssize_t itemsize() const {$/;"	f	class:array_t	typeref:typename:ssize_t
itemsize	src/pybind11/include/pybind11/numpy.h	/^    constexpr static ssize_t itemsize() { return sizeof(T); }$/;"	f	class:unchecked_reference	typeref:typename:ssize_t
itemsize	src/pybind11/include/pybind11/numpy.h	/^    ssize_t itemsize() const {$/;"	f	class:array	typeref:typename:ssize_t
itemsize	src/pybind11/include/pybind11/numpy.h	/^    ssize_t itemsize() const {$/;"	f	class:dtype	typeref:typename:ssize_t
iter	src/pybind11/include/pybind11/pytypes.h	/^inline iterator iter(handle obj) {$/;"	f	typeref:typename:iterator
iterable	src/pybind11/include/pybind11/pytypes.h	/^class iterable : public object {$/;"	c
iterator	src/pybind11/include/pybind11/cast.h	/^        iterator(instance *inst, const type_vec *tinfo)$/;"	f	struct:values_and_holders::iterator
iterator	src/pybind11/include/pybind11/cast.h	/^        iterator(size_t end) : curr(end) {}$/;"	f	struct:values_and_holders::iterator
iterator	src/pybind11/include/pybind11/cast.h	/^    struct iterator {$/;"	s	struct:values_and_holders
iterator	src/pybind11/include/pybind11/pytypes.h	/^class iterator : public object {$/;"	c
iterator_category	src/pybind11/include/pybind11/pytypes.h	/^    using iterator_category = std::forward_iterator_tag;$/;"	t	class:dict_readonly	typeref:typename:std::forward_iterator_tag
iterator_category	src/pybind11/include/pybind11/pytypes.h	/^    using iterator_category = std::input_iterator_tag;$/;"	t	class:iterator	typeref:typename:std::input_iterator_tag
iterator_category	src/pybind11/include/pybind11/pytypes.h	/^    using iterator_category = std::random_access_iterator_tag;$/;"	t	class:sequence_fast_readonly	typeref:typename:std::random_access_iterator_tag
iterator_category	src/pybind11/include/pybind11/pytypes.h	/^    using iterator_category = std::random_access_iterator_tag;$/;"	t	class:sequence_slow_readwrite	typeref:typename:std::random_access_iterator_tag
iterator_category	src/pybind11/include/pybind11/pytypes.h	/^    using iterator_category = typename Policy::iterator_category;$/;"	t	class:generic_iterator	typeref:typename:Policy::iterator_category
iterator_state	src/pybind11/include/pybind11/pybind11.h	/^struct iterator_state {$/;"	s
itype	src/pybind11/include/pybind11/cast.h	/^    using itype = intrinsic_t<type>;$/;"	t	class:type_caster_base	typeref:typename:intrinsic_t<type>
job_count	src/pybind11/tools/mkdoc.py	/^job_count = cpu_count()$/;"	v
job_semaphore	src/pybind11/tools/mkdoc.py	/^job_semaphore = Semaphore(job_count)$/;"	v
json	src/pybind11/docs/Makefile	/^json:$/;"	t
json	tools/genmsg/doc/Makefile	/^json:$/;"	t
keep_alive	src/pybind11/include/pybind11/attr.h	/^template <size_t Nurse, size_t Patient> struct keep_alive { };$/;"	s
keep_alive	src/pybind11/tests/test_call_policies.cpp	/^test_initializer keep_alive([](py::module &m) {$/;"	v	typeref:typename:test_initializer
keep_alive_impl	src/pybind11/include/pybind11/pybind11.h	/^PYBIND11_NOINLINE inline void keep_alive_impl(size_t Nurse, size_t Patient, function_call &call,/;"	f	typeref:typename:PYBIND11_NOINLINE void
keep_alive_impl	src/pybind11/include/pybind11/pybind11.h	/^inline void keep_alive_impl(handle nurse, handle patient) {$/;"	f	typeref:typename:void
key	src/pybind11/include/pybind11/pytypes.h	/^    PyObject *key, *value;$/;"	m	class:dict_readonly	typeref:typename:PyObject *
key	src/pybind11/include/pybind11/pytypes.h	/^    key_type key;$/;"	m	class:accessor	typeref:typename:key_type
key_conv	src/pybind11/include/pybind11/stl.h	/^    using key_conv   = make_caster<Key>;$/;"	t	struct:map_caster	typeref:typename:make_caster<Key>
key_conv	src/pybind11/include/pybind11/stl.h	/^    using key_conv = make_caster<Key>;$/;"	t	struct:set_caster	typeref:typename:make_caster<Key>
key_type	src/pybind11/include/pybind11/pytypes.h	/^    using key_type = const char *;$/;"	t	struct:str_attr	typeref:typename:const char *
key_type	src/pybind11/include/pybind11/pytypes.h	/^    using key_type = object;$/;"	t	struct:generic_item	typeref:typename:object
key_type	src/pybind11/include/pybind11/pytypes.h	/^    using key_type = object;$/;"	t	struct:obj_attr	typeref:typename:object
key_type	src/pybind11/include/pybind11/pytypes.h	/^    using key_type = size_t;$/;"	t	struct:list_item	typeref:typename:size_t
key_type	src/pybind11/include/pybind11/pytypes.h	/^    using key_type = size_t;$/;"	t	struct:sequence_item	typeref:typename:size_t
key_type	src/pybind11/include/pybind11/pytypes.h	/^    using key_type = size_t;$/;"	t	struct:tuple_item	typeref:typename:size_t
key_type	src/pybind11/include/pybind11/pytypes.h	/^    using key_type = typename Policy::key_type;$/;"	t	class:accessor	typeref:typename:Policy::key_type
kind	src/pybind11/include/pybind11/numpy.h	/^    char kind() const {$/;"	f	class:dtype	typeref:typename:char
kind	src/pybind11/include/pybind11/numpy.h	/^    char kind;$/;"	m	struct:PyArrayDescr_Proxy	typeref:typename:char
kind	src/pybind11/tools/clang/cindex.py	/^    def kind(self):$/;"	m	class:CodeCompletionResult
kind	src/pybind11/tools/clang/cindex.py	/^    def kind(self):$/;"	m	class:CompletionChunk
kind	src/pybind11/tools/clang/cindex.py	/^    def kind(self):$/;"	m	class:Cursor
kind	src/pybind11/tools/clang/cindex.py	/^    def kind(self):$/;"	m	class:Token
kind	src/pybind11/tools/clang/cindex.py	/^    def kind(self):$/;"	m	class:Type
kw_func	src/pybind11/tests/test_kwargs_and_defaults.cpp	/^std::string kw_func(int x, int y) { return "x=" + std::to_string(x) + ", y=" + std::to_string(y)/;"	f	typeref:typename:std::string
kw_func4	src/pybind11/tests/test_kwargs_and_defaults.cpp	/^std::string kw_func4(const std::vector<int> &entries) {$/;"	f	typeref:typename:std::string
kwargs	src/pybind11/include/pybind11/cast.h	/^    const dict &kwargs() const & { return m_kwargs; }$/;"	f	class:unpacking_collector	typeref:typename:const dict &
kwargs	src/pybind11/include/pybind11/cast.h	/^    dict kwargs() && { return std::move(m_kwargs); }$/;"	f	class:unpacking_collector	typeref:typename:dict
kwargs	src/pybind11/include/pybind11/cast.h	/^    dict kwargs() const { return {}; }$/;"	f	class:simple_collector	typeref:typename:dict
kwargs	src/pybind11/include/pybind11/pytypes.h	/^class kwargs : public dict { PYBIND11_OBJECT_DEFAULT(kwargs, dict, PyDict_Check)  };$/;"	c
kwargs_proxy	src/pybind11/include/pybind11/pytypes.h	/^    explicit kwargs_proxy(handle h) : handle(h) { }$/;"	f	class:kwargs_proxy
kwargs_proxy	src/pybind11/include/pybind11/pytypes.h	/^class kwargs_proxy : public handle {$/;"	c
l	src/pybind11/tests/test_smart_ptr.cpp	/^    std::vector<std::shared_ptr<ElementBase>> l;$/;"	m	struct:ElementList	typeref:typename:std::vector<std::shared_ptr<ElementBase>>	file:
lacking_copy_ctor	src/pybind11/tests/test_copy_move.cpp	/^    lacking_copy_ctor() {}$/;"	f	struct:lacking_copy_ctor	file:
lacking_copy_ctor	src/pybind11/tests/test_copy_move.cpp	/^struct lacking_copy_ctor : public empty<lacking_copy_ctor> {$/;"	s	file:
lacking_move_ctor	src/pybind11/tests/test_copy_move.cpp	/^    lacking_move_ctor() {}$/;"	f	struct:lacking_move_ctor	file:
lacking_move_ctor	src/pybind11/tests/test_copy_move.cpp	/^struct lacking_move_ctor : public empty<lacking_move_ctor> {$/;"	s	file:
language	src/pybind11/docs/conf.py	/^language = None$/;"	v
last	src/pybind11/include/pybind11/common.h	/^constexpr int last(int \/*i*\/, int result) { return result; }$/;"	f	typeref:typename:int
last	src/pybind11/include/pybind11/common.h	/^constexpr int last(int i, int result, T v, Ts... vs) { return last(i + 1, v ? i : result, vs...)/;"	f	typeref:typename:int
latex	src/pybind11/docs/Makefile	/^latex:$/;"	t
latex	tools/genmsg/doc/Makefile	/^latex:$/;"	t
latex_documents	src/pybind11/docs/conf.py	/^latex_documents = [$/;"	v
latex_documents	tools/genmsg/doc/conf.py	/^latex_documents = [$/;"	v
latex_elements	src/pybind11/docs/conf.py	/^latex_elements = {$/;"	v
latex_elements	tools/genmsg/doc/conf.py	/^latex_elements = {$/;"	v
latexpdf	src/pybind11/docs/Makefile	/^latexpdf:$/;"	t
latexpdf	tools/genmsg/doc/Makefile	/^latexpdf:$/;"	t
latexpdfja	src/pybind11/docs/Makefile	/^latexpdfja:$/;"	t
ldbl_	src/pybind11/tests/test_numpy_dtypes.cpp	/^    long double ldbl_;$/;"	m	struct:PartialStruct	typeref:typename:long double	file:
ldbl_	src/pybind11/tests/test_numpy_dtypes.cpp	/^    long double ldbl_;$/;"	m	struct:SimpleStruct	typeref:typename:long double	file:
len	src/pybind11/include/pybind11/numpy.h	/^        int len;$/;"	m	struct:npy_api::__anonc556634c0108	typeref:typename:int
len	src/pybind11/include/pybind11/pytypes.h	/^inline size_t len(handle h) {$/;"	f	typeref:typename:size_t
length	src/elka_comm/common/elka.h	/^  uint8_t snd_params, type, length;$/;"	m	struct:elka_msg_id_s	typeref:typename:uint8_t
length	src/elka_comm/common/elka_comm.cpp	/^  uint8_t snd_params, type, length;$/;"	m	struct:elka_msg_id_s	typeref:typename:uint8_t	file:
length	src/pybind11/include/pybind11/pytypes.h	/^        ssize_t length;$/;"	m	class:bytes	typeref:typename:ssize_t
length	src/pybind11/include/pybind11/pytypes.h	/^        ssize_t length;$/;"	m	class:str	typeref:typename:ssize_t
lexical_parent	src/pybind11/tools/clang/cindex.py	/^    def lexical_parent(self):$/;"	m	class:Cursor
lib	src/pybind11/tools/clang/cindex.py	/^    def lib(self):$/;"	m	class:Config
lib	src/pybind11/tools/libsize.py	/^lib = sys.argv[1]$/;"	v
lib_dir	src/pybind11/tools/mkdoc.py	/^        lib_dir = dev_path + 'Toolchains\/XcodeDefault.xctoolchain\/usr\/lib\/'$/;"	v
libclang	src/pybind11/tools/mkdoc.py	/^        libclang = lib_dir + 'libclang.dylib'$/;"	v
library_file	src/pybind11/tools/clang/cindex.py	/^    library_file = None$/;"	v	class:Config
library_path	src/pybind11/tools/clang/cindex.py	/^    library_path = None$/;"	v	class:Config
libsize	src/pybind11/tools/libsize.py	/^libsize = os.path.getsize(lib)$/;"	v
line	src/pybind11/tools/clang/cindex.py	/^    def line(self):$/;"	m	class:SourceLocation
linkcheck	src/pybind11/docs/Makefile	/^linkcheck:$/;"	t
linkcheck	tools/genmsg/doc/Makefile	/^linkcheck:$/;"	t
list	src/pybind11/include/pybind11/pytypes.h	/^    explicit list(size_t size = 0) : object(PyList_New((ssize_t) size), stolen_t{}) {$/;"	f	class:list	typeref:typename:PYBIND11_OBJECT_CVT (list,object,PyList_Check,PySequence_List)
list	src/pybind11/include/pybind11/pytypes.h	/^class list : public object {$/;"	c
list_accessor	src/pybind11/include/pybind11/pytypes.h	/^using list_accessor = accessor<accessor_policies::list_item>;$/;"	t	typeref:typename:accessor<accessor_policies::list_item>
list_caster	src/pybind11/include/pybind11/stl.h	/^template <typename Type, typename Value> struct list_caster {$/;"	s
list_item	src/pybind11/include/pybind11/pytypes.h	/^struct list_item {$/;"	s
list_iterator	src/pybind11/include/pybind11/pytypes.h	/^using list_iterator = generic_iterator<iterator_policies::sequence_fast_readonly>;$/;"	t	typeref:typename:generic_iterator<iterator_policies::sequence_fast_readonly>
literals	src/pybind11/include/pybind11/cast.h	/^inline namespace literals {$/;"	n
literals	src/pybind11/include/pybind11/pytypes.h	/^inline namespace literals {$/;"	n
load	src/elka_comm/common/elka_comm.cpp	/^		bool load(handle src, bool) {$/;"	f	struct:pybind11::detail::type_caster	typeref:typename:bool	file:
load	src/pybind11/include/pybind11/cast.h	/^    bool load(handle h, bool) {$/;"	f	class:type_caster	typeref:typename:bool
load	src/pybind11/include/pybind11/cast.h	/^    bool load(handle src, bool \/* convert *\/) { value = src; return static_cast<bool>(value); /;"	f	struct:pyobject_caster	typeref:typename:bool
load	src/pybind11/include/pybind11/cast.h	/^    bool load(handle src, bool \/* convert *\/) {$/;"	f	struct:pyobject_caster	typeref:typename:bool
load	src/pybind11/include/pybind11/cast.h	/^    bool load(handle src, bool convert) { return subcaster.load(src, convert); }$/;"	f	class:type_caster	typeref:typename:bool
load	src/pybind11/include/pybind11/cast.h	/^    bool load(handle src, bool convert) {$/;"	f	class:tuple_caster	typeref:typename:bool
load	src/pybind11/include/pybind11/cast.h	/^    bool load(handle src, bool convert) {$/;"	f	class:type_caster_generic	typeref:typename:bool
load	src/pybind11/include/pybind11/cast.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:copyable_holder_caster	typeref:typename:bool
load	src/pybind11/include/pybind11/cast.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:type_caster	typeref:typename:bool
load	src/pybind11/include/pybind11/cast.h	/^    bool load(handle src, bool) {$/;"	f	class:type_caster	typeref:typename:bool
load	src/pybind11/include/pybind11/cast.h	/^    bool load(handle src, bool) {$/;"	f	struct:string_caster	typeref:typename:bool
load	src/pybind11/include/pybind11/cast.h	/^    bool load(handle src, bool) {$/;"	f	struct:void_caster	typeref:typename:bool
load	src/pybind11/include/pybind11/chrono.h	/^    bool load(handle src, bool) {$/;"	f	class:duration_caster	typeref:typename:bool
load	src/pybind11/include/pybind11/chrono.h	/^    bool load(handle src, bool) {$/;"	f	class:type_caster	typeref:typename:bool
load	src/pybind11/include/pybind11/complex.h	/^    bool load(handle src, bool convert) {$/;"	f	class:type_caster	typeref:typename:bool
load	src/pybind11/include/pybind11/eigen.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:type_caster	typeref:typename:bool
load	src/pybind11/include/pybind11/eigen.h	/^    bool load(handle src, bool) {$/;"	f	struct:type_caster	typeref:typename:bool
load	src/pybind11/include/pybind11/functional.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:type_caster	typeref:typename:bool
load	src/pybind11/include/pybind11/numpy.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:pyobject_caster	typeref:typename:bool
load	src/pybind11/include/pybind11/stl.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:array_caster	typeref:typename:bool
load	src/pybind11/include/pybind11/stl.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:list_caster	typeref:typename:bool
load	src/pybind11/include/pybind11/stl.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:map_caster	typeref:typename:bool
load	src/pybind11/include/pybind11/stl.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:optional_caster	typeref:typename:bool
load	src/pybind11/include/pybind11/stl.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:set_caster	typeref:typename:bool
load	src/pybind11/include/pybind11/stl.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:variant_caster	typeref:typename:bool
load	src/pybind11/tests/test_copy_move.cpp	/^    bool load(handle src, bool) { value = CopyOnlyInt(src.cast<int>()); return true; }$/;"	f	struct:pybind11::detail::type_caster	typeref:typename:bool	file:
load	src/pybind11/tests/test_copy_move.cpp	/^    bool load(handle src, bool) { value = MoveOnlyInt(src.cast<int>()); return true; }$/;"	f	struct:pybind11::detail::type_caster	typeref:typename:bool	file:
load	src/pybind11/tests/test_copy_move.cpp	/^    bool load(handle src, bool) { value = MoveOrCopyInt(src.cast<int>()); return true; }$/;"	f	struct:pybind11::detail::type_caster	typeref:typename:bool	file:
load	src/pybind11/tests/test_methods_and_attributes.cpp	/^    bool load(handle src, bool convert) {$/;"	f	struct:pybind11::detail::type_caster	typeref:typename:bool	file:
load	src/pybind11/tests/test_methods_and_attributes.cpp	/^    bool load(handle, bool convert) {$/;"	f	struct:pybind11::detail::type_caster	typeref:typename:bool	file:
load	src/pybind11/tests/test_methods_and_attributes.cpp	/^    bool load(handle, bool) { return true; }$/;"	f	struct:pybind11::detail::type_caster	typeref:typename:bool	file:
load_alternative	src/pybind11/include/pybind11/stl.h	/^    bool load_alternative(handle src, bool convert, type_list<U, Us...>) {$/;"	f	struct:variant_caster	typeref:typename:bool
load_alternative	src/pybind11/include/pybind11/stl.h	/^    bool load_alternative(handle, bool, type_list<>) { return false; }$/;"	f	struct:variant_caster	typeref:typename:bool
load_args	src/pybind11/include/pybind11/cast.h	/^    bool load_args(function_call &call) {$/;"	f	class:argument_loader	typeref:typename:bool
load_bytes	src/pybind11/include/pybind11/cast.h	/^    bool load_bytes(enable_if_t<sizeof(C) != 1, handle>) { return false; }$/;"	f	struct:string_caster	typeref:typename:bool
load_bytes	src/pybind11/include/pybind11/cast.h	/^    bool load_bytes(enable_if_t<sizeof(C) == 1, handle> src) {$/;"	f	struct:string_caster	typeref:typename:bool
load_depends	tools/genmsg/src/genmsg/msg_loader.py	/^def load_depends(msg_context, spec, msg_search_path):$/;"	f
load_impl	src/pybind11/include/pybind11/cast.h	/^    PYBIND11_NOINLINE bool load_impl(handle src, bool convert) {$/;"	f	class:type_caster_generic	typeref:typename:PYBIND11_NOINLINE bool
load_impl	src/pybind11/include/pybind11/cast.h	/^    bool load_impl(const sequence &seq, bool convert, index_sequence<Is...>) {$/;"	f	class:tuple_caster	typeref:typename:bool
load_impl	src/pybind11/include/pybind11/cast.h	/^    static constexpr bool load_impl(const sequence &, bool, index_sequence<>) { return true; }$/;"	f	class:tuple_caster	typeref:typename:bool
load_impl_sequence	src/pybind11/include/pybind11/cast.h	/^    bool load_impl_sequence(function_call &call, index_sequence<Is...>) {$/;"	f	class:argument_loader	typeref:typename:bool
load_impl_sequence	src/pybind11/include/pybind11/cast.h	/^    static bool load_impl_sequence(function_call &, index_sequence<>) { return true; }$/;"	f	class:argument_loader	typeref:typename:bool
load_msg_by_type	tools/genmsg/src/genmsg/msg_loader.py	/^def load_msg_by_type(msg_context, msg_type, search_path):$/;"	f
load_msg_depends	tools/genmsg/src/genmsg/msg_loader.py	/^def load_msg_depends(msg_context, spec, search_path):$/;"	f
load_msg_from_file	tools/genmsg/src/genmsg/msg_loader.py	/^def load_msg_from_file(msg_context, file_path, full_name):$/;"	f
load_msg_from_string	tools/genmsg/src/genmsg/msg_loader.py	/^def load_msg_from_string(msg_context, text, full_name):$/;"	f
load_numpy_internals	src/pybind11/include/pybind11/numpy.h	/^inline PYBIND11_NOINLINE void load_numpy_internals(numpy_internals* &ptr) {$/;"	f	typeref:typename:PYBIND11_NOINLINE void
load_srv_by_type	tools/genmsg/src/genmsg/msg_loader.py	/^def load_srv_by_type(msg_context, srv_type, search_path):$/;"	f
load_srv_from_file	tools/genmsg/src/genmsg/msg_loader.py	/^def load_srv_from_file(msg_context, file_path, full_name):$/;"	f
load_srv_from_string	tools/genmsg/src/genmsg/msg_loader.py	/^def load_srv_from_string(msg_context, text, full_name):$/;"	f
load_type	src/pybind11/include/pybind11/cast.h	/^template <typename T, typename SFINAE> type_caster<T, SFINAE> &load_type(type_caster<T, SFINAE> /;"	f	typeref:typename:type_caster<T,SFINAE> &
load_type	src/pybind11/include/pybind11/cast.h	/^template <typename T> make_caster<T> load_type(const handle &handle) {$/;"	f	typeref:typename:make_caster<T>
load_value	src/pybind11/include/pybind11/cast.h	/^    bool load_value(const value_and_holder &v_h) {$/;"	f	struct:copyable_holder_caster	typeref:typename:bool
load_value	src/pybind11/include/pybind11/cast.h	/^    void load_value(const value_and_holder &v_h) {$/;"	f	class:type_caster_generic	typeref:typename:void
loaded	src/pybind11/tools/clang/cindex.py	/^    loaded = False$/;"	v	class:Config
loader_life_support	src/pybind11/include/pybind11/cast.h	/^    loader_life_support() {$/;"	f	class:loader_life_support
loader_life_support	src/pybind11/include/pybind11/cast.h	/^class loader_life_support {$/;"	c
loader_patient_stack	src/pybind11/include/pybind11/common.h	/^    std::vector<PyObject *> loader_patient_stack; \/\/ Used by `loader_life_support`$/;"	m	struct:internals	typeref:typename:std::vector<PyObject * >
locals	src/pybind11/tests/test_embed/test_interpreter.cpp	/^    auto locals = py::dict("count"_a=0);$/;"	v	typeref:typename:auto
locals	src/pybind11/tests/test_embed/test_interpreter.cpp	/^    auto locals = py::dict("hello"_a="Hello, World!", "x"_a=5, **module.attr("__dict__"));$/;"	v	typeref:typename:auto
location	src/pybind11/tools/clang/cindex.py	/^    def location(self):$/;"	m	class:Cursor
location	src/pybind11/tools/clang/cindex.py	/^    def location(self):$/;"	m	class:Diagnostic
location	src/pybind11/tools/clang/cindex.py	/^    def location(self):$/;"	m	class:Token
log	tools/genmsg/src/genmsg/base.py	/^def log(*args):$/;"	f
log2	src/pybind11/include/pybind11/common.h	/^inline static constexpr int log2(size_t n, int k = 0) { return (n <= 1) ? k : log2(n >> 1, k + 1/;"	f	typeref:typename:NAMESPACE_BEGIN (detail)constexpr int
log_full_text	tools/genmsg/test/test_genmsg_gentools.py	/^log_full_text = """##$/;"	v
log_verbose	tools/genmsg/src/genmsg/base.py	/^def log_verbose(value):$/;"	f
lookup	src/pybind11/include/pybind11/numpy.h	/^    static npy_api lookup() {$/;"	f	struct:npy_api	typeref:typename:npy_api
lucky_number	src/pybind11/tests/test_virtual_functions.cpp	/^    double lucky_number() override { PYBIND11_OVERLOAD(double, B_Repeat, lucky_number, ); }$/;"	f	class:PyB_Repeat	typeref:typename:double	file:
lucky_number	src/pybind11/tests/test_virtual_functions.cpp	/^    double lucky_number() override { PYBIND11_OVERLOAD(double, Base, lucky_number, ); }$/;"	f	class:PyB_Tpl	typeref:typename:double	file:
lucky_number	src/pybind11/tests/test_virtual_functions.cpp	/^    double lucky_number() override { PYBIND11_OVERLOAD(double, C_Repeat, lucky_number, ); }$/;"	f	class:PyC_Repeat	typeref:typename:double	file:
lucky_number	src/pybind11/tests/test_virtual_functions.cpp	/^    double lucky_number() override { PYBIND11_OVERLOAD(double, D_Repeat, lucky_number, ); }$/;"	f	class:PyD_Repeat	typeref:typename:double	file:
lucky_number	src/pybind11/tests/test_virtual_functions.py	/^        def lucky_number(self):$/;"	m	class:test_inheriting_repeat.BT
lucky_number	src/pybind11/tests/test_virtual_functions.py	/^        def lucky_number(self):$/;"	m	class:test_inheriting_repeat.CCR
lucky_number	src/pybind11/tests/test_virtual_functions.py	/^        def lucky_number(self):$/;"	m	class:test_inheriting_repeat.CCT
lucky_number	src/pybind11/tests/test_virtual_functions.py	/^        def lucky_number(self):$/;"	m	class:test_inheriting_repeat.CR
lucky_number	src/pybind11/tests/test_virtual_functions.py	/^        def lucky_number(self):$/;"	m	class:test_inheriting_repeat.DR
lucky_number	src/pybind11/tests/test_virtual_functions.py	/^        def lucky_number(self):$/;"	m	class:test_inheriting_repeat.DT
m	src/pybind11/tests/test_builtin_casters.py	/^from pybind11_tests import builtin_casters as m$/;"	x
m	src/pybind11/tests/test_class.py	/^from pybind11_tests import class_ as m$/;"	x
m	src/pybind11/tests/test_copy_move.py	/^    import pybind11_tests as m$/;"	I	function:test_private_op_new	file:
m	src/pybind11/tests/test_embed/test_interpreter.cpp	/^        auto m = py::module::import("widget_module");$/;"	v	typeref:typename:auto
m	src/pybind11/tests/test_methods_and_attributes.py	/^    import pybind11_tests as m$/;"	I	function:test_custom_caster_destruction	file:
m	src/pybind11/tests/test_methods_and_attributes.py	/^    import pybind11_tests as m$/;"	I	function:test_noconvert_args	file:
m	src/pybind11/tests/test_pytypes.py	/^from pybind11_tests import pytypes as m$/;"	x
m	src/pybind11/tests/test_sequences_and_iterators.py	/^    import pybind11_tests.sequences_and_iterators as m$/;"	I	function:test_iterator_rvp	file:
m	src/pybind11/tests/test_sequences_and_iterators.py	/^    import pybind11_tests.sequences_and_iterators as m$/;"	I	function:test_python_iterator_in_cpp	file:
m	src/pybind11/tests/test_stl.py	/^from pybind11_tests import stl as m$/;"	x
m	src/pybind11/tests/test_virtual_functions.py	/^from pybind11_tests import virtual_functions as m$/;"	x
m1	src/pybind11/tests/test_constants_and_functions.cpp	/^    int m1(int x) noexcept { return x-1; }$/;"	f	struct:test_exc_sp::C	typeref:typename:int	file:
m2	src/pybind11/tests/test_constants_and_functions.cpp	/^    int m2(int x) const noexcept { return x-2; }$/;"	f	struct:test_exc_sp::C	typeref:typename:int	file:
m3	src/pybind11/tests/test_constants_and_functions.cpp	/^    int m3(int x) noexcept(true) { return x-3; }$/;"	f	struct:test_exc_sp::C	typeref:typename:int	file:
m4	src/pybind11/tests/test_constants_and_functions.cpp	/^    int m4(int x) const noexcept(true) { return x-4; }$/;"	f	struct:test_exc_sp::C	typeref:typename:int	file:
m5	src/pybind11/tests/test_constants_and_functions.cpp	/^    int m5(int x) noexcept(false) { return x-5; }$/;"	f	struct:test_exc_sp::C	typeref:typename:int	file:
m6	src/pybind11/tests/test_constants_and_functions.cpp	/^    int m6(int x) const noexcept(false) { return x-6; }$/;"	f	struct:test_exc_sp::C	typeref:typename:int	file:
m7	src/pybind11/tests/test_constants_and_functions.cpp	/^    int m7(int x) throw() { return x-7; }$/;"	f	struct:test_exc_sp::C	typeref:typename:int	file:
m8	src/pybind11/tests/test_constants_and_functions.cpp	/^    int m8(int x) const throw() { return x-8; }$/;"	f	struct:test_exc_sp::C	typeref:typename:int	file:
m_args	src/pybind11/include/pybind11/cast.h	/^    tuple m_args;$/;"	m	class:simple_collector	typeref:typename:tuple
m_args	src/pybind11/include/pybind11/cast.h	/^    tuple m_args;$/;"	m	class:unpacking_collector	typeref:typename:tuple
m_cols	src/pybind11/tests/test_buffers.cpp	/^    ssize_t m_cols;$/;"	m	class:Matrix	typeref:typename:ssize_t	file:
m_common_iterator	src/pybind11/include/pybind11/numpy.h	/^    std::array<common_iter, N> m_common_iterator;$/;"	m	class:multi_array_iterator	typeref:typename:std::array<common_iter,N>
m_data	src/pybind11/tests/test_buffers.cpp	/^    float *m_data;$/;"	m	class:Matrix	typeref:typename:float *	file:
m_data	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    float *m_data;$/;"	m	class:Sequence	typeref:typename:float *	file:
m_entries	src/pybind11/include/pybind11/pybind11.h	/^    dict m_entries;$/;"	m	class:enum_	typeref:typename:dict
m_extra1	src/pybind11/tests/test_pickling.cpp	/^    int m_extra1 = 0;$/;"	m	class:Pickleable	typeref:typename:int	file:
m_extra2	src/pybind11/tests/test_pickling.cpp	/^    int m_extra2 = 0;$/;"	m	class:Pickleable	typeref:typename:int	file:
m_index	src/pybind11/include/pybind11/numpy.h	/^    container_type m_index;$/;"	m	class:multi_array_iterator	typeref:typename:container_type
m_kwargs	src/pybind11/include/pybind11/cast.h	/^    dict m_kwargs;$/;"	m	class:unpacking_collector	typeref:typename:dict
m_name	src/pybind11/tests/test_class.cpp	/^        std::string m_name;$/;"	m	class:TEST_SUBMODULE::Pet	typeref:typename:std::string	file:
m_parent	src/pybind11/include/pybind11/pybind11.h	/^    handle m_parent;$/;"	m	class:enum_	typeref:typename:handle
m_ptr	src/pybind11/include/pybind11/pytypes.h	/^    PyObject *m_ptr = nullptr;$/;"	m	class:handle	typeref:typename:PyObject *
m_ptr	src/pybind11/tests/object.h	/^    T *m_ptr;$/;"	m	class:ref	typeref:typename:T *
m_refCount	src/pybind11/tests/object.h	/^    mutable std::atomic<int> m_refCount { 0 };$/;"	m	class:Object	typeref:typename:std::atomic<int>
m_rows	src/pybind11/tests/test_buffers.cpp	/^    ssize_t m_rows;$/;"	m	class:Matrix	typeref:typename:ssize_t	file:
m_shape	src/pybind11/include/pybind11/numpy.h	/^    container_type m_shape;$/;"	m	class:multi_array_iterator	typeref:typename:container_type
m_size	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    size_t m_size;$/;"	m	class:Sequence	typeref:typename:size_t	file:
m_species	src/pybind11/tests/test_class.cpp	/^        std::string m_species;$/;"	m	class:TEST_SUBMODULE::Pet	typeref:typename:std::string	file:
m_strides	src/pybind11/include/pybind11/numpy.h	/^    container_type m_strides;$/;"	m	class:common_iterator	typeref:typename:container_type
m_text	src/pybind11/include/pybind11/descr.h	/^    char m_text[Size1 + 1];$/;"	m	class:descr	typeref:typename:char[]
m_types	src/pybind11/include/pybind11/descr.h	/^    const std::type_info * m_types[Size2 + 1];$/;"	m	class:descr	typeref:typename:const std::type_info * []
m_value	src/pybind11/tests/test_pickling.cpp	/^    std::string m_value;$/;"	m	class:Pickleable	typeref:typename:std::string	file:
main	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdC/CMakeCCompilerId.c	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int
main	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f	typeref:typename:void
main	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int
main	build_elka_data_collection/CMakeFiles/feature_tests.c	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f	typeref:typename:int
main	build_elka_data_collection/CMakeFiles/feature_tests.cxx	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f	typeref:typename:int
main	serial/python/serial_recv.py	/^def main():$/;"	f
main	src/pybind11/pybind11/__main__.py	/^def main():$/;"	f
main	src/pybind11/tests/test_cmake_build/embed.cpp	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
main	src/pybind11/tests/test_embed/catch.cpp	/^int main(int argc, const char *argv[]) {$/;"	f	typeref:typename:int
main_state_t	inc/uORB/uORB.h	/^typedef uint8_t main_state_t;$/;"	t	typeref:typename:uint8_t
main_tstate	src/pybind11/tests/test_embed/test_interpreter.cpp	/^    auto main_tstate = PyThreadState_Get();$/;"	v	typeref:typename:auto
make	src/pybind11/tests/test_class.cpp	/^        static std::unique_ptr<MyBase> make() {$/;"	f	struct:TEST_SUBMODULE::MyBase	typeref:typename:std::unique_ptr<MyBase>	file:
make	src/pybind11/tests/test_class.cpp	/^        static std::unique_ptr<MyDerived> make() {$/;"	f	struct:TEST_SUBMODULE::MyDerived	typeref:typename:std::unique_ptr<MyDerived>	file:
make_caster	src/pybind11/include/pybind11/cast.h	/^template <typename type> using make_caster = type_caster<intrinsic_t<type>>;$/;"	t	typeref:typename:type_caster<intrinsic_t<type>>
make_copy_constructor	src/pybind11/include/pybind11/cast.h	/^    static Constructor make_copy_constructor(...) { return nullptr; }$/;"	f	class:type_caster_base	typeref:typename:Constructor
make_copy_constructor	src/pybind11/include/pybind11/cast.h	/^    static auto make_copy_constructor(const T *x) -> decltype(new T(*x), Constructor{}) {$/;"	f	class:type_caster_base	typeref:typename:decltype (new T (* x),Constructor{})
make_default_metaclass	src/pybind11/include/pybind11/class_support.h	/^inline PyTypeObject* make_default_metaclass() {$/;"	f	typeref:typename:PyTypeObject *
make_function_record	src/pybind11/include/pybind11/pybind11.h	/^    PYBIND11_NOINLINE detail::function_record *make_function_record() {$/;"	f	class:cpp_function	typeref:typename:PYBIND11_NOINLINE detail::function_record *
make_index_sequence	src/pybind11/include/pybind11/common.h	/^template<size_t N> using make_index_sequence = typename make_index_sequence_impl<N>::type;$/;"	t	typeref:typename:make_index_sequence_impl<N>::type
make_index_sequence_impl	src/pybind11/include/pybind11/common.h	/^template<size_t ...S> struct make_index_sequence_impl <0, S...> { typedef index_sequence<S...> t/;"	s
make_index_sequence_impl	src/pybind11/include/pybind11/common.h	/^template<size_t N, size_t ...S> struct make_index_sequence_impl : make_index_sequence_impl <N - /;"	s
make_iterator	src/pybind11/include/pybind11/pybind11.h	/^          typename Type, typename... Extra> iterator make_iterator(Type &value, Extra&&... extra/;"	f	typeref:typename:iterator
make_iterator	src/pybind11/include/pybind11/pybind11.h	/^iterator make_iterator(Iterator first, Sentinel last, Extra &&... extra) {$/;"	f	typeref:typename:iterator
make_key_iterator	src/pybind11/include/pybind11/pybind11.h	/^          typename Type, typename... Extra> iterator make_key_iterator(Type &value, Extra&&... e/;"	f	typeref:typename:iterator
make_key_iterator	src/pybind11/include/pybind11/pybind11.h	/^iterator make_key_iterator(Iterator first, Sentinel last, Extra &&... extra) {$/;"	f	typeref:typename:iterator
make_move_constructor	src/pybind11/include/pybind11/cast.h	/^    static Constructor make_move_constructor(...) { return nullptr; }$/;"	f	class:type_caster_base	typeref:typename:Constructor
make_move_constructor	src/pybind11/include/pybind11/cast.h	/^    static auto make_move_constructor(const T *x) -> decltype(new T(std::move(*const_cast<T *>(x/;"	f	class:type_caster_base	typeref:typename:decltype (new T (std::move (* const_cast<T * > (x))),Constructor{})
make_myobject1_1	src/pybind11/tests/test_smart_ptr.cpp	/^MyObject1 *make_myobject1_1() { return new MyObject1(4); }$/;"	f	typeref:typename:MyObject1 *
make_myobject1_2	src/pybind11/tests/test_smart_ptr.cpp	/^ref<MyObject1> make_myobject1_2() { return new MyObject1(5); }$/;"	f	typeref:typename:ref<MyObject1>
make_myobject2_1	src/pybind11/tests/test_smart_ptr.cpp	/^MyObject2 *make_myobject2_1() { return new MyObject2(6); }$/;"	f	typeref:typename:MyObject2 *
make_myobject2_2	src/pybind11/tests/test_smart_ptr.cpp	/^std::shared_ptr<MyObject2> make_myobject2_2() { return std::make_shared<MyObject2>(7); }$/;"	f	typeref:typename:std::shared_ptr<MyObject2>
make_myobject3_1	src/pybind11/tests/test_smart_ptr.cpp	/^MyObject3 *make_myobject3_1() { return new MyObject3(8); }$/;"	f	typeref:typename:MyObject3 *
make_myobject3_2	src/pybind11/tests/test_smart_ptr.cpp	/^std::shared_ptr<MyObject3> make_myobject3_2() { return std::make_shared<MyObject3>(9); }$/;"	f	typeref:typename:std::shared_ptr<MyObject3>
make_new_instance	src/pybind11/include/pybind11/class_support.h	/^inline PyObject *make_new_instance(PyTypeObject *type, bool allocate_value \/*= true (in cast.h)/;"	f	typeref:typename:PyObject *
make_new_python_type	src/pybind11/include/pybind11/class_support.h	/^inline PyObject* make_new_python_type(const type_record &rec) {$/;"	f	typeref:typename:PyObject *
make_object_1	src/pybind11/tests/test_smart_ptr.cpp	/^Object *make_object_1() { return new MyObject1(1); }$/;"	f	typeref:typename:Object *
make_object_2	src/pybind11/tests/test_smart_ptr.cpp	/^ref<Object> make_object_2() { return new MyObject1(2); }$/;"	f	typeref:typename:ref<Object>
make_object_base_type	src/pybind11/include/pybind11/class_support.h	/^inline PyObject *make_object_base_type(PyTypeObject *metaclass) {$/;"	f	typeref:typename:PyObject *
make_plot_dynamic	serial/python/gui.py	/^    def make_plot_dynamic(self):$/;"	m	class:PlotData
make_plot_dynamic	serial/python/gui.py	/^    def make_plot_dynamic(self, plot_name):$/;"	m	class:MainWindow
make_static_property_type	src/pybind11/include/pybind11/class_support.h	/^inline PyTypeObject *make_static_property_type() {$/;"	f	typeref:typename:PyTypeObject *
make_stride	src/pybind11/include/pybind11/eigen.h	/^    static S make_stride(EigenIndex outer, EigenIndex inner) { return S(outer, inner); }$/;"	f	struct:type_caster	typeref:typename:S
make_stride	src/pybind11/include/pybind11/eigen.h	/^    static S make_stride(EigenIndex outer, EigenIndex) { return S(outer); }$/;"	f	struct:type_caster	typeref:typename:S
make_stride	src/pybind11/include/pybind11/eigen.h	/^    static S make_stride(EigenIndex, EigenIndex inner) { return S(inner); }$/;"	f	struct:type_caster	typeref:typename:S
make_stride	src/pybind11/include/pybind11/eigen.h	/^    static S make_stride(EigenIndex, EigenIndex) { return S(); }$/;"	f	struct:type_caster	typeref:typename:S
make_tuple	src/pybind11/include/pybind11/cast.h	/^          typename... Args> tuple make_tuple(Args&&... args_) {$/;"	f
man	src/pybind11/docs/Makefile	/^man:$/;"	t
man	tools/genmsg/doc/Makefile	/^man:$/;"	t
man_pages	src/pybind11/docs/conf.py	/^man_pages = [$/;"	v
man_pages	tools/genmsg/doc/conf.py	/^man_pages = [$/;"	v
mangled_name	src/pybind11/tools/clang/cindex.py	/^    def mangled_name(self):$/;"	m	class:Cursor
map	src/pybind11/include/pybind11/eigen.h	/^    std::unique_ptr<MapType> map;$/;"	m	struct:type_caster	typeref:typename:std::unique_ptr<MapType>
map	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    std::unordered_map<std::string, std::string> map;$/;"	m	class:StringMap	typeref:typename:std::unordered_map<std::string,std::string>	file:
map_assignment	src/pybind11/include/pybind11/stl_bind.h	/^template <typename, typename, typename... Args> void map_assignment(const Args &...) { }$/;"	f	typeref:typename:void
map_assignment	src/pybind11/include/pybind11/stl_bind.h	/^void map_assignment(enable_if_t<$/;"	f	typeref:typename:void
map_assignment	src/pybind11/include/pybind11/stl_bind.h	/^void map_assignment(enable_if_t<std::is_copy_assignable<typename Map::mapped_type>::value, Class/;"	f	typeref:typename:void
map_caster	src/pybind11/include/pybind11/stl.h	/^template <typename Type, typename Key, typename Value> struct map_caster {$/;"	s
map_if_insertion_operator	src/pybind11/include/pybind11/stl_bind.h	/^template <typename Map, typename Class_> auto map_if_insertion_operator(Class_ &cl, std::string /;"	f	typeref:typename:decltype (std::declval<std::ostream &> ()<<std::declval<typename Map::key_type> ()<<std::declval<typename Map::mapped_type> (),void ())
map_if_insertion_operator	src/pybind11/include/pybind11/stl_bind.h	/^template <typename, typename, typename... Args> void map_if_insertion_operator(const Args &...) /;"	f	typeref:typename:NAMESPACE_BEGIN (detail)void
mark_parents_nonsimple	src/pybind11/include/pybind11/pybind11.h	/^    void mark_parents_nonsimple(PyTypeObject *value) {$/;"	f	class:generic_type	typeref:typename:void
master_doc	src/pybind11/docs/conf.py	/^master_doc = 'index'$/;"	v
master_doc	tools/genmsg/doc/conf.py	/^master_doc = 'index'$/;"	v
mat	src/pybind11/tests/test_eigen.cpp	/^        Eigen::MatrixXd mat = create();$/;"	m	class:__anon898d062d0102::ReturnTester	typeref:typename:Eigen::MatrixXd	file:
matches	src/pybind11/include/pybind11/common.h	/^    bool matches(PyObject *ex) const { return PyErr_GivenExceptionMatches(ex, type); }$/;"	f	class:error_already_set	typeref:typename:bool
memoryview	src/pybind11/include/pybind11/pytypes.h	/^    explicit memoryview(const buffer_info& info) {$/;"	f	class:memoryview
memoryview	src/pybind11/include/pybind11/pytypes.h	/^class memoryview : public object {$/;"	c
message	src/pybind11/tests/test_embed/test_interpreter.cpp	/^    auto message = py_widget.attr("the_message");$/;"	v	typeref:typename:auto
message	src/pybind11/tests/test_embed/test_interpreter.cpp	/^    std::string message;$/;"	m	class:Widget	typeref:typename:std::string	file:
message	src/pybind11/tests/test_exceptions.cpp	/^    std::string message = "";$/;"	m	class:MyException3	typeref:typename:std::string	file:
metaclass	src/pybind11/include/pybind11/attr.h	/^    explicit metaclass(handle value) : value(value) { }$/;"	f	struct:metaclass
metaclass	src/pybind11/include/pybind11/attr.h	/^    handle metaclass;$/;"	m	struct:type_record	typeref:typename:handle
metaclass	src/pybind11/include/pybind11/attr.h	/^    metaclass() {}$/;"	f	struct:metaclass	typeref:typename:PYBIND11_DEPRECATED ("")
metaclass	src/pybind11/include/pybind11/attr.h	/^struct metaclass {$/;"	s
method	src/pybind11/tests/test_numpy_vectorize.cpp	/^    float method(int x, float y) { return y + (float) (x + value); }$/;"	f	struct:VectorizeTestClass	typeref:typename:float	file:
method_adaptor	src/pybind11/include/pybind11/pybind11.h	/^auto method_adaptor(F &&f) -> decltype(std::forward<F>(f)) { return std::forward<F>(f); }$/;"	f	typeref:typename:decltype (std::forward<F> (f))
method_adaptor	src/pybind11/include/pybind11/pybind11.h	/^auto method_adaptor(Return (Class::*pmf)(Args...) const) -> Return (Derived::*)(Args...) const {/;"	f	typeref:typename:Return (Derived::*)(Args...)const
method_adaptor	src/pybind11/include/pybind11/pybind11.h	/^auto method_adaptor(Return (Class::*pmf)(Args...)) -> Return (Derived::*)(Args...) { return pmf;/;"	f	typeref:typename:Return (Derived::*)(Args...)
methods_and_attributes	src/pybind11/tests/test_methods_and_attributes.cpp	/^test_initializer methods_and_attributes([](py::module &m) {$/;"	v	typeref:typename:test_initializer
mgr	src/elka_comm/posix/elka_posix.cpp	/^static elka::Manager *mgr = nullptr;$/;"	v	typeref:typename:elka::Manager *	file:
mgr	src/elka_comm/qurt/snapdragon_uart.cpp	/^static uart::Manager *mgr = nullptr;$/;"	v	typeref:typename:uart::Manager *	file:
mi_static_properties	src/pybind11/tests/test_multiple_inheritance.cpp	/^test_initializer mi_static_properties([](py::module &pm) {$/;"	v	typeref:typename:test_initializer
minversion	src/pybind11/tests/pytest.ini	/^minversion = 3.0$/;"	k	section:pytest
mixed_plus_args	src/pybind11/tests/test_kwargs_and_defaults.cpp	/^py::tuple mixed_plus_args(int i, double j, py::args args) {$/;"	f	typeref:typename:py::tuple
mixed_plus_args_kwargs	src/pybind11/tests/test_kwargs_and_defaults.cpp	/^py::tuple mixed_plus_args_kwargs(int i, double j, py::args args, py::kwargs kwargs) {$/;"	f	typeref:typename:py::tuple
mixed_plus_kwargs	src/pybind11/tests/test_kwargs_and_defaults.cpp	/^py::tuple mixed_plus_kwargs(int i, double j, py::kwargs kwargs) {$/;"	f	typeref:typename:py::tuple
mkarray_via_buffer	src/pybind11/tests/test_numpy_dtypes.cpp	/^py::array mkarray_via_buffer(size_t n) {$/;"	f	typeref:typename:py::array
mlines	serial/python/parse.py	/^import matplotlib.lines as mlines $/;"	I
module	src/pybind11/include/pybind11/pybind11.h	/^    explicit module(const char *name, const char *doc = nullptr) {$/;"	f	class:module	typeref:typename:PYBIND11_OBJECT_DEFAULT (module,object,PyModule_Check)
module	src/pybind11/include/pybind11/pybind11.h	/^class module : public object {$/;"	c
module	src/pybind11/tests/test_embed/test_interpreter.cpp	/^    auto module = py::module::import("test_interpreter");$/;"	v	typeref:typename:auto
modules	src/pybind11/tests/test_modules.cpp	/^test_initializer modules([](py::module &m) {$/;"	v	typeref:typename:test_initializer
modules__elka_comm__common	build_elka_data_collection/Makefile	/^modules__elka_comm__common: cmake_check_build_system$/;"	t
modules__elka_comm__common	build_elka_data_collection/src/elka_comm/common/Makefile	/^modules__elka_comm__common: src\/elka_comm\/common\/CMakeFiles\/modules__elka_comm__common.dir\//;"	t
modules__elka_comm__common/fast	build_elka_data_collection/Makefile	/^modules__elka_comm__common\/fast:$/;"	t
modules__elka_comm__common/fast	build_elka_data_collection/src/elka_comm/common/Makefile	/^modules__elka_comm__common\/fast:$/;"	t
modules__elka_comm__gnd_station	build_elka_data_collection/Makefile	/^modules__elka_comm__gnd_station: cmake_check_build_system$/;"	t
modules__elka_comm__gnd_station	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^modules__elka_comm__gnd_station: src\/elka_comm\/gnd_station\/CMakeFiles\/modules__elka_comm__gn/;"	t
modules__elka_comm__gnd_station/fast	build_elka_data_collection/Makefile	/^modules__elka_comm__gnd_station\/fast:$/;"	t
modules__elka_comm__gnd_station/fast	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^modules__elka_comm__gnd_station\/fast:$/;"	t
movable_cast_op_type	src/pybind11/include/pybind11/cast.h	/^using movable_cast_op_type =$/;"	t
move	src/pybind11/include/pybind11/common.h	/^    move,$/;"	e	enum:uint8_t
move_always	src/pybind11/include/pybind11/cast.h	/^template <typename T, typename SFINAE = void> struct move_always : std::false_type {};$/;"	s
move_always	src/pybind11/include/pybind11/cast.h	/^template <typename T> struct move_always<T, enable_if_t<all_of<$/;"	s
move_assignments	src/pybind11/tests/constructor_stats.h	/^    int move_assignments = 0;$/;"	m	class:ConstructorStats	typeref:typename:int
move_constructions	src/pybind11/tests/constructor_stats.h	/^    int move_constructions = 0;$/;"	m	class:ConstructorStats	typeref:typename:int
move_created	src/pybind11/tests/constructor_stats.h	/^    void move_created(void *inst) {$/;"	f	class:ConstructorStats	typeref:typename:void
move_if_unreferenced	src/pybind11/include/pybind11/cast.h	/^template <typename T, typename SFINAE = void> struct move_if_unreferenced : std::false_type {};$/;"	s
move_if_unreferenced	src/pybind11/include/pybind11/cast.h	/^template <typename T> struct move_if_unreferenced<T, enable_if_t<all_of<$/;"	s
move_is_plain_type	src/pybind11/include/pybind11/cast.h	/^template <typename T> using move_is_plain_type = satisfies_none_of<T,$/;"	t	typeref:typename:satisfies_none_of<T,std::is_void,std::is_pointer,std::is_reference,std::is_const>
move_list	src/pybind11/tests/test_stl.cpp	/^        std::list<Value> move_list() const { return {{0}, {1}, {2}}; }$/;"	f	struct:TEST_SUBMODULE::MoveOutContainer	typeref:typename:std::list<Value>	file:
move_never	src/pybind11/include/pybind11/cast.h	/^template <typename T> using move_never = none_of<move_always<T>, move_if_unreferenced<T>>;$/;"	t	typeref:typename:none_of<move_always<T>,move_if_unreferenced<T>>
move_only_holder_caster	src/pybind11/include/pybind11/cast.h	/^struct move_only_holder_caster {$/;"	s
msg	src/pybind11/tests/conftest.py	/^def msg():$/;"	f
msg_context	tools/genmsg/scripts/genmsg_check_deps.py	/^msg_context = MsgContext.create_default()$/;"	v
msg_file	tools/genmsg/scripts/genmsg_check_deps.py	/^msg_file = sys.argv[2]$/;"	v
msg_gen	build_elka_data_collection/Makefile	/^msg_gen: cmake_check_build_system$/;"	t
msg_gen/fast	build_elka_data_collection/Makefile	/^msg_gen\/fast:$/;"	t
msg_id	build_elka_data_collection/inc/uORB/topics/elka_msg.h	/^	uint64_t msg_id;$/;"	m	struct:elka_msg_s	typeref:typename:uint64_t
msg_id	build_elka_data_collection/inc/uORB/topics/elka_msg_ack.h	/^	uint64_t msg_id;$/;"	m	struct:elka_msg_ack_s	typeref:typename:uint64_t
msg_id	build_elka_data_collection/topics_temporary_header/elka_msg.h	/^	uint64_t msg_id;$/;"	m	struct:elka_msg_s	typeref:typename:uint64_t
msg_id	build_elka_data_collection/topics_temporary_header/elka_msg_ack.h	/^	uint64_t msg_id;$/;"	m	struct:elka_msg_ack_s	typeref:typename:uint64_t
msg_id_t	src/elka_comm/common/elka.h	/^typedef uint64_t msg_id_t;$/;"	t	typeref:typename:uint64_t
msg_id_t	src/elka_comm/common/elka_comm.cpp	/^typedef uint64_t msg_id_t;$/;"	t	typeref:typename:uint64_t	file:
msg_num	build_elka_data_collection/inc/uORB/topics/elka_msg.h	/^	uint16_t msg_num;$/;"	m	struct:elka_msg_s	typeref:typename:uint16_t
msg_num	build_elka_data_collection/inc/uORB/topics/elka_msg_ack.h	/^	uint16_t msg_num;$/;"	m	struct:elka_msg_ack_s	typeref:typename:uint16_t
msg_num	build_elka_data_collection/topics_temporary_header/elka_msg.h	/^	uint16_t msg_num;$/;"	m	struct:elka_msg_s	typeref:typename:uint16_t
msg_num	build_elka_data_collection/topics_temporary_header/elka_msg_ack.h	/^	uint16_t msg_num;$/;"	m	struct:elka_msg_ack_s	typeref:typename:uint16_t
msg_priority	src/elka_comm/common/elka_comm.cpp	/^uint8_t elka::SerialBuffer::Compare::msg_priority($/;"	f	class:elka::SerialBuffer::Compare	typeref:typename:uint8_t
msg_template_map	tools/gencpp/scripts/gen_cpp.py	/^msg_template_map = { 'msg.h.template':'@NAME@.h' }$/;"	v
msg_threshold	src/elka_comm/common/elka.cpp	/^const hrt_abstime msg_threshold = 500000;$/;"	v	typeref:typename:const hrt_abstime
msg_type_to_cpp	tools/gencpp/src/gencpp/__init__.py	/^def msg_type_to_cpp(type):$/;"	f
msgtype_size_map	tools/px_generate_uorb_topic_helper.py	/^msgtype_size_map = {$/;"	v
multi_array_iterator	src/pybind11/include/pybind11/numpy.h	/^    multi_array_iterator(const std::array<buffer_info, N> &buffers,$/;"	f	class:multi_array_iterator
multi_array_iterator	src/pybind11/include/pybind11/numpy.h	/^template <size_t N> class multi_array_iterator {$/;"	c
multiple_inheritance	src/pybind11/include/pybind11/attr.h	/^    bool multiple_inheritance : 1;$/;"	m	struct:type_record	typeref:typename:bool:1
multiple_inheritance	src/pybind11/include/pybind11/attr.h	/^struct multiple_inheritance { };$/;"	s
multiple_inheritance	src/pybind11/tests/test_multiple_inheritance.cpp	/^test_initializer multiple_inheritance([](py::module &m) {$/;"	v	typeref:typename:test_initializer
multiple_inheritance_casting	src/pybind11/tests/test_multiple_inheritance.cpp	/^test_initializer multiple_inheritance_casting([](py::module &m) {$/;"	v	typeref:typename:test_initializer
multiple_inheritance_nonexplicit	src/pybind11/tests/test_multiple_inheritance.cpp	/^test_initializer multiple_inheritance_nonexplicit([](py::module &m) {$/;"	v	typeref:typename:test_initializer
multiple_values_error	src/pybind11/include/pybind11/cast.h	/^    [[noreturn]] static void multiple_values_error() {$/;"	f	class:unpacking_collector	typeref:typename:[[noreturn]]void
multiple_values_error	src/pybind11/include/pybind11/cast.h	/^    [[noreturn]] static void multiple_values_error(std::string name) {$/;"	f	class:unpacking_collector	typeref:typename:[[noreturn]]void
mutable_at	src/pybind11/include/pybind11/numpy.h	/^    template<typename... Ix> T& mutable_at(Ix... index) {$/;"	f	class:array_t	typeref:typename:T &
mutable_data	src/pybind11/include/pybind11/numpy.h	/^    template <typename... Ix> T *mutable_data(Ix... ix) { return &operator()(ssize_t(ix)...); }$/;"	f	class:unchecked_mutable_reference	typeref:typename:T *
mutable_data	src/pybind11/include/pybind11/numpy.h	/^    template<typename... Ix> T* mutable_data(Ix... index) {$/;"	f	class:array_t	typeref:typename:T *
mutable_data	src/pybind11/include/pybind11/numpy.h	/^    template<typename... Ix> void* mutable_data(Ix... index) {$/;"	f	class:array	typeref:typename:void *
mutable_unchecked	src/pybind11/include/pybind11/numpy.h	/^    template <ssize_t Dims = -1> detail::unchecked_mutable_reference<T, Dims> mutable_unchecked(/;"	f	class:array_t	typeref:typename:detail::unchecked_mutable_reference<T,Dims>
mutable_unchecked	src/pybind11/include/pybind11/numpy.h	/^    template <typename T, ssize_t Dims = -1> detail::unchecked_mutable_reference<T, Dims> mutabl/;"	f	class:array	typeref:typename:detail::unchecked_mutable_reference<T,Dims>
mutate_at_t	src/pybind11/tests/test_numpy_array.cpp	/^template<typename... Ix> arr_t& mutate_at_t(arr_t& a, Ix... idx) { a.mutable_at(idx...)++; retur/;"	f	typeref:typename:arr_t &
mutate_data	src/pybind11/tests/test_numpy_array.cpp	/^arr& mutate_data(arr& a) {$/;"	f	typeref:typename:arr &
mutate_data	src/pybind11/tests/test_numpy_array.cpp	/^template<typename... Ix> arr& mutate_data(arr& a, Ix... index) {$/;"	f	typeref:typename:arr &
mutate_data_t	src/pybind11/tests/test_numpy_array.cpp	/^arr_t& mutate_data_t(arr_t& a) {$/;"	f	typeref:typename:arr_t &
mutate_data_t	src/pybind11/tests/test_numpy_array.cpp	/^template<typename... Ix> arr_t& mutate_data_t(arr_t& a, Ix... index) {$/;"	f	typeref:typename:arr_t &
my_func	src/pybind11/tests/test_numpy_vectorize.cpp	/^double my_func(int x, float y, double z) {$/;"	f	typeref:typename:double
my_func3	src/pybind11/tests/test_numpy_vectorize.cpp	/^std::complex<double> my_func3(std::complex<double> c) {$/;"	f	typeref:typename:std::complex<double>
n1	src/pybind11/docs/benchmark.py	/^        n1 = dt.datetime.now()$/;"	v
n2	src/pybind11/docs/benchmark.py	/^        n2 = dt.datetime.now()$/;"	v
name	src/pybind11/include/pybind11/attr.h	/^    char *name = nullptr; \/* why no C++ strings? They generate heavier code.. *\/$/;"	m	struct:function_record	typeref:typename:char *
name	src/pybind11/include/pybind11/attr.h	/^    const char *name = nullptr;$/;"	m	struct:type_record	typeref:typename:const char *
name	src/pybind11/include/pybind11/attr.h	/^    const char *name;  \/\/\/< Argument name$/;"	m	struct:argument_record	typeref:typename:const char *
name	src/pybind11/include/pybind11/attr.h	/^struct name { const char *value; name(const char *value) : value(value) { } };$/;"	f	struct:name
name	src/pybind11/include/pybind11/attr.h	/^struct name { const char *value; name(const char *value) : value(value) { } };$/;"	s
name	src/pybind11/include/pybind11/cast.h	/^    const char *name; \/\/\/< If non-null, this is a named kwargs argument$/;"	m	struct:arg	typeref:typename:const char *
name	src/pybind11/include/pybind11/cast.h	/^    static PYBIND11_DESCR name() { return caster_t::name(); }$/;"	f	class:type_caster	typeref:typename:PYBIND11_DESCR
name	src/pybind11/include/pybind11/cast.h	/^    static PYBIND11_DESCR name() { return type_caster_base<type>::name(); }$/;"	f	struct:move_only_holder_caster	typeref:typename:PYBIND11_DESCR
name	src/pybind11/include/pybind11/cast.h	/^    static PYBIND11_DESCR name() { return type_descr(_("capsule")); }$/;"	f	class:type_caster	typeref:typename:PYBIND11_DESCR
name	src/pybind11/include/pybind11/cast.h	/^    static PYBIND11_DESCR name() { return type_descr(_(PYBIND11_STRING_NAME)); }$/;"	f	struct:type_caster	typeref:typename:PYBIND11_DESCR
name	src/pybind11/include/pybind11/cast.h	/^    static PYBIND11_DESCR name() { return type_descr(_<type>()); }$/;"	f	class:type_caster_base	typeref:typename:PYBIND11_DESCR
name	src/pybind11/include/pybind11/cast.h	/^    static PYBIND11_DESCR name() {$/;"	f	class:tuple_caster	typeref:typename:PYBIND11_DESCR
name	src/pybind11/include/pybind11/cast.h	/^template <> struct handle_type_name<args> { static PYBIND11_DESCR name() { return _("*args"); } /;"	f	struct:handle_type_name	typeref:typename:PYBIND11_DESCR
name	src/pybind11/include/pybind11/cast.h	/^template <> struct handle_type_name<bytes> { static PYBIND11_DESCR name() { return _(PYBIND11_BY/;"	f	struct:handle_type_name	typeref:typename:PYBIND11_DESCR
name	src/pybind11/include/pybind11/cast.h	/^template <> struct handle_type_name<kwargs> { static PYBIND11_DESCR name() { return _("**kwargs"/;"	f	struct:handle_type_name	typeref:typename:PYBIND11_DESCR
name	src/pybind11/include/pybind11/cast.h	/^template <typename T> struct handle_type_name { static PYBIND11_DESCR name() { return _<T>(); } /;"	f	struct:handle_type_name	typeref:typename:PYBIND11_DESCR
name	src/pybind11/include/pybind11/eigen.h	/^    static PYBIND11_DESCR name() { return props::descriptor(); }$/;"	f	struct:eigen_map_caster	typeref:typename:PYBIND11_DESCR
name	src/pybind11/include/pybind11/eigen.h	/^    static PYBIND11_DESCR name() { return props::descriptor(); }$/;"	f	struct:type_caster	typeref:typename:PYBIND11_DESCR
name	src/pybind11/include/pybind11/numpy.h	/^        struct field_descr { PYBIND11_STR_TYPE name; object format; pybind11::int_ offset; };$/;"	m	struct:dtype::strip_padding::field_descr	typeref:typename:PYBIND11_STR_TYPE
name	src/pybind11/include/pybind11/numpy.h	/^    const char *name;$/;"	m	struct:field_descriptor	typeref:typename:const char *
name	src/pybind11/include/pybind11/numpy.h	/^    static PYBIND11_DESCR name() { return _("(") + array_info<T>::extents() + _(")") + base_desc/;"	f	struct:npy_format_descriptor	typeref:typename:PYBIND11_DESCR
name	src/pybind11/include/pybind11/numpy.h	/^    static PYBIND11_DESCR name() { return base_descr::name(); }$/;"	f	struct:npy_format_descriptor	typeref:typename:PYBIND11_DESCR
name	src/pybind11/include/pybind11/numpy.h	/^    static PYBIND11_DESCR name() { return make_caster<T>::name(); }$/;"	f	struct:npy_format_descriptor	typeref:typename:PYBIND11_DESCR
name	src/pybind11/include/pybind11/numpy.h	/^    static PYBIND11_DESCR name() {$/;"	f	struct:handle_type_name	typeref:typename:PYBIND11_DESCR
name	src/pybind11/include/pybind11/numpy.h	/^    static PYBIND11_DESCR name() {$/;"	f	struct:npy_format_descriptor	typeref:typename:PYBIND11_DESCR
name	src/pybind11/include/pybind11/pybind11.h	/^    object name() const { return attr("__name__"); }$/;"	f	class:cpp_function	typeref:typename:object
name	src/pybind11/include/pybind11/pytypes.h	/^        auto name = this->name();$/;"	m	class:capsule	typeref:typename:auto
name	src/pybind11/include/pybind11/pytypes.h	/^    const char *name() const { return PyCapsule_GetName(m_ptr); }$/;"	f	class:capsule	typeref:typename:const char *
name	src/pybind11/tests/test_class.cpp	/^        std::string name() const { return m_name; }$/;"	f	class:TEST_SUBMODULE::Pet	typeref:typename:std::string	file:
name	src/pybind11/tests/test_copy_move.cpp	/^    static PYBIND11_DESCR name() { return _("CopyOnlyInt"); }$/;"	f	struct:pybind11::detail::type_caster	typeref:typename:PYBIND11_DESCR	file:
name	src/pybind11/tools/clang/cindex.py	/^    def name(self):$/;"	m	class:BaseEnumeration
name	src/pybind11/tools/clang/cindex.py	/^    def name(self):$/;"	m	class:File
name	src/pybind11/tools/clang/cindex.py	/^    def name(self):$/;"	m	class:StorageClass
name	src/pybind11/tools/mkdoc.py	/^            name = name + "_%i" % name_ctr$/;"	v
name_ctr	src/pybind11/tools/mkdoc.py	/^            name_ctr = 1$/;"	v
name_ctr	src/pybind11/tools/mkdoc.py	/^    name_ctr = 1$/;"	v
name_prev	src/pybind11/tools/mkdoc.py	/^            name_prev = name$/;"	v
name_prev	src/pybind11/tools/mkdoc.py	/^    name_prev = None$/;"	v
nameless_argument_error	src/pybind11/include/pybind11/cast.h	/^    [[noreturn]] static void nameless_argument_error() {$/;"	f	class:unpacking_collector	typeref:typename:[[noreturn]]void
nameless_argument_error	src/pybind11/include/pybind11/cast.h	/^    [[noreturn]] static void nameless_argument_error(std::string type) {$/;"	f	class:unpacking_collector	typeref:typename:[[noreturn]]void
names	src/pybind11/include/pybind11/numpy.h	/^    PyObject *names;$/;"	m	struct:PyArrayDescr_Proxy	typeref:typename:PyObject *
nargs	src/pybind11/docs/benchmark.py	/^nargs = 4  # Arguments per function$/;"	v
nargs	src/pybind11/include/pybind11/attr.h	/^    std::uint16_t nargs;$/;"	m	struct:function_record	typeref:typename:std::uint16_t
navigation_state_t	inc/uORB/uORB.h	/^typedef uint8_t navigation_state_t;$/;"	t	typeref:typename:uint8_t
nbytes	src/pybind11/include/pybind11/numpy.h	/^    ssize_t nbytes() const {$/;"	f	class:array	typeref:typename:ssize_t
nbytes	src/pybind11/include/pybind11/numpy.h	/^    ssize_t nbytes() const {$/;"	f	class:unchecked_reference	typeref:typename:ssize_t
nclasses	src/pybind11/docs/benchmark.py	/^        nclasses = 2 ** i$/;"	v
nd	src/pybind11/include/pybind11/numpy.h	/^    int nd;$/;"	m	struct:PyArray_Proxy	typeref:typename:int
ndim	src/pybind11/include/pybind11/buffer_info.h	/^    ssize_t ndim = 0;             \/\/ Number of dimensions$/;"	m	struct:buffer_info	typeref:typename:ssize_t
ndim	src/pybind11/include/pybind11/numpy.h	/^    ssize_t ndim() const { return dims_; }$/;"	f	class:unchecked_reference	typeref:typename:ssize_t
ndim	src/pybind11/include/pybind11/numpy.h	/^    ssize_t ndim() const {$/;"	f	class:array	typeref:typename:ssize_t
need_writeable	src/pybind11/include/pybind11/eigen.h	/^    static constexpr bool need_writeable = is_eigen_mutable_map<Type>::value;$/;"	m	struct:type_caster	typeref:typename:constexpr bool
negation	src/pybind11/include/pybind11/common.h	/^template <typename T> struct negation : bool_constant<!T::value> { };$/;"	s
negativestrides	src/pybind11/include/pybind11/eigen.h	/^    bool negativestrides = false;   \/\/ If true, do not use stride!$/;"	m	struct:EigenConformable	typeref:typename:bool
new_instance	src/pybind11/tests/test_class.cpp	/^        static NoConstructor *new_instance() {$/;"	f	struct:TEST_SUBMODULE::NoConstructor	typeref:typename:NoConstructor *	file:
next	src/pybind11/include/pybind11/attr.h	/^        typename call_guard<Ts...>::type next{};$/;"	m	struct:call_guard::type	typeref:typename:call_guard<Ts...>::type
next	src/pybind11/include/pybind11/attr.h	/^    function_record *next = nullptr;$/;"	m	struct:function_record	typeref:typename:function_record *
nfns	src/pybind11/docs/benchmark.py	/^nfns = 4  # Functions per class$/;"	v
noconvert	src/pybind11/include/pybind11/cast.h	/^    arg &noconvert(bool flag = true) { flag_noconvert = flag; return *this; }$/;"	f	struct:arg	typeref:typename:arg &
noconvert	src/pybind11/include/pybind11/cast.h	/^    arg_v &noconvert(bool flag = true) { arg::noconvert(flag); return *this; }$/;"	f	struct:arg_v	typeref:typename:arg_v &
nodelete	src/pybind11/include/pybind11/common.h	/^struct nodelete { template <typename T> void operator()(T*) { } };$/;"	s
non_trivial	src/pybind11/include/pybind11/numpy.h	/^enum class broadcast_trivial { non_trivial, c_trivial, f_trivial };$/;"	e	enum:broadcast_trivial
none	src/pybind11/include/pybind11/attr.h	/^    bool none : 1;     \/\/\/< True if None is allowed when loading$/;"	m	struct:argument_record	typeref:typename:bool:1
none	src/pybind11/include/pybind11/cast.h	/^    arg &none(bool flag = true) { flag_none = flag; return *this; }$/;"	f	struct:arg	typeref:typename:arg &
none	src/pybind11/include/pybind11/cast.h	/^    arg_v &none(bool flag = true) { arg::none(flag); return *this; }$/;"	f	struct:arg_v	typeref:typename:arg_v &
none	src/pybind11/include/pybind11/cast.h	/^    bool none = false;$/;"	m	struct:type_caster	typeref:typename:bool
none	src/pybind11/include/pybind11/pytypes.h	/^    none() : object(Py_None, borrowed_t{}) { }$/;"	f	class:none	typeref:typename:PYBIND11_OBJECT (none,object,detail::PyNone_Check)
none	src/pybind11/include/pybind11/pytypes.h	/^class none : public object {$/;"	c
none1	src/pybind11/tests/test_methods_and_attributes.cpp	/^int none1(const NoneTester &obj) { return obj.answer; }$/;"	f	typeref:typename:int
none2	src/pybind11/tests/test_methods_and_attributes.cpp	/^int none2(NoneTester *obj) { return obj ? obj->answer : -1; }$/;"	f	typeref:typename:int
none3	src/pybind11/tests/test_methods_and_attributes.cpp	/^int none3(std::shared_ptr<NoneTester> &obj) { return obj ? obj->answer : -1; }$/;"	f	typeref:typename:int
none4	src/pybind11/tests/test_methods_and_attributes.cpp	/^int none4(std::shared_ptr<NoneTester> *obj) { return obj && *obj ? (*obj)->answer : -1; }$/;"	f	typeref:typename:int
none5	src/pybind11/tests/test_methods_and_attributes.cpp	/^int none5(std::shared_ptr<NoneTester> obj) { return obj ? obj->answer : -1; }$/;"	f	typeref:typename:int
none_of	src/pybind11/include/pybind11/common.h	/^template <class... Ts> using none_of = negation<any_of<Ts...>>;$/;"	t	typeref:typename:negation<any_of<Ts...>>
nonsimple	src/pybind11/include/pybind11/common.h	/^        } nonsimple;$/;"	m	union:instance::__anon7b367e7c010a	typeref:struct:instance::__anon7b367e7c010a::__anon7b367e7c0208
norecursedirs	src/pybind11/tests/pytest.ini	/^norecursedirs = test_cmake_build test_embed$/;"	k	section:pytest
normalize_package_context	tools/genmsg/src/genmsg/names.py	/^def normalize_package_context(package_context):$/;"	f
np	serial/python/gui.py	/^import numpy as np$/;"	I
np	serial/python/gui_start.py	/^import numpy as np$/;"	I
np	serial/python/parse.py	/^import numpy as np$/;"	I
np	serial/python/parse_vispy.py	/^import numpy as np$/;"	I
np	src/pybind11/tests/conftest.py	/^        import numpy as np$/;"	I	function:pytest_namespace	file:
np	src/pybind11/tests/test_buffers.py	/^    import numpy as np$/;"	I
np	src/pybind11/tests/test_eigen.py	/^    import numpy as np$/;"	I
np	src/pybind11/tests/test_numpy_array.py	/^    import numpy as np$/;"	I
np	src/pybind11/tests/test_numpy_dtypes.py	/^    import numpy as np$/;"	I
np	src/pybind11/tests/test_numpy_vectorize.py	/^    import numpy as np$/;"	I
np	src/pybind11/tests/test_stl_binders.py	/^    import numpy as np$/;"	I
npy_api	src/pybind11/include/pybind11/numpy.h	/^struct npy_api {$/;"	s
npy_format_descriptor	src/pybind11/include/pybind11/numpy.h	/^    template<typename, typename> friend struct detail::npy_format_descriptor;$/;"	m	class:array::detail	typeref:typename:struct
npy_format_descriptor	src/pybind11/include/pybind11/numpy.h	/^template <size_t N> struct npy_format_descriptor<char[N]> { PYBIND11_DECL_CHAR_FMT };$/;"	s
npy_format_descriptor	src/pybind11/include/pybind11/numpy.h	/^template <size_t N> struct npy_format_descriptor<std::array<char, N>> { PYBIND11_DECL_CHAR_FMT }/;"	s
npy_format_descriptor	src/pybind11/include/pybind11/numpy.h	/^template <typename T, typename SFINAE> struct npy_format_descriptor {$/;"	s
npy_format_descriptor	src/pybind11/include/pybind11/numpy.h	/^template <typename T> struct npy_format_descriptor<T, enable_if_t<satisfies_any_of<T, std::is_ar/;"	s
npy_format_descriptor	src/pybind11/include/pybind11/numpy.h	/^template<typename T> struct npy_format_descriptor<T, enable_if_t<array_info<T>::is_array>> {$/;"	s
npy_format_descriptor	src/pybind11/include/pybind11/numpy.h	/^template<typename T> struct npy_format_descriptor<T, enable_if_t<std::is_enum<T>::value>> {$/;"	s
num_chunks	src/pybind11/tools/clang/cindex.py	/^    def num_chunks(self):$/;"	m	class:CompletionString
num_elka_devs	src/elka_comm/posix/elka_posix.cpp	/^static int num_elka_devs = 0;$/;"	v	typeref:typename:int	file:
num_retries	build_elka_data_collection/inc/uORB/topics/elka_msg.h	/^	uint8_t num_retries;$/;"	m	struct:elka_msg_s	typeref:typename:uint8_t
num_retries	build_elka_data_collection/inc/uORB/topics/elka_msg_ack.h	/^	uint8_t num_retries;$/;"	m	struct:elka_msg_ack_s	typeref:typename:uint8_t
num_retries	build_elka_data_collection/topics_temporary_header/elka_msg.h	/^	uint8_t num_retries;$/;"	m	struct:elka_msg_s	typeref:typename:uint8_t
num_retries	build_elka_data_collection/topics_temporary_header/elka_msg_ack.h	/^	uint8_t num_retries;$/;"	m	struct:elka_msg_ack_s	typeref:typename:uint8_t
num_threads	src/pybind11/tests/test_embed/test_interpreter.cpp	/^    constexpr auto num_threads = 10;$/;"	v	typeref:typename:constexpr auto
numpy_array	src/pybind11/tests/test_numpy_array.cpp	/^test_initializer numpy_array([](py::module &m) {$/;"	v	typeref:typename:test_initializer
numpy_dtypes	src/pybind11/tests/test_numpy_dtypes.cpp	/^test_initializer numpy_dtypes([](py::module &m) {$/;"	v	typeref:typename:test_initializer
numpy_internals	src/pybind11/include/pybind11/numpy.h	/^struct numpy_internals {$/;"	s
numpy_type_info	src/pybind11/include/pybind11/numpy.h	/^struct numpy_type_info {$/;"	s
numpy_vectorize	src/pybind11/tests/test_numpy_vectorize.cpp	/^test_initializer numpy_vectorize([](py::module &m) {$/;"	v	typeref:typename:test_initializer
o_fields	inc/uORB/uORB.h	/^	const char *o_fields;		\/**< semicolon separated list of fields (with type) *\/$/;"	m	struct:orb_metadata	typeref:typename:const char *
o_name	inc/uORB/uORB.h	/^	const char *o_name;		\/**< unique object name *\/$/;"	m	struct:orb_metadata	typeref:typename:const char *
o_size	inc/uORB/uORB.h	/^	const size_t o_size;		\/**< object size *\/$/;"	m	struct:orb_metadata	typeref:typename:const size_t
o_size_no_padding	inc/uORB/uORB.h	/^	const size_t o_size_no_padding;	\/**< object size w\/o padding at the end (for logger) *\/$/;"	m	struct:orb_metadata	typeref:typename:const size_t
obj	src/pybind11/include/pybind11/pytypes.h	/^    handle obj;$/;"	m	class:accessor	typeref:typename:handle
obj	src/pybind11/include/pybind11/pytypes.h	/^    handle obj;$/;"	m	class:dict_readonly	typeref:typename:handle
obj	src/pybind11/include/pybind11/pytypes.h	/^    handle obj;$/;"	m	class:sequence_slow_readwrite	typeref:typename:handle
obj_attr	src/pybind11/include/pybind11/pytypes.h	/^struct obj_attr {$/;"	s
obj_attr_accessor	src/pybind11/include/pybind11/pytypes.h	/^using obj_attr_accessor = accessor<accessor_policies::obj_attr>;$/;"	t	typeref:typename:accessor<accessor_policies::obj_attr>
objc_type_encoding	src/pybind11/tools/clang/cindex.py	/^    def objc_type_encoding(self):$/;"	m	class:Cursor
object	src/pybind11/include/pybind11/pytypes.h	/^    object(const object &o) : handle(o) { inc_ref(); }$/;"	f	class:object
object	src/pybind11/include/pybind11/pytypes.h	/^    object(handle h, bool is_borrowed) : handle(h) { if (is_borrowed) inc_ref(); }$/;"	f	class:object	typeref:typename:PYBIND11_DEPRECATED ("")
object	src/pybind11/include/pybind11/pytypes.h	/^    object(handle h, borrowed_t) : handle(h) { inc_ref(); }$/;"	f	class:object
object	src/pybind11/include/pybind11/pytypes.h	/^    object(handle h, stolen_t) : handle(h) { }$/;"	f	class:object
object	src/pybind11/include/pybind11/pytypes.h	/^    object(object &&other) noexcept { m_ptr = other.m_ptr; other.m_ptr = nullptr; }$/;"	f	class:object
object	src/pybind11/include/pybind11/pytypes.h	/^class object : public handle {$/;"	c
object_api	src/pybind11/include/pybind11/pytypes.h	/^class object_api : public pyobject_tag {$/;"	c
object_or_cast	src/pybind11/include/pybind11/cast.h	/^object object_or_cast(T &&o) { return pybind11::cast(std::forward<T>(o)); }$/;"	f	typeref:typename:NAMESPACE_BEGIN (detail)> object
object_or_cast	src/pybind11/include/pybind11/pytypes.h	/^auto object_or_cast(T &&o) -> decltype(std::forward<T>(o)) { return std::forward<T>(o); }$/;"	f	typeref:typename:decltype (std::forward<T> (o))
object_or_cast	src/pybind11/include/pybind11/pytypes.h	/^inline handle object_or_cast(PyObject *ptr) { return ptr; }$/;"	f	typeref:typename:handle
obval	src/pybind11/include/pybind11/numpy.h	/^    char *obval;$/;"	m	struct:PyVoidScalarObject_Proxy	typeref:typename:PyObject_VAR_HEAD char *
of	src/pybind11/include/pybind11/numpy.h	/^    template <typename T> static dtype of() {$/;"	f	class:dtype	typeref:typename:dtype
offset	src/pybind11/include/pybind11/numpy.h	/^        struct field_descr { PYBIND11_STR_TYPE name; object format; pybind11::int_ offset; };$/;"	m	struct:dtype::strip_padding::field_descr	typeref:typename:pybind11::int_
offset	src/pybind11/include/pybind11/numpy.h	/^    ssize_t offset;$/;"	m	struct:field_descriptor	typeref:typename:ssize_t
offset	src/pybind11/tools/clang/cindex.py	/^    def offset(self):$/;"	m	class:SourceLocation
offset_at	src/pybind11/include/pybind11/numpy.h	/^    ssize_t offset_at() const { return 0; }$/;"	f	class:array	typeref:typename:ssize_t
offset_at	src/pybind11/include/pybind11/numpy.h	/^    template<typename... Ix> ssize_t offset_at(Ix... index) const {$/;"	f	class:array	typeref:typename:ssize_t
offset_at	src/pybind11/tests/test_numpy_array.cpp	/^template<typename... Ix> ssize_t offset_at(const arr& a, Ix... idx) { return a.offset_at(idx...)/;"	f	typeref:typename:ssize_t
offset_at_t	src/pybind11/tests/test_numpy_array.cpp	/^template<typename... Ix> ssize_t offset_at_t(const arr_t& a, Ix... idx) { return a.offset_at(idx/;"	f	typeref:typename:ssize_t
oldsize	src/pybind11/tools/libsize.py	/^        oldsize = int(sf.readline())$/;"	v
oldtio	src/elka_comm/qurt/basic_uart.cpp	/^struct termios oldtio;$/;"	v	typeref:struct:termios
on_rtd	src/pybind11/docs/conf.py	/^on_rtd = os.environ.get('READTHEDOCS', None) == 'True'$/;"	v
one_to_n	src/pybind11/tests/test_stl_binders.cpp	/^template <class Container> Container *one_to_n(int n) {$/;"	f	typeref:typename:Container *
op	src/pybind11/include/pybind11/operators.h	/^        using op = op_impl<id, ot, Base, L_type, R_type>;$/;"	t	function:op_::execute	typeref:typename:op_impl<id,ot,Base,L_type,R_type>
op	src/pybind11/include/pybind11/operators.h	/^        using op = op_impl<id, ot, Base, L_type, R_type>;$/;"	t	function:op_::execute_cast	typeref:typename:op_impl<id,ot,Base,L_type,R_type>
op_	src/pybind11/include/pybind11/operators.h	/^template <op_id id, op_type ot, typename L, typename R> struct op_ {$/;"	s
op_abs	src/pybind11/include/pybind11/operators.h	/^    op_rshift, op_and, op_xor, op_or, op_neg, op_pos, op_abs, op_invert,$/;"	e	enum:op_id
op_add	src/pybind11/include/pybind11/operators.h	/^    op_add, op_sub, op_mul, op_div, op_mod, op_divmod, op_pow, op_lshift,$/;"	e	enum:op_id
op_and	src/pybind11/include/pybind11/operators.h	/^    op_rshift, op_and, op_xor, op_or, op_neg, op_pos, op_abs, op_invert,$/;"	e	enum:op_id
op_bool	src/pybind11/include/pybind11/operators.h	/^    op_irshift, op_iand, op_ixor, op_ior, op_complex, op_bool, op_nonzero,$/;"	e	enum:op_id
op_cmp	src/pybind11/include/pybind11/operators.h	/^    op_int, op_long, op_float, op_str, op_cmp, op_gt, op_ge, op_lt, op_le,$/;"	e	enum:op_id
op_complex	src/pybind11/include/pybind11/operators.h	/^    op_irshift, op_iand, op_ixor, op_ior, op_complex, op_bool, op_nonzero,$/;"	e	enum:op_id
op_div	src/pybind11/include/pybind11/operators.h	/^    op_add, op_sub, op_mul, op_div, op_mod, op_divmod, op_pow, op_lshift,$/;"	e	enum:op_id
op_divmod	src/pybind11/include/pybind11/operators.h	/^    op_add, op_sub, op_mul, op_div, op_mod, op_divmod, op_pow, op_lshift,$/;"	e	enum:op_id
op_eq	src/pybind11/include/pybind11/operators.h	/^    op_eq, op_ne, op_iadd, op_isub, op_imul, op_idiv, op_imod, op_ilshift,$/;"	e	enum:op_id
op_float	src/pybind11/include/pybind11/operators.h	/^    op_int, op_long, op_float, op_str, op_cmp, op_gt, op_ge, op_lt, op_le,$/;"	e	enum:op_id
op_ge	src/pybind11/include/pybind11/operators.h	/^    op_int, op_long, op_float, op_str, op_cmp, op_gt, op_ge, op_lt, op_le,$/;"	e	enum:op_id
op_gt	src/pybind11/include/pybind11/operators.h	/^    op_int, op_long, op_float, op_str, op_cmp, op_gt, op_ge, op_lt, op_le,$/;"	e	enum:op_id
op_iadd	src/pybind11/include/pybind11/operators.h	/^    op_eq, op_ne, op_iadd, op_isub, op_imul, op_idiv, op_imod, op_ilshift,$/;"	e	enum:op_id
op_iand	src/pybind11/include/pybind11/operators.h	/^    op_irshift, op_iand, op_ixor, op_ior, op_complex, op_bool, op_nonzero,$/;"	e	enum:op_id
op_id	src/pybind11/include/pybind11/operators.h	/^enum op_id : int {$/;"	g
op_idiv	src/pybind11/include/pybind11/operators.h	/^    op_eq, op_ne, op_iadd, op_isub, op_imul, op_idiv, op_imod, op_ilshift,$/;"	e	enum:op_id
op_ilshift	src/pybind11/include/pybind11/operators.h	/^    op_eq, op_ne, op_iadd, op_isub, op_imul, op_idiv, op_imod, op_ilshift,$/;"	e	enum:op_id
op_imod	src/pybind11/include/pybind11/operators.h	/^    op_eq, op_ne, op_iadd, op_isub, op_imul, op_idiv, op_imod, op_ilshift,$/;"	e	enum:op_id
op_impl	src/pybind11/include/pybind11/operators.h	/^template <op_id, op_type, typename B, typename L, typename R> struct op_impl { };$/;"	s
op_imul	src/pybind11/include/pybind11/operators.h	/^    op_eq, op_ne, op_iadd, op_isub, op_imul, op_idiv, op_imod, op_ilshift,$/;"	e	enum:op_id
op_int	src/pybind11/include/pybind11/operators.h	/^    op_int, op_long, op_float, op_str, op_cmp, op_gt, op_ge, op_lt, op_le,$/;"	e	enum:op_id
op_invert	src/pybind11/include/pybind11/operators.h	/^    op_rshift, op_and, op_xor, op_or, op_neg, op_pos, op_abs, op_invert,$/;"	e	enum:op_id
op_ior	src/pybind11/include/pybind11/operators.h	/^    op_irshift, op_iand, op_ixor, op_ior, op_complex, op_bool, op_nonzero,$/;"	e	enum:op_id
op_irshift	src/pybind11/include/pybind11/operators.h	/^    op_irshift, op_iand, op_ixor, op_ior, op_complex, op_bool, op_nonzero,$/;"	e	enum:op_id
op_isub	src/pybind11/include/pybind11/operators.h	/^    op_eq, op_ne, op_iadd, op_isub, op_imul, op_idiv, op_imod, op_ilshift,$/;"	e	enum:op_id
op_itruediv	src/pybind11/include/pybind11/operators.h	/^    op_repr, op_truediv, op_itruediv$/;"	e	enum:op_id
op_ixor	src/pybind11/include/pybind11/operators.h	/^    op_irshift, op_iand, op_ixor, op_ior, op_complex, op_bool, op_nonzero,$/;"	e	enum:op_id
op_l	src/pybind11/include/pybind11/operators.h	/^    op_l, \/* base type on left *\/$/;"	e	enum:op_type
op_le	src/pybind11/include/pybind11/operators.h	/^    op_int, op_long, op_float, op_str, op_cmp, op_gt, op_ge, op_lt, op_le,$/;"	e	enum:op_id
op_long	src/pybind11/include/pybind11/operators.h	/^    op_int, op_long, op_float, op_str, op_cmp, op_gt, op_ge, op_lt, op_le,$/;"	e	enum:op_id
op_lshift	src/pybind11/include/pybind11/operators.h	/^    op_add, op_sub, op_mul, op_div, op_mod, op_divmod, op_pow, op_lshift,$/;"	e	enum:op_id
op_lt	src/pybind11/include/pybind11/operators.h	/^    op_int, op_long, op_float, op_str, op_cmp, op_gt, op_ge, op_lt, op_le,$/;"	e	enum:op_id
op_mod	src/pybind11/include/pybind11/operators.h	/^    op_add, op_sub, op_mul, op_div, op_mod, op_divmod, op_pow, op_lshift,$/;"	e	enum:op_id
op_mul	src/pybind11/include/pybind11/operators.h	/^    op_add, op_sub, op_mul, op_div, op_mod, op_divmod, op_pow, op_lshift,$/;"	e	enum:op_id
op_ne	src/pybind11/include/pybind11/operators.h	/^    op_eq, op_ne, op_iadd, op_isub, op_imul, op_idiv, op_imod, op_ilshift,$/;"	e	enum:op_id
op_neg	src/pybind11/include/pybind11/operators.h	/^    op_rshift, op_and, op_xor, op_or, op_neg, op_pos, op_abs, op_invert,$/;"	e	enum:op_id
op_nonzero	src/pybind11/include/pybind11/operators.h	/^    op_irshift, op_iand, op_ixor, op_ior, op_complex, op_bool, op_nonzero,$/;"	e	enum:op_id
op_or	src/pybind11/include/pybind11/operators.h	/^    op_rshift, op_and, op_xor, op_or, op_neg, op_pos, op_abs, op_invert,$/;"	e	enum:op_id
op_pos	src/pybind11/include/pybind11/operators.h	/^    op_rshift, op_and, op_xor, op_or, op_neg, op_pos, op_abs, op_invert,$/;"	e	enum:op_id
op_pow	src/pybind11/include/pybind11/operators.h	/^    op_add, op_sub, op_mul, op_div, op_mod, op_divmod, op_pow, op_lshift,$/;"	e	enum:op_id
op_r	src/pybind11/include/pybind11/operators.h	/^    op_r, \/* base type on right *\/$/;"	e	enum:op_type
op_repr	src/pybind11/include/pybind11/operators.h	/^    op_repr, op_truediv, op_itruediv$/;"	e	enum:op_id
op_rshift	src/pybind11/include/pybind11/operators.h	/^    op_rshift, op_and, op_xor, op_or, op_neg, op_pos, op_abs, op_invert,$/;"	e	enum:op_id
op_str	src/pybind11/include/pybind11/operators.h	/^    op_int, op_long, op_float, op_str, op_cmp, op_gt, op_ge, op_lt, op_le,$/;"	e	enum:op_id
op_sub	src/pybind11/include/pybind11/operators.h	/^    op_add, op_sub, op_mul, op_div, op_mod, op_divmod, op_pow, op_lshift,$/;"	e	enum:op_id
op_truediv	src/pybind11/include/pybind11/operators.h	/^    op_repr, op_truediv, op_itruediv$/;"	e	enum:op_id
op_type	src/pybind11/include/pybind11/operators.h	/^enum op_type : int {$/;"	g
op_u	src/pybind11/include/pybind11/operators.h	/^    op_u  \/* unary operator *\/$/;"	e	enum:op_type
op_xor	src/pybind11/include/pybind11/operators.h	/^    op_rshift, op_and, op_xor, op_or, op_neg, op_pos, op_abs, op_invert,$/;"	e	enum:op_id
opaque_types	src/pybind11/tests/test_opaque_types.cpp	/^test_initializer opaque_types([](py::module &m) {$/;"	v	typeref:typename:test_initializer
open	src/elka_comm/qurt/snapdragon_uart_devices.cpp	/^int uart::UARTPort::open() {$/;"	f	class:uart::UARTPort	typeref:typename:int
operator !=	src/pybind11/include/pybind11/cast.h	/^        bool operator!=(const iterator &other) { return curr.index != other.curr.index; }$/;"	f	struct:values_and_holders::iterator	typeref:typename:bool
operator !=	src/pybind11/include/pybind11/pytypes.h	/^    bool operator!=(const handle &h) const { return m_ptr != h.m_ptr; }$/;"	f	class:handle	typeref:typename:PYBIND11_DEPRECATED ("")bool
operator !=	src/pybind11/include/pybind11/pytypes.h	/^    friend bool operator!=(const It &a, const It &b) { return !(a == b); }$/;"	f	class:generic_iterator	typeref:typename:bool
operator !=	src/pybind11/include/pybind11/pytypes.h	/^    friend bool operator!=(const iterator &a, const iterator &b) { return a->ptr() != b->ptr(); /;"	f	class:iterator	typeref:typename:bool
operator !=	src/pybind11/tests/object.h	/^    bool operator!=(const T* ptr) const { return m_ptr != ptr; }$/;"	f	class:ref	typeref:typename:bool
operator !=	src/pybind11/tests/object.h	/^    bool operator!=(const ref &r) const { return m_ptr != r.m_ptr; }$/;"	f	class:ref	typeref:typename:bool
operator !=	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    bool operator!=(const Sequence &s) const {$/;"	f	class:Sequence	typeref:typename:bool	file:
operator ()	src/elka_comm/common/elka.h	/^  bool operator()(const dev_id_t &d1, const dev_id_t &d2) const {$/;"	f	struct:dev_id_tCmp	typeref:typename:bool
operator ()	src/elka_comm/common/elka.h	/^  bool operator()(const dev_prop_t &d1, const dev_prop_t &d2) {$/;"	f	struct:dev_prop_tCmp	typeref:typename:bool
operator ()	src/pybind11/include/pybind11/cast.h	/^object object_api<Derived>::operator()(Args &&...args) const {$/;"	f	class:object_api	typeref:typename:object
operator ()	src/pybind11/include/pybind11/common.h	/^    bool operator()(const std::type_index &lhs, const std::type_index &rhs) const {$/;"	f	struct:type_equal_to	typeref:typename:bool
operator ()	src/pybind11/include/pybind11/common.h	/^    constexpr auto operator()(Return (*pf)(Args...)) const noexcept$/;"	f	struct:overload_cast_impl	typeref:typename:auto
operator ()	src/pybind11/include/pybind11/common.h	/^    constexpr auto operator()(Return (Class::*pmf)(Args...) const, std::true_type) const noexcep/;"	f	struct:overload_cast_impl	typeref:typename:auto
operator ()	src/pybind11/include/pybind11/common.h	/^    constexpr auto operator()(Return (Class::*pmf)(Args...), std::false_type = {}) const noexcep/;"	f	struct:overload_cast_impl	typeref:typename:auto
operator ()	src/pybind11/include/pybind11/common.h	/^    inline size_t operator()(const std::pair<const PyObject *, const char *>& v) const {$/;"	f	struct:overload_hash	typeref:typename:size_t
operator ()	src/pybind11/include/pybind11/common.h	/^    size_t operator()(const std::type_index &t) const {$/;"	f	struct:type_hash	typeref:typename:size_t
operator ()	src/pybind11/include/pybind11/common.h	/^struct nodelete { template <typename T> void operator()(T*) { } };$/;"	f	struct:nodelete	typeref:typename:void
operator ()	src/pybind11/include/pybind11/numpy.h	/^    object operator()(typename vectorize_arg<Args>::type... args) {$/;"	f	struct:vectorize_helper	typeref:typename:object
operator ()	src/pybind11/include/pybind11/numpy.h	/^    template <typename... Ix> T& operator()(Ix... index) {$/;"	f	class:unchecked_mutable_reference	typeref:typename:T &
operator ()	src/pybind11/include/pybind11/numpy.h	/^    template <typename... Ix> const T &operator()(Ix... index) const {$/;"	f	class:unchecked_reference	typeref:typename:const T &
operator ()	src/pybind11/include/pybind11/pybind11.h	/^    void operator()(const char *message) {$/;"	f	class:exception	typeref:typename:void
operator ()	src/pybind11/include/pybind11/stl.h	/^    handle operator()(T &&src) const {$/;"	f	struct:variant_caster_visitor	typeref:typename:handle
operator ()	src/pybind11/tests/test_buffers.cpp	/^    float &operator()(ssize_t i, ssize_t j) {$/;"	f	class:Matrix	typeref:typename:float &	file:
operator ()	src/pybind11/tests/test_buffers.cpp	/^    float operator()(ssize_t i, ssize_t j) const {$/;"	f	class:Matrix	typeref:typename:float	file:
operator ()	src/pybind11/tests/test_stl.cpp	/^        const char *operator()(double) { return "double"; }$/;"	f	struct:TEST_SUBMODULE::visitor	typeref:typename:const char *	file:
operator ()	src/pybind11/tests/test_stl.cpp	/^        const char *operator()(int) { return "int"; }$/;"	f	struct:TEST_SUBMODULE::visitor	typeref:typename:const char *	file:
operator ()	src/pybind11/tests/test_stl.cpp	/^        const char *operator()(std::nullptr_t) { return "std::nullptr_t"; }$/;"	f	struct:TEST_SUBMODULE::visitor	typeref:typename:const char *	file:
operator ()	src/pybind11/tests/test_stl.cpp	/^        const char *operator()(std::string) { return "std::string"; }$/;"	f	struct:TEST_SUBMODULE::visitor	typeref:typename:const char *	file:
operator ()	src/pybind11/tests/test_stl.cpp	/^    struct hash<TplCtorClass> { size_t operator()(const TplCtorClass &) const { return 0; } };$/;"	f	struct:std::hash	typeref:typename:size_t	file:
operator () 	src/elka_comm/common/elka_comm.cpp	/^bool elka::SerialBuffer::Compare::operator()$/;"	f	class:elka::SerialBuffer::Compare	typeref:typename:bool
operator *	src/pybind11/include/pybind11/cast.h	/^        value_and_holder &operator*() { return curr; }$/;"	f	struct:values_and_holders::iterator	typeref:typename:value_and_holder &
operator *	src/pybind11/include/pybind11/common.h	/^    const std::vector<T> &operator*() const { return v; }$/;"	f	class:any_container	typeref:typename:const std::vector<T> &
operator *	src/pybind11/include/pybind11/common.h	/^    std::vector<T> &operator*() { return v; }$/;"	f	class:any_container	typeref:typename:std::vector<T> &
operator *	src/pybind11/include/pybind11/pytypes.h	/^    kwargs_proxy operator*() const { return kwargs_proxy(*this); }$/;"	f	class:args_proxy	typeref:typename:kwargs_proxy
operator *	src/pybind11/include/pybind11/pytypes.h	/^    reference operator*() const { return Policy::dereference(); }$/;"	f	class:generic_iterator	typeref:typename:reference
operator *	src/pybind11/include/pybind11/pytypes.h	/^    reference operator*() const {$/;"	f	class:iterator	typeref:typename:reference
operator *	src/pybind11/include/pybind11/pytypes.h	/^template <typename D> args_proxy object_api<D>::operator*() const {$/;"	f	class:object_api	typeref:typename:args_proxy
operator *	src/pybind11/tests/object.h	/^    T& operator*() { return *m_ptr; }$/;"	f	class:ref	typeref:typename:T &
operator *	src/pybind11/tests/object.h	/^    const T& operator*() const { return *m_ptr; }$/;"	f	class:ref	typeref:typename:const T &
operator *	src/pybind11/tests/test_operator_overloading.cpp	/^    Vector2 operator*(const Vector2 &v) const { return Vector2(x * v.x, y * v.y); }$/;"	f	class:Vector2	typeref:typename:Vector2	file:
operator *	src/pybind11/tests/test_operator_overloading.cpp	/^    Vector2 operator*(float value) const { return Vector2(x * value, y * value); }$/;"	f	class:Vector2	typeref:typename:Vector2	file:
operator *	src/pybind11/tests/test_operator_overloading.cpp	/^    friend Vector2 operator*(float f, const Vector2 &v) { return Vector2(f * v.x, f * v.y); }$/;"	f	class:Vector2	typeref:typename:Vector2	file:
operator *	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    const T& operator*() const { return *ptr_; }$/;"	f	class:NonZeroIterator	typeref:typename:const T &	file:
operator *=	src/pybind11/tests/test_operator_overloading.cpp	/^    NestC& operator*=(int i) { value *= i; return *this; }$/;"	f	struct:NestC	typeref:typename:NestC &	file:
operator *=	src/pybind11/tests/test_operator_overloading.cpp	/^    Vector2& operator*=(const Vector2 &v) { x *= v.x; y *= v.y; return *this; }$/;"	f	class:Vector2	typeref:typename:Vector2 &	file:
operator *=	src/pybind11/tests/test_operator_overloading.cpp	/^    Vector2& operator*=(float v) { x *= v; y *= v; return *this; }$/;"	f	class:Vector2	typeref:typename:Vector2 &	file:
operator +	src/pybind11/include/pybind11/descr.h	/^    constexpr descr<Size1 + OtherSize1, Size2 + OtherSize2> operator+(const descr<OtherSize1, Ot/;"	f	class:descr	typeref:typename:descr<Size1+OtherSize1,Size2+OtherSize2>
operator +	src/pybind11/include/pybind11/pytypes.h	/^    friend It operator+(const It &a, difference_type n) { auto copy = a; return copy += n; }$/;"	f	class:generic_iterator	typeref:typename:It
operator +	src/pybind11/include/pybind11/pytypes.h	/^    friend It operator+(difference_type n, const It &b) { return b + n; }$/;"	f	class:generic_iterator	typeref:typename:It
operator +	src/pybind11/tests/test_operator_overloading.cpp	/^    Vector2 operator+(const Vector2 &v) const { return Vector2(x + v.x, y + v.y); }$/;"	f	class:Vector2	typeref:typename:Vector2	file:
operator +	src/pybind11/tests/test_operator_overloading.cpp	/^    Vector2 operator+(float value) const { return Vector2(x + value, y + value); }$/;"	f	class:Vector2	typeref:typename:Vector2	file:
operator +	src/pybind11/tests/test_operator_overloading.cpp	/^    friend Vector2 operator+(float f, const Vector2 &v) { return Vector2(f + v.x, f + v.y); }$/;"	f	class:Vector2	typeref:typename:Vector2	file:
operator +	src/pybind11/tests/test_operator_overloading.cpp	/^int operator+(const C1 &, const C1 &) { return 11; }$/;"	f	typeref:typename:int
operator +	src/pybind11/tests/test_operator_overloading.cpp	/^int operator+(const C1 &, const C2 &) { return 12; }$/;"	f	typeref:typename:int
operator +	src/pybind11/tests/test_operator_overloading.cpp	/^int operator+(const C2 &, const C1 &) { return 21; }$/;"	f	typeref:typename:int
operator +	src/pybind11/tests/test_operator_overloading.cpp	/^int operator+(const C2 &, const C2 &) { return 22; }$/;"	f	typeref:typename:int
operator ++	src/pybind11/include/pybind11/cast.h	/^        iterator &operator++() {$/;"	f	struct:values_and_holders::iterator	typeref:typename:iterator &
operator ++	src/pybind11/include/pybind11/numpy.h	/^    multi_array_iterator& operator++() {$/;"	f	class:multi_array_iterator	typeref:typename:multi_array_iterator &
operator ++	src/pybind11/include/pybind11/pytypes.h	/^    It &operator++() { Policy::increment(); return *this; }$/;"	f	class:generic_iterator	typeref:typename:It &
operator ++	src/pybind11/include/pybind11/pytypes.h	/^    It operator++(int) { auto copy = *this; Policy::increment(); return copy; }$/;"	f	class:generic_iterator	typeref:typename:It
operator ++	src/pybind11/include/pybind11/pytypes.h	/^    iterator operator++(int) {$/;"	f	class:iterator	typeref:typename:iterator
operator ++	src/pybind11/include/pybind11/pytypes.h	/^    iterator& operator++() {$/;"	f	class:iterator
operator ++	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    NonZeroIterator& operator++() { ++ptr_; return *this; }$/;"	f	class:NonZeroIterator	typeref:typename:NonZeroIterator &	file:
operator +=	src/pybind11/include/pybind11/pytypes.h	/^    It &operator+=(difference_type n) { Policy::advance(n); return *this; }$/;"	f	class:generic_iterator	typeref:typename:It &
operator +=	src/pybind11/tests/test_operator_overloading.cpp	/^    NestA& operator+=(int i) { value += i; return *this; }$/;"	f	struct:NestA	typeref:typename:NestA &	file:
operator +=	src/pybind11/tests/test_operator_overloading.cpp	/^    Vector2& operator+=(const Vector2 &v) { x += v.x; y += v.y; return *this; }$/;"	f	class:Vector2	typeref:typename:Vector2 &	file:
operator -	src/pybind11/include/pybind11/pytypes.h	/^    friend It operator-(const It &a, difference_type n) { auto copy = a; return copy -= n; }$/;"	f	class:generic_iterator	typeref:typename:It
operator -	src/pybind11/include/pybind11/pytypes.h	/^    friend difference_type operator-(const It &a, const It &b) { return a.distance_to(b); }$/;"	f	class:generic_iterator	typeref:typename:difference_type
operator -	src/pybind11/tests/test_operator_overloading.cpp	/^    Vector2 operator-(const Vector2 &v) const { return Vector2(x - v.x, y - v.y); }$/;"	f	class:Vector2	typeref:typename:Vector2	file:
operator -	src/pybind11/tests/test_operator_overloading.cpp	/^    Vector2 operator-(float value) const { return Vector2(x - value, y - value); }$/;"	f	class:Vector2	typeref:typename:Vector2	file:
operator -	src/pybind11/tests/test_operator_overloading.cpp	/^    friend Vector2 operator-(float f, const Vector2 &v) { return Vector2(f - v.x, f - v.y); }$/;"	f	class:Vector2	typeref:typename:Vector2	file:
operator --	src/pybind11/include/pybind11/pytypes.h	/^    It &operator--() { Policy::decrement(); return *this; }$/;"	f	class:generic_iterator	typeref:typename:It &
operator --	src/pybind11/include/pybind11/pytypes.h	/^    It operator--(int) { auto copy = *this; Policy::decrement(); return copy; }$/;"	f	class:generic_iterator	typeref:typename:It
operator -=	src/pybind11/include/pybind11/pytypes.h	/^    It &operator-=(difference_type n) { Policy::advance(-n); return *this; }$/;"	f	class:generic_iterator	typeref:typename:It &
operator -=	src/pybind11/tests/test_operator_overloading.cpp	/^    NestB& operator-=(int i) { value -= i; return *this; }$/;"	f	struct:NestB	typeref:typename:NestB &	file:
operator -=	src/pybind11/tests/test_operator_overloading.cpp	/^    Vector2& operator-=(const Vector2 &v) { x -= v.x; y -= v.y; return *this; }$/;"	f	class:Vector2	typeref:typename:Vector2 &	file:
operator ->	src/pybind11/include/pybind11/cast.h	/^        value_and_holder *operator->() { return &curr; }$/;"	f	struct:values_and_holders::iterator	typeref:typename:value_and_holder *
operator ->	src/pybind11/include/pybind11/common.h	/^    const std::vector<T> *operator->() const { return &v; }$/;"	f	class:any_container	typeref:typename:const std::vector<T> *
operator ->	src/pybind11/include/pybind11/common.h	/^    std::vector<T> *operator->() { return &v; }$/;"	f	class:any_container	typeref:typename:std::vector<T> *
operator ->	src/pybind11/include/pybind11/pytypes.h	/^    T *operator->() const { return &value; }$/;"	f	struct:arrow_proxy	typeref:typename:T *
operator ->	src/pybind11/include/pybind11/pytypes.h	/^    pointer operator->() const { operator*(); return &value; }$/;"	f	class:iterator	typeref:typename:pointer
operator ->	src/pybind11/include/pybind11/pytypes.h	/^    pointer operator->() const { return **this; }$/;"	f	class:generic_iterator	typeref:typename:pointer
operator ->	src/pybind11/tests/object.h	/^    T* operator->() { return m_ptr; }$/;"	f	class:ref	typeref:typename:T *
operator ->	src/pybind11/tests/object.h	/^    const T* operator->() const { return m_ptr; }$/;"	f	class:ref	typeref:typename:const T *
operator /	src/pybind11/tests/test_operator_overloading.cpp	/^    Vector2 operator\/(const Vector2 &v) const { return Vector2(x \/ v.x, y \/ v.y); }$/;"	f	class:Vector2	typeref:typename:Vector2	file:
operator /	src/pybind11/tests/test_operator_overloading.cpp	/^    Vector2 operator\/(float value) const { return Vector2(x \/ value, y \/ value); }$/;"	f	class:Vector2	typeref:typename:Vector2	file:
operator /	src/pybind11/tests/test_operator_overloading.cpp	/^    friend Vector2 operator\/(float f, const Vector2 &v) { return Vector2(f \/ v.x, f \/ v.y); }$/;"	f	class:Vector2	typeref:typename:Vector2	file:
operator /=	src/pybind11/tests/test_operator_overloading.cpp	/^    Vector2& operator\/=(const Vector2 &v) { x \/= v.x; y \/= v.y; return *this; }$/;"	f	class:Vector2	typeref:typename:Vector2 &	file:
operator /=	src/pybind11/tests/test_operator_overloading.cpp	/^    Vector2& operator\/=(float v) { x \/= v; y \/= v; return *this; }$/;"	f	class:Vector2	typeref:typename:Vector2 &	file:
operator <	src/elka_comm/common/elka_comm.h	/^  bool operator <(const DeviceRoute &rhs) const {$/;"	f	struct:elka::DeviceRoute	typeref:typename:bool
operator <	src/pybind11/include/pybind11/pytypes.h	/^    friend bool operator< (const It &a, const It &b) { return b - a > 0; }$/;"	f	class:generic_iterator	typeref:typename:bool
operator <<	src/pybind11/include/pybind11/stl.h	/^inline std::ostream &operator<<(std::ostream &os, const handle &obj) {$/;"	f
operator <<	src/pybind11/tests/test_numpy_dtypes.cpp	/^std::ostream& operator<<(std::ostream& os, const ArrayStruct& v) {$/;"	f	typeref:typename:std::ostream &
operator <<	src/pybind11/tests/test_numpy_dtypes.cpp	/^std::ostream& operator<<(std::ostream& os, const ComplexStruct& v) {$/;"	f	typeref:typename:std::ostream &
operator <<	src/pybind11/tests/test_numpy_dtypes.cpp	/^std::ostream& operator<<(std::ostream& os, const EnumStruct& v) {$/;"	f	typeref:typename:std::ostream &
operator <<	src/pybind11/tests/test_numpy_dtypes.cpp	/^std::ostream& operator<<(std::ostream& os, const NestedStruct& v) {$/;"	f	typeref:typename:std::ostream &
operator <<	src/pybind11/tests/test_numpy_dtypes.cpp	/^std::ostream& operator<<(std::ostream& os, const PackedStruct& v) {$/;"	f	typeref:typename:std::ostream &
operator <<	src/pybind11/tests/test_numpy_dtypes.cpp	/^std::ostream& operator<<(std::ostream& os, const SimpleStruct& v) {$/;"	f	typeref:typename:std::ostream &
operator <<	src/pybind11/tests/test_numpy_dtypes.cpp	/^std::ostream& operator<<(std::ostream& os, const StringStruct& v) {$/;"	f	typeref:typename:std::ostream &
operator <<	src/pybind11/tests/test_stl_binders.cpp	/^std::ostream & operator<<(std::ostream &s, El const&v) {$/;"	f	typeref:typename:std::ostream &
operator <=	src/pybind11/include/pybind11/pytypes.h	/^    friend bool operator<=(const It &a, const It &b) { return !(a > b); }$/;"	f	class:generic_iterator	typeref:typename:bool
operator =	src/pybind11/include/pybind11/buffer_info.h	/^    buffer_info& operator=(buffer_info &&rhs) {$/;"	f	struct:buffer_info	typeref:typename:buffer_info &
operator =	src/pybind11/include/pybind11/cast.h	/^arg_v arg::operator=(T &&value) const { return {std::move(*this), std::forward<T>(value)}; }$/;"	f	class:arg	typeref:typename:arg_v
operator =	src/pybind11/include/pybind11/pytypes.h	/^    object& operator=(const object &other) {$/;"	f	class:object	typeref:typename:object &
operator =	src/pybind11/include/pybind11/pytypes.h	/^    object& operator=(object &&other) noexcept {$/;"	f	class:object	typeref:typename:object &
operator =	src/pybind11/include/pybind11/pytypes.h	/^    template <typename T> void operator=(T &&value) & {$/;"	f	class:accessor	typeref:typename:void
operator =	src/pybind11/include/pybind11/pytypes.h	/^    template <typename T> void operator=(T &&value) && {$/;"	f	class:accessor	typeref:typename:void
operator =	src/pybind11/include/pybind11/pytypes.h	/^    void operator=(const accessor &a) & { operator=(handle(a)); }$/;"	f	class:accessor	typeref:typename:void
operator =	src/pybind11/include/pybind11/pytypes.h	/^    void operator=(const accessor &a) && { std::move(*this).operator=(handle(a)); }$/;"	f	class:accessor	typeref:typename:void
operator =	src/pybind11/tests/object.h	/^    ref& operator=(T *ptr) {$/;"	f	class:ref	typeref:typename:ref &
operator =	src/pybind11/tests/object.h	/^    ref& operator=(const ref& r) {$/;"	f	class:ref	typeref:typename:ref &
operator =	src/pybind11/tests/object.h	/^    ref& operator=(ref&& r) {$/;"	f	class:ref	typeref:typename:ref &
operator =	src/pybind11/tests/test_buffers.cpp	/^    Matrix &operator=(Matrix &&s) {$/;"	f	class:Matrix	typeref:typename:Matrix &	file:
operator =	src/pybind11/tests/test_buffers.cpp	/^    Matrix &operator=(const Matrix &s) {$/;"	f	class:Matrix	typeref:typename:Matrix &	file:
operator =	src/pybind11/tests/test_callbacks.cpp	/^  MovableObject &operator=(MovableObject &&o) {$/;"	f	struct:MovableObject	typeref:typename:MovableObject &	file:
operator =	src/pybind11/tests/test_copy_move.cpp	/^    CopyOnlyInt &operator=(const CopyOnlyInt &c) { print_copy_assigned(this, c.value); value = c/;"	f	class:CopyOnlyInt	typeref:typename:CopyOnlyInt &	file:
operator =	src/pybind11/tests/test_copy_move.cpp	/^    MoveOnlyInt &operator=(MoveOnlyInt &&m) { print_move_assigned(this, m.value); std::swap(valu/;"	f	class:MoveOnlyInt	typeref:typename:MoveOnlyInt &	file:
operator =	src/pybind11/tests/test_copy_move.cpp	/^    MoveOrCopyInt &operator=(MoveOrCopyInt &&m) { print_move_assigned(this, m.value); std::swap(/;"	f	class:MoveOrCopyInt	typeref:typename:MoveOrCopyInt &	file:
operator =	src/pybind11/tests/test_copy_move.cpp	/^    MoveOrCopyInt &operator=(const MoveOrCopyInt &c) { print_copy_assigned(this, c.value); value/;"	f	class:MoveOrCopyInt	typeref:typename:MoveOrCopyInt &	file:
operator =	src/pybind11/tests/test_methods_and_attributes.cpp	/^    DestructionTester &operator=(DestructionTester &&) { print_move_assigned(this); return *this/;"	f	class:DestructionTester	typeref:typename:DestructionTester &	file:
operator =	src/pybind11/tests/test_methods_and_attributes.cpp	/^    DestructionTester &operator=(const DestructionTester &) { print_copy_assigned(this); return /;"	f	class:DestructionTester	typeref:typename:DestructionTester &	file:
operator =	src/pybind11/tests/test_methods_and_attributes.cpp	/^    void operator=(ExampleMandA &&e) { print_move_assigned(this); value = e.value; }$/;"	f	class:ExampleMandA	typeref:typename:void	file:
operator =	src/pybind11/tests/test_methods_and_attributes.cpp	/^    void operator=(const ExampleMandA &e) { print_copy_assigned(this); value = e.value; }$/;"	f	class:ExampleMandA	typeref:typename:void	file:
operator =	src/pybind11/tests/test_modules.cpp	/^    A& operator=(const A &copy) { print_copy_assigned(this); v = copy.v; return *this; }$/;"	f	class:A	typeref:typename:A &	file:
operator =	src/pybind11/tests/test_modules.cpp	/^    B& operator=(const B &copy) { print_copy_assigned(this); a1 = copy.a1; a2 = copy.a2; return /;"	f	class:B	typeref:typename:B &	file:
operator =	src/pybind11/tests/test_operator_overloading.cpp	/^    void operator=(Vector2 &&v) {$/;"	f	class:Vector2	typeref:typename:void	file:
operator =	src/pybind11/tests/test_operator_overloading.cpp	/^    void operator=(const Vector2 &v) {$/;"	f	class:Vector2	typeref:typename:void	file:
operator =	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    Sequence &operator=(Sequence &&s) {$/;"	f	class:Sequence	typeref:typename:Sequence &	file:
operator =	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    Sequence &operator=(const Sequence &s) {$/;"	f	class:Sequence	typeref:typename:Sequence &	file:
operator ==	src/pybind11/include/pybind11/cast.h	/^        bool operator==(const iterator &other) { return curr.index == other.curr.index; }$/;"	f	struct:values_and_holders::iterator	typeref:typename:bool
operator ==	src/pybind11/include/pybind11/pytypes.h	/^    bool operator==(const handle &h) const { return m_ptr == h.m_ptr; }$/;"	f	class:handle	typeref:typename:PYBIND11_DEPRECATED ("")bool
operator ==	src/pybind11/include/pybind11/pytypes.h	/^    friend bool operator==(const It &a, const It &b) { return a.equal(b); }$/;"	f	class:generic_iterator	typeref:typename:bool
operator ==	src/pybind11/include/pybind11/pytypes.h	/^    friend bool operator==(const iterator &a, const iterator &b) { return a->ptr() == b->ptr(); /;"	f	class:iterator	typeref:typename:bool
operator ==	src/pybind11/tests/object.h	/^    bool operator==(const T* ptr) const { return m_ptr == ptr; }$/;"	f	class:ref	typeref:typename:bool
operator ==	src/pybind11/tests/object.h	/^    bool operator==(const ref &r) const { return m_ptr == r.m_ptr; }$/;"	f	class:ref	typeref:typename:bool
operator ==	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    bool operator==(const Sequence &s) const {$/;"	f	class:Sequence	typeref:typename:bool	file:
operator ==	src/pybind11/tests/test_sequences_and_iterators.cpp	/^bool operator==(const NonZeroIterator<std::pair<A, B>>& it, const NonZeroSentinel&) {$/;"	f	typeref:typename:bool
operator ==	src/pybind11/tests/test_stl.cpp	/^    bool operator==(const TplCtorClass &) const { return true; }$/;"	f	struct:TplCtorClass	typeref:typename:bool	file:
operator >	src/pybind11/include/pybind11/pytypes.h	/^    friend bool operator> (const It &a, const It &b) { return b < a; }$/;"	f	class:generic_iterator	typeref:typename:bool
operator >=	src/pybind11/include/pybind11/pytypes.h	/^    friend bool operator>=(const It &a, const It &b) { return !(a < b); }$/;"	f	class:generic_iterator	typeref:typename:bool
operator []	src/pybind11/include/pybind11/numpy.h	/^    T &operator[](ssize_t index) { return operator()(index); }$/;"	f	class:unchecked_mutable_reference	typeref:typename:> T &
operator []	src/pybind11/include/pybind11/numpy.h	/^    const T &operator[](ssize_t index) const { return operator()(index); }$/;"	f	class:unchecked_reference	typeref:typename:> const T &
operator []	src/pybind11/include/pybind11/pytypes.h	/^    detail::list_accessor operator[](size_t index) const { return {*this, index}; }$/;"	f	class:list	typeref:typename:detail::list_accessor
operator []	src/pybind11/include/pybind11/pytypes.h	/^    detail::sequence_accessor operator[](size_t index) const { return {*this, index}; }$/;"	f	class:sequence	typeref:typename:detail::sequence_accessor
operator []	src/pybind11/include/pybind11/pytypes.h	/^    detail::tuple_accessor operator[](size_t index) const { return {*this, index}; }$/;"	f	class:tuple	typeref:typename:detail::tuple_accessor
operator []	src/pybind11/include/pybind11/pytypes.h	/^    reference operator[](difference_type n) const { return *(*this + n); }$/;"	f	class:generic_iterator	typeref:typename:reference
operator []	src/pybind11/include/pybind11/pytypes.h	/^template <typename D> item_accessor object_api<D>::operator[](const char *key) const {$/;"	f	class:object_api	typeref:typename:item_accessor
operator []	src/pybind11/include/pybind11/pytypes.h	/^template <typename D> item_accessor object_api<D>::operator[](handle key) const {$/;"	f	class:object_api	typeref:typename:item_accessor
operator []	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    float &operator[](size_t index) {$/;"	f	class:Sequence	typeref:typename:float &	file:
operator []	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    float operator[](size_t index) const {$/;"	f	class:Sequence	typeref:typename:float	file:
operator_new	src/pybind11/include/pybind11/cast.h	/^    void *(*operator_new)(size_t);$/;"	m	struct:type_info	typeref:typename:void * (*)(size_t)
operator_overloading	src/pybind11/tests/test_operator_overloading.cpp	/^test_initializer operator_overloading([](py::module &pm) {$/;"	v	typeref:typename:test_initializer
opt_int	src/pybind11/tests/test_stl.cpp	/^    using opt_int = std::optional<int>;$/;"	t	function:TEST_SUBMODULE	typeref:typename:std::optional<int>	file:
opt_no_assign	src/pybind11/tests/test_stl.cpp	/^    using opt_no_assign = std::optional<NoAssign>;$/;"	t	function:TEST_SUBMODULE	typeref:typename:std::optional<NoAssign>	file:
option	src/pybind11/tools/clang/cindex.py	/^    def option(self):$/;"	m	class:Diagnostic
optional_caster	src/pybind11/include/pybind11/stl.h	/^template<typename T> struct optional_caster {$/;"	s
options	src/pybind11/include/pybind11/options.h	/^    options() : previous_state(global_state()) {}$/;"	f	class:options
options	src/pybind11/include/pybind11/options.h	/^class options {$/;"	c
orb_advert_t	inc/uORB/uORB.h	/^typedef void 	*orb_advert_t;$/;"	t	typeref:typename:void *
orb_get_topics	build_elka_data_collection/topics_sources/uORBTopics.cpp	/^const struct orb_metadata **orb_get_topics()$/;"	f	typeref:typename:const struct orb_metadata **
orb_id_t	inc/uORB/uORB.h	/^typedef const struct orb_metadata *orb_id_t;$/;"	t	typeref:typename:const struct orb_metadata *
orb_metadata	inc/uORB/uORB.h	/^struct orb_metadata {$/;"	s
orb_topics_count	build_elka_data_collection/topics_sources/uORBTopics.cpp	/^size_t orb_topics_count()$/;"	f	typeref:typename:size_t
output	src/pybind11/tools/mkdoc.py	/^output = []$/;"	v
overload_cast	src/pybind11/include/pybind11/common.h	/^template <typename... Args> struct overload_cast {$/;"	s
overload_cast_impl	src/pybind11/include/pybind11/common.h	/^struct overload_cast_impl {$/;"	s
overload_caster_t	src/pybind11/include/pybind11/cast.h	/^template <typename ret_type> using overload_caster_t = conditional_t<$/;"	t	typeref:typename:conditional_t<cast_is_temporary_value_reference<ret_type>::value,make_caster<ret_type>,overload_unused>
overload_hash	src/pybind11/include/pybind11/common.h	/^struct overload_hash {$/;"	s
overload_unused	src/pybind11/include/pybind11/cast.h	/^struct overload_unused {}; \/\/ Placeholder type for the unneeded (and dead code) static variabl/;"	s
overloaded	src/pybind11/tests/test_methods_and_attributes.cpp	/^    py::str overloaded(float, float) const { return "(float, float) const"; }$/;"	f	class:ExampleMandA	typeref:typename:py::str	file:
overloaded	src/pybind11/tests/test_methods_and_attributes.cpp	/^    py::str overloaded(float, float) { return "(float, float)"; }$/;"	f	class:ExampleMandA	typeref:typename:py::str	file:
overloaded	src/pybind11/tests/test_methods_and_attributes.cpp	/^    py::str overloaded(float, int)   const { return "(float, int) const"; }$/;"	f	class:ExampleMandA	typeref:typename:py::str	file:
overloaded	src/pybind11/tests/test_methods_and_attributes.cpp	/^    py::str overloaded(float, int)   { return "(float, int)"; }$/;"	f	class:ExampleMandA	typeref:typename:py::str	file:
overloaded	src/pybind11/tests/test_methods_and_attributes.cpp	/^    py::str overloaded(int, float)   const { return "(int, float) const"; }$/;"	f	class:ExampleMandA	typeref:typename:py::str	file:
overloaded	src/pybind11/tests/test_methods_and_attributes.cpp	/^    py::str overloaded(int, float)   { return "(int, float)"; }$/;"	f	class:ExampleMandA	typeref:typename:py::str	file:
overloaded	src/pybind11/tests/test_methods_and_attributes.cpp	/^    py::str overloaded(int, int)     const { return "(int, int) const"; }$/;"	f	class:ExampleMandA	typeref:typename:py::str	file:
overloaded	src/pybind11/tests/test_methods_and_attributes.cpp	/^    py::str overloaded(int, int)     { return "(int, int)"; }$/;"	f	class:ExampleMandA	typeref:typename:py::str	file:
overloaded	src/pybind11/tests/test_methods_and_attributes.cpp	/^    static py::str overloaded() { return "static"; }$/;"	f	class:ExampleMandA	typeref:typename:py::str	file:
owndata	src/pybind11/include/pybind11/numpy.h	/^    bool owndata() const {$/;"	f	class:array	typeref:typename:bool
owned	src/pybind11/include/pybind11/common.h	/^    bool owned : 1;$/;"	m	struct:instance	typeref:typename:bool:1
ownview	src/pybind11/include/pybind11/buffer_info.h	/^    bool ownview = false;$/;"	m	struct:buffer_info	typeref:typename:bool
p_ptr	src/pybind11/include/pybind11/numpy.h	/^    char* p_ptr;$/;"	m	class:common_iterator	typeref:typename:char *
pack_element	src/pybind11/include/pybind11/common.h	/^struct pack_element { using type = typename pack_element<N - 1, Ts...>::type; };$/;"	s
pack_element	src/pybind11/include/pybind11/common.h	/^struct pack_element<0, T, Ts...> { using type = T; };$/;"	s
package_context	tools/genmsg/scripts/genmsg_check_deps.py	/^package_context = spec.package$/;"	v
package_resource_name	tools/genmsg/src/genmsg/names.py	/^def package_resource_name(name):$/;"	f
packed_dtype	src/pybind11/tests/test_numpy_dtypes.py	/^def packed_dtype():$/;"	f
packed_dtype_fmt	src/pybind11/tests/test_numpy_dtypes.py	/^def packed_dtype_fmt():$/;"	f
padding	src/pybind11/tests/test_smart_ptr.cpp	/^    uint64_t padding[10];$/;"	m	class:huge_unique_ptr	typeref:typename:uint64_t[10]	file:
param_n_t	src/pybind11/include/pybind11/numpy.h	/^    template <size_t Index> using param_n_t = typename pack_element<Index, typename vectorize_ar/;"	t	struct:vectorize_helper	typeref:typename:pack_element<Index,typename vectorize_arg<Args>::call_type...>::type
parameters	src/pybind11/tools/mkdoc.py	/^    parameters = ['-x', 'c++', '-std=c++11']$/;"	v
parent	src/pybind11/include/pybind11/cast.h	/^    handle parent;$/;"	m	struct:function_call	typeref:typename:handle
parent	src/pybind11/include/pybind11/stl.h	/^    handle parent;$/;"	m	struct:variant_caster_visitor	typeref:typename:handle
parse	src/pybind11/tools/clang/cindex.py	/^    def parse(self, path, args=None, unsaved_files=None, options = 0):$/;"	m	class:Index
parse_dev_props	src/elka_comm/common/elka_comm.cpp	/^int16_t elka::CommPort::parse_dev_props($/;"	f	class:elka::CommPort	typeref:typename:int16_t
parse_dev_route	src/elka_comm/common/elka_comm.cpp	/^int16_t elka::CommPort::parse_dev_route($/;"	f	class:elka::CommPort	typeref:typename:int16_t
parse_elka_ctl	src/elka_comm/gnd_station/elka_devices.cpp	/^uint8_t elka::GroundPort::parse_elka_ctl(elka_msg_s &elka_msg,$/;"	f	class:elka::GroundPort	typeref:typename:uint8_t
parse_elka_ctl	src/elka_comm/posix/elka_devices.cpp	/^uint8_t elka::PX4Port::parse_elka_ctl(elka_msg_s &elka_msg,$/;"	f	class:elka::PX4Port	typeref:typename:uint8_t
parse_elka_ctl	src/elka_comm/qurt/snapdragon_uart_devices.cpp	/^uint8_t uart::UARTPort::parse_elka_ctl(elka_msg_s &elka_msg,$/;"	f	class:uart::UARTPort	typeref:typename:uint8_t
parse_elka_msg	src/elka_comm/gnd_station/elka_devices.cpp	/^uint8_t elka::GroundPort::parse_elka_msg(elka_msg_s &elka_msg) {$/;"	f	class:elka::GroundPort	typeref:typename:uint8_t
parse_elka_msg	src/elka_comm/posix/elka_devices.cpp	/^uint8_t elka::PX4Port::parse_elka_msg(elka_msg_s &elka_msg) {$/;"	f	class:elka::PX4Port	typeref:typename:uint8_t
parse_elka_msg	src/elka_comm/qurt/snapdragon_uart_devices.cpp	/^uint8_t uart::UARTPort::parse_elka_msg(elka_msg_s &elka_msg,$/;"	f	class:uart::UARTPort	typeref:typename:uint8_t
parse_elka_packet	serial/python/parse.py	/^    def parse_elka_packet(self, pkts=None):$/;"	m	class:Parse
parse_legacy_elka_packet	serial/python/parse.py	/^    def parse_legacy_elka_packet(self, pkts=None):$/;"	m	class:Parse
parse_motor_cmd	src/elka_comm/gnd_station/elka_devices.cpp	/^uint8_t elka::GroundPort::parse_motor_cmd(elka_msg_s &elka_msg,$/;"	f	class:elka::GroundPort	typeref:typename:uint8_t
parse_motor_cmd	src/elka_comm/posix/elka_devices.cpp	/^uint8_t elka::PX4Port::parse_motor_cmd(elka_msg_s &elka_msg,$/;"	f	class:elka::PX4Port	typeref:typename:uint8_t
parse_motor_cmd	src/elka_comm/qurt/snapdragon_uart_devices.cpp	/^uint8_t uart::UARTPort::parse_motor_cmd(elka_msg_s &elka_msg,$/;"	f	class:uart::UARTPort	typeref:typename:uint8_t
parse_packet	serial/python/parse.py	/^    def parse_packet(self, pkts=None, pkt_type='elka'):$/;"	m	class:Parse
parse_port_ctl	src/elka_comm/gnd_station/elka_devices.cpp	/^uint8_t elka::GroundPort::parse_port_ctl(elka_msg_s &elka_msg,$/;"	f	class:elka::GroundPort	typeref:typename:uint8_t
parse_port_ctl	src/elka_comm/posix/elka_devices.cpp	/^uint8_t elka::PX4Port::parse_port_ctl(elka_msg_s &elka_msg,$/;"	f	class:elka::PX4Port	typeref:typename:uint8_t
parse_port_ctl	src/elka_comm/qurt/snapdragon_uart_devices.cpp	/^uint8_t uart::UARTPort::parse_port_ctl(elka_msg_s &elka_msg,$/;"	f	class:uart::UARTPort	typeref:typename:uint8_t
parse_route_table	src/elka_comm/common/elka_comm.cpp	/^int16_t elka::CommPort::parse_route_table($/;"	f	class:elka::CommPort	typeref:typename:int16_t
parse_routing_msg	src/elka_comm/common/elka_comm.cpp	/^uint8_t elka::CommPort::parse_routing_msg($/;"	f	class:elka::CommPort	typeref:typename:uint8_t
parse_spektrum_packet	serial/python/parse.py	/^    def parse_spektrum_packet(self, pkts=None):$/;"	m	class:Parse
parse_type	tools/genmsg/src/genmsg/msgs.py	/^def parse_type(msg_type):$/;"	f
parsed_fields	tools/genmsg/src/genmsg/msgs.py	/^    def parsed_fields(self):$/;"	m	class:MsgSpec
parser	tools/px_generate_uorb_topic_files.py	/^        parser = argparse.ArgumentParser($/;"	v
partial_dtype_fmt	src/pybind11/tests/test_numpy_dtypes.py	/^def partial_dtype_fmt():$/;"	f
partial_ld_offset	src/pybind11/tests/test_numpy_dtypes.py	/^def partial_ld_offset():$/;"	f
partial_nested_fmt	src/pybind11/tests/test_numpy_dtypes.py	/^def partial_nested_fmt():$/;"	f
patients	src/pybind11/include/pybind11/common.h	/^    std::unordered_map<const PyObject *, std::vector<PyObject *>> patients;$/;"	m	struct:internals	typeref:typename:std::unordered_map<const PyObject *,std::vector<PyObject * >>
pause_port	src/elka_comm/gnd_station/elka_devices.cpp	/^bool elka::GroundPort::pause_port() {$/;"	f	class:elka::GroundPort	typeref:typename:bool
pause_port	src/elka_comm/posix/elka_devices.cpp	/^bool elka::PX4Port::pause_port() {$/;"	f	class:elka::PX4Port	typeref:typename:bool
pause_port	src/elka_comm/qurt/snapdragon_uart_devices.cpp	/^bool uart::UARTPort::pause_port() {$/;"	f	class:uart::UARTPort	typeref:typename:bool
period	src/pybind11/include/pybind11/chrono.h	/^    typedef typename type::period period;$/;"	t	class:duration_caster	typeref:typename:type::period
pg	serial/python/gui.py	/^import pyqtgraph as pg$/;"	I
pg	serial/python/gui_start.py	/^import pyqtgraph as pg$/;"	I
pg	serial/python/parse_vispy.py	/^import pyqtgraph as pg$/;"	I
pickle	src/pybind11/docs/Makefile	/^pickle:$/;"	t
pickle	src/pybind11/tests/test_pickling.py	/^    import cPickle as pickle  # Use cPickle on Python 2.7$/;"	I
pickle	tools/genmsg/doc/Makefile	/^pickle:$/;"	t
pickling	src/pybind11/tests/test_pickling.cpp	/^test_initializer pickling([](py::module &m) {$/;"	v	typeref:typename:test_initializer
pid	src/elka_comm/gnd_station/inet_comm.h	/^	pid_t pid;$/;"	m	struct:Child	typeref:typename:pid_t
pid	src/elka_comm/posix/inet_comm.h	/^	pid_t pid;$/;"	m	struct:Child	typeref:typename:pid_t
pkg_name	tools/genmsg/scripts/genmsg_check_deps.py	/^pkg_name = sys.argv[1]$/;"	v
plog	tools/genmsg/src/genmsg/base.py	/^def plog(msg, obj):$/;"	f
plot_data	serial/python/parse.py	/^    def plot_data(self,ax=None,data=None,dtype='elka'):$/;"	m	class:Parse
plt	serial/python/parse.py	/^import matplotlib.pyplot as plt$/;"	I
pointer	src/pybind11/include/pybind11/pytypes.h	/^    using pointer = arrow_proxy<const handle>;$/;"	t	class:sequence_fast_readonly	typeref:typename:arrow_proxy<const handle>
pointer	src/pybind11/include/pybind11/pytypes.h	/^    using pointer = arrow_proxy<const sequence_accessor>;$/;"	t	class:sequence_slow_readwrite	typeref:typename:arrow_proxy<const sequence_accessor>
pointer	src/pybind11/include/pybind11/pytypes.h	/^    using pointer = arrow_proxy<const value_type>;$/;"	t	class:dict_readonly	typeref:typename:arrow_proxy<const value_type>
pointer	src/pybind11/include/pybind11/pytypes.h	/^    using pointer = const handle *;$/;"	t	class:iterator	typeref:typename:const handle *
pointer	src/pybind11/include/pybind11/pytypes.h	/^    using pointer = typename Policy::pointer;$/;"	t	class:generic_iterator	typeref:typename:Policy::pointer
policy	src/pybind11/include/pybind11/attr.h	/^    return_value_policy policy = return_value_policy::automatic;$/;"	m	struct:function_record	typeref:typename:return_value_policy
policy	src/pybind11/include/pybind11/cast.h	/^    static return_value_policy policy(return_value_policy p) {$/;"	f	struct:return_value_policy_override	typeref:typename:return_value_policy
policy	src/pybind11/include/pybind11/eigen.h	/^    static return_value_policy policy(return_value_policy p) { return p; }$/;"	f	struct:return_value_policy_override	typeref:typename:return_value_policy
policy	src/pybind11/include/pybind11/stl.h	/^    return_value_policy policy;$/;"	m	struct:variant_caster_visitor	typeref:typename:return_value_policy
pop_msg	src/elka_comm/common/elka_comm.cpp	/^uint8_t elka::CommPort::pop_msg(bool tx) {$/;"	f	class:elka::CommPort	typeref:typename:uint8_t
pop_msg	src/elka_comm/common/elka_comm.cpp	/^uint8_t elka::SerialBuffer::pop_msg() {$/;"	f	class:elka::SerialBuffer	typeref:typename:uint8_t
port_num	src/elka_comm/common/elka.h	/^  uint8_t port_num, port_type, proc_side;$/;"	m	struct:snd_params_s	typeref:typename:uint8_t
port_num	src/elka_comm/common/elka_comm.cpp	/^  uint8_t port_num, port_type, proc_side;$/;"	m	struct:snd_params_s	typeref:typename:uint8_t	file:
port_type	src/elka_comm/common/elka.h	/^  uint8_t port_num, port_type, proc_side;$/;"	m	struct:snd_params_s	typeref:typename:uint8_t
port_type	src/elka_comm/common/elka_comm.cpp	/^  uint8_t port_num, port_type, proc_side;$/;"	m	struct:snd_params_s	typeref:typename:uint8_t	file:
pos	src/pybind11/include/pybind11/pytypes.h	/^    ssize_t pos = -1;$/;"	m	class:dict_readonly	typeref:typename:ssize_t
postcall	src/pybind11/include/pybind11/attr.h	/^    static void postcall(function_call &, handle) { }$/;"	f	struct:process_attribute	typeref:typename:void
postcall	src/pybind11/include/pybind11/attr.h	/^    static void postcall(function_call &, handle) { }$/;"	f	struct:process_attribute_default	typeref:typename:void
postcall	src/pybind11/include/pybind11/attr.h	/^    static void postcall(function_call &call, handle fn_ret) {$/;"	f	struct:process_attributes	typeref:typename:void
postcall	src/pybind11/include/pybind11/attr.h	/^    static void postcall(function_call &call, handle ret) { keep_alive_impl(Nurse, Patient, call/;"	f	struct:process_attribute	typeref:typename:void
precall	src/pybind11/include/pybind11/attr.h	/^    static void precall(function_call &) { }$/;"	f	struct:process_attribute	typeref:typename:void
precall	src/pybind11/include/pybind11/attr.h	/^    static void precall(function_call &) { }$/;"	f	struct:process_attribute_default	typeref:typename:void
precall	src/pybind11/include/pybind11/attr.h	/^    static void precall(function_call &call) { keep_alive_impl(Nurse, Patient, call, handle()); /;"	f	struct:process_attribute	typeref:typename:void
precall	src/pybind11/include/pybind11/attr.h	/^    static void precall(function_call &call) {$/;"	f	struct:process_attributes	typeref:typename:void
preinstall	build_elka_data_collection/Makefile	/^preinstall: all$/;"	t
preinstall	build_elka_data_collection/msg/Makefile	/^preinstall: all$/;"	t
preinstall	build_elka_data_collection/src/Makefile	/^preinstall: all$/;"	t
preinstall	build_elka_data_collection/src/elka_comm/common/Makefile	/^preinstall: all$/;"	t
preinstall	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^preinstall: all$/;"	t
preinstall	build_elka_data_collection/src/pybind11/Makefile	/^preinstall: all$/;"	t
preinstall/fast	build_elka_data_collection/Makefile	/^preinstall\/fast:$/;"	t
preinstall/fast	build_elka_data_collection/msg/Makefile	/^preinstall\/fast:$/;"	t
preinstall/fast	build_elka_data_collection/src/Makefile	/^preinstall\/fast:$/;"	t
preinstall/fast	build_elka_data_collection/src/elka_comm/common/Makefile	/^preinstall\/fast:$/;"	t
preinstall/fast	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^preinstall\/fast:$/;"	t
preinstall/fast	build_elka_data_collection/src/pybind11/Makefile	/^preinstall\/fast:$/;"	t
previous_state	src/pybind11/include/pybind11/options.h	/^    state previous_state;$/;"	m	class:options	typeref:typename:state
primary_domain	src/pybind11/docs/conf.py	/^primary_domain = 'cpp'$/;"	v
print	src/pybind11/include/pybind11/pybind11.h	/^PYBIND11_NOINLINE inline void print(tuple args, dict kwargs) {$/;"	f
print	src/pybind11/include/pybind11/pybind11.h	/^void print(Args &&...args) {$/;"	f	typeref:typename:NAMESPACE_END (detail)void
print_array	src/elka_comm/common/elka.cpp	/^void print_array(uint8_t *buf, uint8_t len) {$/;"	f	typeref:typename:void
print_bytes	src/pybind11/tests/test_constants_and_functions.cpp	/^std::string print_bytes(py::bytes bytes) {$/;"	f	typeref:typename:std::string
print_cb	src/elka_comm/common/elka.cpp	/^void print_cb(uint16_t *cb, uint16_t cb_end, uint16_t cb_len,$/;"	f	typeref:typename:void
print_char_array	src/elka_comm/common/elka.cpp	/^void print_char_array(char *buf, uint8_t len) {$/;"	f	typeref:typename:void
print_constr_details	src/pybind11/tests/constructor_stats.h	/^void print_constr_details(T *inst, const std::string &action, Output &&...output) {$/;"	f	typeref:typename:void
print_copy_assigned	src/pybind11/tests/constructor_stats.h	/^template <class T, typename... Values> void print_copy_assigned(T *inst, Values &&...values) {$/;"	f	typeref:typename:void
print_copy_created	src/pybind11/tests/constructor_stats.h	/^template <class T, typename... Values> void print_copy_created(T *inst, Values &&...values) { \//;"	f	typeref:typename:void
print_created	src/pybind11/tests/constructor_stats.h	/^template <class T, typename... Values> void print_created(T *inst, Values &&...values) {$/;"	f	typeref:typename:void
print_default_created	src/pybind11/tests/constructor_stats.h	/^template <class T, typename... Values> void print_default_created(T *inst, Values &&...values) {$/;"	f	typeref:typename:void
print_destroyed	src/pybind11/tests/constructor_stats.h	/^template <class T, typename... Values> void print_destroyed(T *inst, Values &&...values) { \/\/ /;"	f	typeref:typename:void
print_dev_props	src/elka_comm/common/elka_comm.cpp	/^void elka::DeviceRoute::print_dev_props($/;"	f	class:elka::DeviceRoute	typeref:typename:void
print_dev_route	src/elka_comm/common/elka_comm.cpp	/^void elka::DeviceRoute::print_dev_route($/;"	f	class:elka::DeviceRoute	typeref:typename:void
print_dtypes	src/pybind11/tests/test_numpy_dtypes.cpp	/^py::list print_dtypes() {$/;"	f	typeref:typename:py::list
print_elka_msg	src/elka_comm/common/elka.cpp	/^void print_elka_msg(elka_msg_s &elka_msg) {$/;"	f	typeref:typename:void
print_elka_msg_ack	src/elka_comm/common/elka.cpp	/^void print_elka_msg_ack(elka_msg_ack_s &elka_msg) {$/;"	f	typeref:typename:void
print_elka_msg_id	src/elka_comm/common/elka.cpp	/^void print_elka_msg_id(msg_id_t &msg_id) {$/;"	f	typeref:typename:void
print_elka_route_msg	src/elka_comm/common/elka_comm.cpp	/^void elka::CommPort::print_elka_route_msg(elka_msg_s &elka_msg) {$/;"	f	class:elka::CommPort	typeref:typename:void
print_elka_serial_array	src/elka_comm/common/elka.cpp	/^void print_elka_serial_array(uint8_t *buf) {$/;"	f	typeref:typename:void
print_field_def	tools/px_generate_uorb_topic_helper.py	/^def print_field_def(field):$/;"	f
print_format_descriptors	src/pybind11/tests/test_numpy_dtypes.cpp	/^py::list print_format_descriptors() {$/;"	f	typeref:typename:py::list
print_includes	src/pybind11/pybind11/__main__.py	/^def print_includes():$/;"	f
print_movable	src/pybind11/tests/test_virtual_functions.cpp	/^    std::string print_movable(int a, int b) { return get_movable(a, b).get_value(); }$/;"	f	class:NCVirt	typeref:typename:std::string	file:
print_move_assigned	src/pybind11/tests/constructor_stats.h	/^template <class T, typename... Values> void print_move_assigned(T *inst, Values &&...values) {$/;"	f	typeref:typename:void
print_move_created	src/pybind11/tests/constructor_stats.h	/^template <class T, typename... Values> void print_move_created(T *inst, Values &&...values) { \//;"	f	typeref:typename:void
print_myobject1_1	src/pybind11/tests/test_smart_ptr.cpp	/^void print_myobject1_1(const MyObject1 *obj) { py::print(obj->toString()); }$/;"	f	typeref:typename:void
print_myobject1_2	src/pybind11/tests/test_smart_ptr.cpp	/^void print_myobject1_2(ref<MyObject1> obj) { py::print(obj->toString()); }$/;"	f	typeref:typename:void
print_myobject1_3	src/pybind11/tests/test_smart_ptr.cpp	/^void print_myobject1_3(const ref<MyObject1> &obj) { py::print(obj->toString()); }$/;"	f	typeref:typename:void
print_myobject1_4	src/pybind11/tests/test_smart_ptr.cpp	/^void print_myobject1_4(const ref<MyObject1> *obj) { py::print((*obj)->toString()); }$/;"	f	typeref:typename:void
print_myobject2_1	src/pybind11/tests/test_smart_ptr.cpp	/^void print_myobject2_1(const MyObject2 *obj) { py::print(obj->toString()); }$/;"	f	typeref:typename:void
print_myobject2_2	src/pybind11/tests/test_smart_ptr.cpp	/^void print_myobject2_2(std::shared_ptr<MyObject2> obj) { py::print(obj->toString()); }$/;"	f	typeref:typename:void
print_myobject2_3	src/pybind11/tests/test_smart_ptr.cpp	/^void print_myobject2_3(const std::shared_ptr<MyObject2> &obj) { py::print(obj->toString()); }$/;"	f	typeref:typename:void
print_myobject2_4	src/pybind11/tests/test_smart_ptr.cpp	/^void print_myobject2_4(const std::shared_ptr<MyObject2> *obj) { py::print((*obj)->toString()); }$/;"	f	typeref:typename:void
print_myobject3_1	src/pybind11/tests/test_smart_ptr.cpp	/^void print_myobject3_1(const MyObject3 *obj) { py::print(obj->toString()); }$/;"	f	typeref:typename:void
print_myobject3_2	src/pybind11/tests/test_smart_ptr.cpp	/^void print_myobject3_2(std::shared_ptr<MyObject3> obj) { py::print(obj->toString()); }$/;"	f	typeref:typename:void
print_myobject3_3	src/pybind11/tests/test_smart_ptr.cpp	/^void print_myobject3_3(const std::shared_ptr<MyObject3> &obj) { py::print(obj->toString()); }$/;"	f	typeref:typename:void
print_myobject3_4	src/pybind11/tests/test_smart_ptr.cpp	/^void print_myobject3_4(const std::shared_ptr<MyObject3> *obj) { py::print((*obj)->toString()); }$/;"	f	typeref:typename:void
print_nc	src/pybind11/tests/test_virtual_functions.cpp	/^    std::string print_nc(int a, int b) { return get_noncopyable(a, b).get_value(); }$/;"	f	class:NCVirt	typeref:typename:std::string	file:
print_object_1	src/pybind11/tests/test_smart_ptr.cpp	/^void print_object_1(const Object *obj) { py::print(obj->toString()); }$/;"	f	typeref:typename:void
print_object_2	src/pybind11/tests/test_smart_ptr.cpp	/^void print_object_2(ref<Object> obj) { py::print(obj->toString()); }$/;"	f	typeref:typename:void
print_object_3	src/pybind11/tests/test_smart_ptr.cpp	/^void print_object_3(const ref<Object> &obj) { py::print(obj->toString()); }$/;"	f	typeref:typename:void
print_object_4	src/pybind11/tests/test_smart_ptr.cpp	/^void print_object_4(const ref<Object> *obj) { py::print((*obj)->toString()); }$/;"	f	typeref:typename:void
print_recarray	src/pybind11/tests/test_numpy_dtypes.cpp	/^py::list print_recarray(py::array_t<S, 0> arr) {$/;"	f	typeref:typename:py::list
print_routing_table	src/elka_comm/common/elka_comm.cpp	/^void elka::CommPort::print_routing_table($/;"	f	class:elka::CommPort	typeref:typename:void
print_statistics	src/elka_comm/posix/elka_manager.cpp	/^bool elka::Manager::print_statistics(bool reset) {$/;"	f	class:elka::Manager	typeref:typename:bool
print_statistics	src/elka_comm/qurt/snapdragon_uart_manager.cpp	/^bool uart::Manager::print_statistics(bool reset) {$/;"	f	class:uart::Manager	typeref:typename:bool
print_uint8_array	src/elka_comm/common/elka.cpp	/^void print_uint8_array(uint8_t *buf, uint8_t len) {$/;"	f	typeref:typename:void
print_values	src/pybind11/tests/constructor_stats.h	/^template <class T, typename... Values> void print_values(T *inst, Values &&...values) {$/;"	f	typeref:typename:void
priority	src/pybind11/tools/clang/cindex.py	/^    def priority(self):$/;"	m	class:CompletionString
private_ctor	src/pybind11/include/pybind11/numpy.h	/^    struct private_ctor {};$/;"	s	class:array_t
private_ctr_tag	src/pybind11/include/pybind11/buffer_info.h	/^    struct private_ctr_tag { };$/;"	s	struct:buffer_info
proc_side	src/elka_comm/common/elka.h	/^  uint8_t port_num, port_type, proc_side;$/;"	m	struct:snd_params_s	typeref:typename:uint8_t
proc_side	src/elka_comm/common/elka_comm.cpp	/^  uint8_t port_num, port_type, proc_side;$/;"	m	struct:snd_params_s	typeref:typename:uint8_t	file:
process	src/pybind11/include/pybind11/cast.h	/^    void process(list &\/*args_list*\/, arg_v a) {$/;"	f	class:unpacking_collector	typeref:typename:void
process	src/pybind11/include/pybind11/cast.h	/^    void process(list &\/*args_list*\/, detail::kwargs_proxy kp) {$/;"	f	class:unpacking_collector	typeref:typename:void
process	src/pybind11/include/pybind11/cast.h	/^    void process(list &args_list, T &&x) {$/;"	f	class:unpacking_collector	typeref:typename:void
process	src/pybind11/include/pybind11/cast.h	/^    void process(list &args_list, detail::args_proxy ap) {$/;"	f	class:unpacking_collector	typeref:typename:void
process_attribute	src/pybind11/include/pybind11/attr.h	/^struct process_attribute<T, enable_if_t<is_pyobject<T>::value>> : process_attribute_default<hand/;"	s
process_attribute	src/pybind11/include/pybind11/attr.h	/^struct process_attribute<arithmetic> : process_attribute_default<arithmetic> {};$/;"	s
process_attribute	src/pybind11/include/pybind11/attr.h	/^struct process_attribute<base<T>> : process_attribute_default<base<T>> {$/;"	s
process_attribute	src/pybind11/include/pybind11/attr.h	/^struct process_attribute<buffer_protocol> : process_attribute_default<buffer_protocol> {$/;"	s
process_attribute	src/pybind11/include/pybind11/attr.h	/^struct process_attribute<call_guard<Ts...>> : process_attribute_default<call_guard<Ts...>> { };$/;"	s
process_attribute	src/pybind11/include/pybind11/attr.h	/^struct process_attribute<dynamic_attr> : process_attribute_default<dynamic_attr> {$/;"	s
process_attribute	src/pybind11/include/pybind11/attr.h	/^struct process_attribute<metaclass> : process_attribute_default<metaclass> {$/;"	s
process_attribute	src/pybind11/include/pybind11/attr.h	/^struct process_attribute<multiple_inheritance> : process_attribute_default<multiple_inheritance>/;"	s
process_attribute	src/pybind11/include/pybind11/attr.h	/^template <> struct process_attribute<arg> : process_attribute_default<arg> {$/;"	s
process_attribute	src/pybind11/include/pybind11/attr.h	/^template <> struct process_attribute<arg_v> : process_attribute_default<arg_v> {$/;"	s
process_attribute	src/pybind11/include/pybind11/attr.h	/^template <> struct process_attribute<char *> : process_attribute<const char *> { };$/;"	s
process_attribute	src/pybind11/include/pybind11/attr.h	/^template <> struct process_attribute<const char *> : process_attribute_default<const char *> {$/;"	s
process_attribute	src/pybind11/include/pybind11/attr.h	/^template <> struct process_attribute<doc> : process_attribute_default<doc> {$/;"	s
process_attribute	src/pybind11/include/pybind11/attr.h	/^template <> struct process_attribute<is_method> : process_attribute_default<is_method> {$/;"	s
process_attribute	src/pybind11/include/pybind11/attr.h	/^template <> struct process_attribute<is_operator> : process_attribute_default<is_operator> {$/;"	s
process_attribute	src/pybind11/include/pybind11/attr.h	/^template <> struct process_attribute<name> : process_attribute_default<name> {$/;"	s
process_attribute	src/pybind11/include/pybind11/attr.h	/^template <> struct process_attribute<return_value_policy> : process_attribute_default<return_val/;"	s
process_attribute	src/pybind11/include/pybind11/attr.h	/^template <> struct process_attribute<scope> : process_attribute_default<scope> {$/;"	s
process_attribute	src/pybind11/include/pybind11/attr.h	/^template <> struct process_attribute<sibling> : process_attribute_default<sibling> {$/;"	s
process_attribute	src/pybind11/include/pybind11/attr.h	/^template <size_t Nurse, size_t Patient> struct process_attribute<keep_alive<Nurse, Patient>> : p/;"	s
process_attribute_default	src/pybind11/include/pybind11/attr.h	/^template <typename T> struct process_attribute_default {$/;"	s
process_attributes	src/pybind11/include/pybind11/attr.h	/^template <typename... Args> struct process_attributes {$/;"	s
process_comment	src/pybind11/tools/mkdoc.py	/^def process_comment(comment):$/;"	f
project	src/pybind11/docs/conf.py	/^project = 'pybind11'$/;"	v
project	tools/genmsg/doc/conf.py	/^project = u'genmsg'$/;"	v
props	src/pybind11/include/pybind11/eigen.h	/^    using props = EigenProps<MapType>;$/;"	t	struct:eigen_map_caster	typeref:typename:EigenProps<MapType>
props	src/pybind11/include/pybind11/eigen.h	/^    using props = EigenProps<Matrix>;$/;"	t	struct:type_caster	typeref:typename:EigenProps<Matrix>
props	src/pybind11/include/pybind11/eigen.h	/^    using props = EigenProps<Type>;$/;"	t	struct:type_caster	typeref:typename:EigenProps<Type>
pseudoxml	src/pybind11/docs/Makefile	/^pseudoxml:$/;"	t
ptr	src/pybind11/include/pybind11/buffer_info.h	/^    void *ptr = nullptr;          \/\/ Pointer to the underlying storage$/;"	m	struct:buffer_info	typeref:typename:void *
ptr	src/pybind11/include/pybind11/numpy.h	/^        Py_intptr_t *ptr;$/;"	m	struct:npy_api::__anonc556634c0108	typeref:typename:Py_intptr_t *
ptr	src/pybind11/include/pybind11/pytypes.h	/^    PyObject *&ptr() { return m_ptr; }$/;"	f	class:handle	typeref:typename:PyObject * &
ptr	src/pybind11/include/pybind11/pytypes.h	/^    PyObject **ptr;$/;"	m	class:sequence_fast_readonly	typeref:typename:PyObject **
ptr	src/pybind11/include/pybind11/pytypes.h	/^    PyObject *ptr() const { return get_cache().ptr(); }$/;"	f	class:accessor	typeref:typename:PyObject *
ptr	src/pybind11/include/pybind11/pytypes.h	/^    PyObject *ptr() const { return m_ptr; }$/;"	f	class:handle	typeref:typename:PyObject *
ptr	src/pybind11/tests/test_smart_ptr.cpp	/^    std::unique_ptr<T> ptr;$/;"	m	class:huge_unique_ptr	typeref:typename:std::unique_ptr<T>	file:
ptr_	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    const T* ptr_;$/;"	m	class:NonZeroIterator	typeref:typename:const T *	file:
pure_virtual	src/pybind11/tests/test_virtual_functions.cpp	/^    void pure_virtual() override {$/;"	f	class:PyExampleVirt	typeref:typename:void	file:
pure_virtual	src/pybind11/tests/test_virtual_functions.py	/^        def pure_virtual(self):$/;"	m	class:test_override.ExtendedExampleVirt
push_msg	src/elka_comm/common/elka_comm.cpp	/^uint8_t elka::CommPort::push_msg($/;"	f	class:elka::CommPort	typeref:typename:uint8_t
push_msg	src/elka_comm/common/elka_comm.cpp	/^uint8_t elka::CommPort::push_msg(elka_msg_s &elka_msg, bool tx) {$/;"	f	class:elka::CommPort	typeref:typename:uint8_t
push_msg	src/elka_comm/common/elka_comm.cpp	/^uint8_t elka::SerialBuffer::push_msg($/;"	f	class:elka::SerialBuffer	typeref:typename:uint8_t
push_msg	src/elka_comm/common/elka_comm.cpp	/^uint8_t elka::SerialBuffer::push_msg(elka_msg_ack_s &msg) {$/;"	f	class:elka::SerialBuffer	typeref:typename:uint8_t
push_msg	src/elka_comm/common/elka_comm.cpp	/^uint8_t elka::SerialBuffer::push_msg(elka_msg_s &msg) {$/;"	f	class:elka::SerialBuffer	typeref:typename:uint8_t
push_msg	src/elka_comm/common/elka_comm.cpp	/^uint8_t elka::SerialBuffer::push_msg(msg_id_t msg_id,$/;"	f	class:elka::SerialBuffer	typeref:typename:uint8_t
push_recent_acks	src/elka_comm/common/elka_comm.cpp	/^void elka::SerialBuffer::push_recent_acks(uint16_t msg_num) {$/;"	f	class:elka::SerialBuffer	typeref:typename:void
px4	build_elka_data_collection/multi_topics_temporary/ubuntu/elka_msg.h	/^namespace px4$/;"	n
px4	build_elka_data_collection/multi_topics_temporary/ubuntu/elka_msg_ack.h	/^namespace px4$/;"	n
px4	build_elka_data_collection/src/platforms/ubuntu/elka_messages/elka_elka_msg.h	/^namespace px4$/;"	n
px4	build_elka_data_collection/src/platforms/ubuntu/elka_messages/elka_elka_msg_ack.h	/^namespace px4$/;"	n
px4_elka_msg	build_elka_data_collection/multi_topics_temporary/ubuntu/elka_msg.h	/^	px4_elka_msg() :$/;"	f	class:px4::px4_elka_msg
px4_elka_msg	build_elka_data_collection/multi_topics_temporary/ubuntu/elka_msg.h	/^	px4_elka_msg(elka_msg_s msg) :$/;"	f	class:px4::px4_elka_msg
px4_elka_msg	build_elka_data_collection/multi_topics_temporary/ubuntu/elka_msg.h	/^class __EXPORT px4_elka_msg :$/;"	c	namespace:px4
px4_elka_msg	build_elka_data_collection/src/platforms/ubuntu/elka_messages/elka_elka_msg.h	/^	px4_elka_msg() :$/;"	f	class:px4::px4_elka_msg
px4_elka_msg	build_elka_data_collection/src/platforms/ubuntu/elka_messages/elka_elka_msg.h	/^	px4_elka_msg(elka_msg_s msg) :$/;"	f	class:px4::px4_elka_msg
px4_elka_msg	build_elka_data_collection/src/platforms/ubuntu/elka_messages/elka_elka_msg.h	/^class __EXPORT px4_elka_msg :$/;"	c	namespace:px4
px4_elka_msg_ack	build_elka_data_collection/multi_topics_temporary/ubuntu/elka_msg_ack.h	/^	px4_elka_msg_ack() :$/;"	f	class:px4::px4_elka_msg_ack
px4_elka_msg_ack	build_elka_data_collection/multi_topics_temporary/ubuntu/elka_msg_ack.h	/^	px4_elka_msg_ack(elka_msg_ack_s msg) :$/;"	f	class:px4::px4_elka_msg_ack
px4_elka_msg_ack	build_elka_data_collection/multi_topics_temporary/ubuntu/elka_msg_ack.h	/^class __EXPORT px4_elka_msg_ack :$/;"	c	namespace:px4
px4_elka_msg_ack	build_elka_data_collection/src/platforms/ubuntu/elka_messages/elka_elka_msg_ack.h	/^	px4_elka_msg_ack() :$/;"	f	class:px4::px4_elka_msg_ack
px4_elka_msg_ack	build_elka_data_collection/src/platforms/ubuntu/elka_messages/elka_elka_msg_ack.h	/^	px4_elka_msg_ack(elka_msg_ack_s msg) :$/;"	f	class:px4::px4_elka_msg_ack
px4_elka_msg_ack	build_elka_data_collection/src/platforms/ubuntu/elka_messages/elka_elka_msg_ack.h	/^class __EXPORT px4_elka_msg_ack :$/;"	c	namespace:px4
px4_msg_dir	tools/px_generate_uorb_topic_files.py	/^px4_msg_dir = os.path.join(px4_tools_dir,"..\/msg")$/;"	v
px4_tools_dir	tools/px_generate_uorb_topic_files.py	/^px4_tools_dir = os.path.dirname(os.path.abspath(__file__))$/;"	v
py_module	src/pybind11/tests/test_embed/test_interpreter.cpp	/^    auto py_module = py::module::import("test_interpreter");$/;"	v	typeref:typename:auto
py_type	src/pybind11/include/pybind11/cast.h	/^    using py_type = conditional_t<std::is_floating_point<T>::value, double, _py_type_1>;$/;"	t	struct:type_caster	typeref:typename:conditional_t<std::is_floating_point<T>::value,double,_py_type_1>
py_widget	src/pybind11/tests/test_embed/test_interpreter.cpp	/^    auto py_widget = module.attr("DerivedWidget")("The question");$/;"	v	typeref:typename:auto
py_widget	src/pybind11/tests/test_embed/test_interpreter.cpp	/^    auto py_widget = py_module.attr("DerivedWidget")("Hello after restart");$/;"	v	typeref:typename:auto
pybind11	src/elka_comm/common/elka_comm.cpp	/^namespace pybind11 { namespace detail {$/;"	n	file:
pybind11	src/pybind11/tests/test_copy_move.cpp	/^namespace pybind11 { namespace detail {$/;"	n	file:
pybind11	src/pybind11/tests/test_methods_and_attributes.cpp	/^namespace pybind11 { namespace detail {$/;"	n	file:
pybind11	src/pybind11/tests/test_smart_ptr.cpp	/^namespace pybind11 { namespace detail {$/;"	n	file:
pybind11 --- Seamless operability between C++11 and Python	src/pybind11/docs/index.rst	/^pybind11 --- Seamless operability between C++11 and Python$/;"	c
pybind11_add_module	src/pybind11/docs/compiling.rst	/^pybind11_add_module$/;"	S	section:Building with CMake
pybind11_clear	src/pybind11/include/pybind11/class_support.h	/^extern "C" inline int pybind11_clear(PyObject *self) {$/;"	f	typeref:typename:int
pybind11_fail	src/pybind11/include/pybind11/common.h	/^[[noreturn]] PYBIND11_NOINLINE inline void pybind11_fail(const char *reason) { throw std::runtim/;"	f
pybind11_fail	src/pybind11/include/pybind11/common.h	/^[[noreturn]] PYBIND11_NOINLINE inline void pybind11_fail(const std::string &reason) { throw std:/;"	f	typeref:typename:[[noreturn]]PYBIND11_NOINLINE void
pybind11_get_dict	src/pybind11/include/pybind11/class_support.h	/^extern "C" inline PyObject *pybind11_get_dict(PyObject *self, void *) {$/;"	f	typeref:typename:PyObject *
pybind11_getbuffer	src/pybind11/include/pybind11/class_support.h	/^extern "C" inline int pybind11_getbuffer(PyObject *obj, Py_buffer *view, int flags) {$/;"	f	typeref:typename:int
pybind11_meta_getattro	src/pybind11/include/pybind11/class_support.h	/^extern "C" inline PyObject *pybind11_meta_getattro(PyObject *obj, PyObject *name) {$/;"	f	typeref:typename:PyObject *
pybind11_meta_setattro	src/pybind11/include/pybind11/class_support.h	/^extern "C" inline int pybind11_meta_setattro(PyObject* obj, PyObject* name, PyObject* value) {$/;"	f	typeref:typename:int
pybind11_object_dealloc	src/pybind11/include/pybind11/class_support.h	/^extern "C" inline void pybind11_object_dealloc(PyObject *self) {$/;"	f	typeref:typename:void
pybind11_object_init	src/pybind11/include/pybind11/class_support.h	/^extern "C" inline int pybind11_object_init(PyObject *self, PyObject *, PyObject *) {$/;"	f	typeref:typename:int
pybind11_object_new	src/pybind11/include/pybind11/class_support.h	/^extern "C" inline PyObject *pybind11_object_new(PyTypeObject *type, PyObject *, PyObject *) {$/;"	f	typeref:typename:PyObject *
pybind11_releasebuffer	src/pybind11/include/pybind11/class_support.h	/^extern "C" inline void pybind11_releasebuffer(PyObject *, Py_buffer *view) {$/;"	f	typeref:typename:void
pybind11_set_dict	src/pybind11/include/pybind11/class_support.h	/^extern "C" inline int pybind11_set_dict(PyObject *self, PyObject *new_dict, void *) {$/;"	f	typeref:typename:int
pybind11_static_get	src/pybind11/include/pybind11/class_support.h	/^extern "C" inline PyObject *pybind11_static_get(PyObject *self, PyObject * \/*ob*\/, PyObject *c/;"	f
pybind11_static_set	src/pybind11/include/pybind11/class_support.h	/^extern "C" inline int pybind11_static_set(PyObject *self, PyObject *obj, PyObject *value) {$/;"	f	typeref:typename:int
pybind11_traverse	src/pybind11/include/pybind11/class_support.h	/^extern "C" inline int pybind11_traverse(PyObject *self, visitproc visit, void *arg) {$/;"	f	typeref:typename:int
pygments_style	tools/genmsg/doc/conf.py	/^pygments_style = 'sphinx'$/;"	v
pyi1	src/pybind11/tests/test_embed/test_interpreter.cpp	/^        auto pyi1 = py::scoped_interpreter();$/;"	v	typeref:typename:auto
pyi2	src/pybind11/tests/test_embed/test_interpreter.cpp	/^        auto pyi2 = std::move(pyi1);$/;"	v	typeref:typename:auto
pyobject_caster	src/pybind11/include/pybind11/cast.h	/^struct pyobject_caster {$/;"	s
pyobject_caster	src/pybind11/include/pybind11/numpy.h	/^struct pyobject_caster<array_t<T, ExtraFlags>> {$/;"	s
pyobject_tag	src/pybind11/include/pybind11/pytypes.h	/^class pyobject_tag { };$/;"	c
pytest	src/pybind11/tests/pytest.ini	/^[pytest]$/;"	s
pytest_assertrepr_compare	src/pybind11/tests/conftest.py	/^def pytest_assertrepr_compare(op, left, right):$/;"	f
pytest_namespace	src/pybind11/tests/conftest.py	/^def pytest_namespace():$/;"	f
pytestmark	src/pybind11/tests/test_buffers.py	/^pytestmark = pytest.requires_numpy$/;"	v
pytestmark	src/pybind11/tests/test_eigen.py	/^pytestmark = pytest.requires_eigen_and_numpy$/;"	v
pytestmark	src/pybind11/tests/test_numpy_array.py	/^pytestmark = pytest.requires_numpy$/;"	v
pytestmark	src/pybind11/tests/test_numpy_dtypes.py	/^pytestmark = pytest.requires_numpy$/;"	v
pytestmark	src/pybind11/tests/test_numpy_vectorize.py	/^pytestmark = pytest.requires_numpy$/;"	v
qnxnto	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	typeref:typename:char const *
qnxnto	build_elka_data_collection/CMakeFiles/3.4.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	typeref:typename:char const *
qthelp	src/pybind11/docs/Makefile	/^qthelp:$/;"	t
qthelp	tools/genmsg/doc/Makefile	/^qthelp:$/;"	t
ran	src/pybind11/tests/test_embed/test_interpreter.cpp	/^    bool ran = false;$/;"	v	typeref:typename:bool
ranges	src/pybind11/tools/clang/cindex.py	/^    def ranges(self):$/;"	m	class:Diagnostic
raw_array	src/pybind11/include/pybind11/numpy.h	/^    static PyObject *raw_array(PyObject *ptr, int ExtraFlags = 0) {$/;"	f	class:array	typeref:typename:PyObject *
raw_array_t	src/pybind11/include/pybind11/numpy.h	/^    static PyObject *raw_array_t(PyObject *ptr) {$/;"	f	class:array_t	typeref:typename:PyObject *
raw_bool	src/pybind11/include/pybind11/pytypes.h	/^    static PyObject *raw_bool(PyObject *op) {$/;"	f	class:bool_	typeref:typename:PyObject *
raw_comment	src/pybind11/tools/clang/cindex.py	/^    def raw_comment(self):$/;"	m	class:Cursor
raw_dict	src/pybind11/include/pybind11/pytypes.h	/^    static PyObject *raw_dict(PyObject *op) {$/;"	f	class:dict	typeref:typename:PyObject *
raw_str	src/pybind11/include/pybind11/pytypes.h	/^    static PyObject *raw_str(PyObject *op) {$/;"	f	class:str	typeref:typename:PyObject *
rcv_id	src/elka_comm/common/elka.h	/^  dev_id_t snd_id, rcv_id;$/;"	m	struct:elka_msg_id_s	typeref:typename:dev_id_t
rcv_id	src/elka_comm/common/elka_comm.cpp	/^  dev_id_t snd_id, rcv_id;$/;"	m	struct:elka_msg_id_s	typeref:typename:dev_id_t	file:
read	src/pybind11/tools/clang/cindex.py	/^    def read(self, path):$/;"	m	class:Index
rebuild_cache	build_elka_data_collection/Makefile	/^rebuild_cache:$/;"	t
rebuild_cache	build_elka_data_collection/msg/Makefile	/^rebuild_cache:$/;"	t
rebuild_cache	build_elka_data_collection/src/Makefile	/^rebuild_cache:$/;"	t
rebuild_cache	build_elka_data_collection/src/elka_comm/common/Makefile	/^rebuild_cache:$/;"	t
rebuild_cache	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^rebuild_cache:$/;"	t
rebuild_cache	build_elka_data_collection/src/pybind11/Makefile	/^rebuild_cache:$/;"	t
rebuild_cache/fast	build_elka_data_collection/Makefile	/^rebuild_cache\/fast: rebuild_cache$/;"	t
rebuild_cache/fast	build_elka_data_collection/msg/Makefile	/^rebuild_cache\/fast: rebuild_cache$/;"	t
rebuild_cache/fast	build_elka_data_collection/src/Makefile	/^rebuild_cache\/fast: rebuild_cache$/;"	t
rebuild_cache/fast	build_elka_data_collection/src/elka_comm/common/Makefile	/^rebuild_cache\/fast: rebuild_cache$/;"	t
rebuild_cache/fast	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^rebuild_cache\/fast: rebuild_cache$/;"	t
rebuild_cache/fast	build_elka_data_collection/src/pybind11/Makefile	/^rebuild_cache\/fast: rebuild_cache$/;"	t
ref	src/pybind11/include/pybind11/eigen.h	/^    std::unique_ptr<Type> ref;$/;"	m	struct:type_caster	typeref:typename:std::unique_ptr<Type>
ref	src/pybind11/tests/object.h	/^    ref() : m_ptr(nullptr) { print_default_created(this); track_default_created((ref_tag*) this)/;"	f	class:ref
ref	src/pybind11/tests/object.h	/^    ref(T *ptr) : m_ptr(ptr) {$/;"	f	class:ref
ref	src/pybind11/tests/object.h	/^    ref(const ref &r) : m_ptr(r.m_ptr) {$/;"	f	class:ref
ref	src/pybind11/tests/object.h	/^    ref(ref &&r) : m_ptr(r.m_ptr) {$/;"	f	class:ref
ref	src/pybind11/tests/object.h	/^template <typename T> class ref {$/;"	c
ref	src/pybind11/tests/test_eigen.cpp	/^        Eigen::Ref<Eigen::MatrixXd> ref() { return mat; }$/;"	f	class:__anon898d062d0102::ReturnTester	typeref:typename:Eigen::Ref<Eigen::MatrixXd>	file:
ref	src/pybind11/tests/test_eigen.py	/^    ref = np.array([[ 0.,  3,  0,  0,  0, 11],$/;"	v
refConst	src/pybind11/tests/test_eigen.cpp	/^        Eigen::Ref<const Eigen::MatrixXd> refConst() { return mat; }$/;"	f	class:__anon898d062d0102::ReturnTester	typeref:typename:Eigen::Ref<const Eigen::MatrixXd>	file:
ref_count	src/pybind11/include/pybind11/pytypes.h	/^    int ref_count() const { return static_cast<int>(Py_REFCNT(derived().ptr())); }$/;"	f	class:object_api	typeref:typename:int
ref_tag	src/pybind11/tests/object.h	/^class ref_tag {};$/;"	c
reference	src/pybind11/include/pybind11/common.h	/^    reference,$/;"	e	enum:uint8_t
reference	src/pybind11/include/pybind11/pytypes.h	/^    using reference = const handle;$/;"	t	class:iterator	typeref:typename:const handle
reference	src/pybind11/include/pybind11/pytypes.h	/^    using reference = const handle;$/;"	t	class:sequence_fast_readonly	typeref:typename:const handle
reference	src/pybind11/include/pybind11/pytypes.h	/^    using reference = const value_type;$/;"	t	class:dict_readonly	typeref:typename:const value_type
reference	src/pybind11/include/pybind11/pytypes.h	/^    using reference = sequence_accessor;$/;"	t	class:sequence_slow_readwrite	typeref:typename:sequence_accessor
reference	src/pybind11/include/pybind11/pytypes.h	/^    using reference = typename Policy::reference;$/;"	t	class:generic_iterator	typeref:typename:Policy::reference
reference_internal	src/pybind11/include/pybind11/common.h	/^    reference_internal$/;"	e	enum:uint8_t
referenced	src/pybind11/tools/clang/cindex.py	/^    def referenced(self):$/;"	m	class:Cursor
register	src/pybind11/tools/clang/cindex.py	/^    def register(item):$/;"	f	function:register_functions	file:
register	src/pybind11/tools/clang/cindex.py	/^    def register(value, name):$/;"	m	class:TokenKind
register	tools/genmsg/src/genmsg/msg_loader.py	/^    def register(self, full_msg_type, msgspec):$/;"	m	class:MsgContext
register_dtype	src/pybind11/include/pybind11/numpy.h	/^    static void register_dtype(const std::initializer_list<field_descriptor>& fields) {$/;"	f	struct:npy_format_descriptor	typeref:typename:void
register_enumerations	src/pybind11/tools/clang/cindex.py	/^def register_enumerations():$/;"	f
register_exception	src/pybind11/include/pybind11/pybind11.h	/^exception<CppException> &register_exception(handle scope,$/;"	f	typeref:typename:exception<CppException> &
register_exception_translator	src/pybind11/include/pybind11/pybind11.h	/^void register_exception_translator(ExceptionTranslator&& translator) {$/;"	f	typeref:typename:void
register_function	src/pybind11/tools/clang/cindex.py	/^def register_function(lib, item, ignore_errors):$/;"	f
register_functions	src/pybind11/tools/clang/cindex.py	/^def register_functions(lib, ignore_errors):$/;"	f
register_instance	src/pybind11/include/pybind11/class_support.h	/^inline void register_instance(instance *self, void *valptr, const type_info *tinfo) {$/;"	f	typeref:typename:void
register_instance_impl	src/pybind11/include/pybind11/class_support.h	/^inline bool register_instance_impl(void *ptr, instance *self) {$/;"	f	typeref:typename:bool
register_structured_dtype	src/pybind11/include/pybind11/numpy.h	/^inline PYBIND11_NOINLINE void register_structured_dtype($/;"	f	typeref:typename:PYBIND11_NOINLINE void
registered_dtypes	src/pybind11/include/pybind11/numpy.h	/^    std::unordered_map<std::type_index, numpy_type_info> registered_dtypes;$/;"	m	struct:numpy_internals	typeref:typename:std::unordered_map<std::type_index,numpy_type_info>
registered_exception_translators	src/pybind11/include/pybind11/common.h	/^    std::forward_list<void (*) (std::exception_ptr)> registered_exception_translators;$/;"	m	struct:internals	typeref:typename:std::forward_list<void (*)(std::exception_ptr)>
registered_instances	src/pybind11/include/pybind11/common.h	/^    std::unordered_multimap<const void *, instance*> registered_instances; \/\/ void * -> instan/;"	m	struct:internals	typeref:typename:std::unordered_multimap<const void *,instance * >
registered_types_cpp	src/pybind11/include/pybind11/common.h	/^    type_map<void *> registered_types_cpp; \/\/ std::type_index -> type_info$/;"	m	struct:internals	typeref:typename:type_map<void * >
registered_types_py	src/pybind11/include/pybind11/common.h	/^    std::unordered_map<PyTypeObject *, std::vector<type_info *>> registered_types_py; \/\/ PyTyp/;"	m	struct:internals	typeref:typename:std::unordered_map<PyTypeObject *,std::vector<type_info * >>
reinterpret_borrow	src/pybind11/include/pybind11/pytypes.h	/^template <typename T> T reinterpret_borrow(handle h) { return {h, object::borrowed_t{}}; }$/;"	f	typeref:typename:T
reinterpret_steal	src/pybind11/include/pybind11/pytypes.h	/^template <typename T> T reinterpret_steal(handle h) { return {h, object::stolen_t{}}; }$/;"	f	typeref:typename:T
release	src/pybind11/docs/conf.py	/^release = '2.2.dev0'$/;"	v
release	src/pybind11/include/pybind11/pybind11.h	/^    bool release = true;$/;"	m	class:gil_scoped_acquire	typeref:typename:bool
release	src/pybind11/include/pybind11/pytypes.h	/^    handle release() {$/;"	f	class:object	typeref:typename:handle
release	tools/genmsg/doc/conf.py	/^release = version$/;"	v
release_ptr	src/pybind11/tests/test_smart_ptr.cpp	/^    T* release_ptr() { return impl.release(); }$/;"	f	class:CustomUniquePtr	typeref:typename:T *	file:
remove_all_extents_t	src/pybind11/include/pybind11/numpy.h	/^template <typename T> using remove_all_extents_t = typename array_info<T>::type;$/;"	t	typeref:typename:array_info<T>::type
remove_class	src/pybind11/include/pybind11/common.h	/^template <typename C, typename R, typename... A> struct remove_class<R (C::*)(A...) const> { typ/;"	s
remove_class	src/pybind11/include/pybind11/common.h	/^template <typename C, typename R, typename... A> struct remove_class<R (C::*)(A...)> { typedef R/;"	s
remove_class	src/pybind11/include/pybind11/common.h	/^template <typename T> struct remove_class { };$/;"	s
remove_cv_t	src/pybind11/include/pybind11/common.h	/^template <typename T> using remove_cv_t = typename std::remove_cv<T>::type;$/;"	t	typeref:typename:std::remove_cv<T>::type
remove_msg	src/elka_comm/common/elka_comm.cpp	/^uint8_t elka::CommPort::remove_msg($/;"	f	class:elka::CommPort	typeref:typename:uint8_t
remove_msg	src/elka_comm/common/elka_comm.cpp	/^uint8_t elka::SerialBuffer::remove_msg($/;"	f	class:elka::SerialBuffer	typeref:typename:uint8_t
remove_prop	src/elka_comm/common/elka_comm.cpp	/^void elka::DeviceRoute::remove_prop(dev_prop_t prop) {$/;"	f	class:elka::DeviceRoute	typeref:typename:void
remove_reference_t	src/pybind11/include/pybind11/common.h	/^template <typename T> using remove_reference_t = typename std::remove_reference<T>::type;$/;"	t	typeref:typename:std::remove_reference<T>::type
rep	src/pybind11/include/pybind11/chrono.h	/^    typedef typename type::rep rep;$/;"	t	class:duration_caster	typeref:typename:type::rep
reparse	src/pybind11/tools/clang/cindex.py	/^    def reparse(self, unsaved_files=None, options=0):$/;"	m	class:TranslationUnit
report_status	src/pybind11/tests/test_call_policies.cpp	/^    static const char *report_status() { return enabled ? "guarded" : "unguarded"; }$/;"	f	struct:CustomGuard	typeref:typename:const char *	file:
report_status	src/pybind11/tests/test_call_policies.cpp	/^    static const char *report_status() { return enabled ? "guarded" : "unguarded"; }$/;"	f	struct:DependentGuard	typeref:typename:const char *	file:
repr	src/pybind11/include/pybind11/pytypes.h	/^inline str repr(handle h) {$/;"	f	typeref:typename:str
request	src/pybind11/include/pybind11/pytypes.h	/^    buffer_info request(bool writable = false) {$/;"	f	class:buffer
require_size	src/pybind11/include/pybind11/stl.h	/^    bool require_size(enable_if_t<R, size_t> size) {$/;"	f	struct:array_caster	typeref:typename:bool
requires_col_major	src/pybind11/include/pybind11/eigen.h	/^    static constexpr bool requires_col_major = !dynamic_stride && !vector && (row_major ? outer_/;"	m	struct:EigenProps	typeref:typename:constexpr bool
requires_row_major	src/pybind11/include/pybind11/eigen.h	/^    static constexpr bool requires_row_major = !dynamic_stride && !vector && (row_major ? inner_/;"	m	struct:EigenProps	typeref:typename:constexpr bool
reserve_maybe	src/pybind11/include/pybind11/stl.h	/^    void reserve_maybe(sequence s, Type *) { value.reserve(s.size()); }$/;"	f	struct:list_caster	typeref:typename:void
reserve_maybe	src/pybind11/include/pybind11/stl.h	/^    void reserve_maybe(sequence, void *) { }$/;"	f	struct:list_caster	typeref:typename:void
reset_ref	src/pybind11/tests/test_eigen.cpp	/^template <typename M> void reset_ref(M &x) {$/;"	f	typeref:typename:void
reset_refs	src/pybind11/tests/test_eigen.cpp	/^void reset_refs() {$/;"	f	typeref:typename:void
resize	src/pybind11/include/pybind11/numpy.h	/^    void resize(ShapeContainer new_shape, bool refcheck = true) {$/;"	f	class:array	typeref:typename:void
resolve_type	tools/genmsg/src/genmsg/msgs.py	/^def resolve_type(msg_type, package_context):$/;"	f
resolved_type	tools/genmsg/scripts/genmsg_check_deps.py	/^    resolved_type = resolve_type(bare_type, package_context)$/;"	v
resource_name	tools/genmsg/src/genmsg/names.py	/^def resource_name(res_pkg_name, name, my_pkg=None):$/;"	f
resource_name_base	tools/genmsg/src/genmsg/names.py	/^def resource_name_base(name):$/;"	f
resource_name_package	tools/genmsg/src/genmsg/names.py	/^def resource_name_package(name):$/;"	f
restore	src/pybind11/include/pybind11/common.h	/^    void restore() { PyErr_Restore(type, value, trace); type = value = trace = nullptr; }$/;"	f	class:error_already_set	typeref:typename:void
result	build_elka_data_collection/inc/uORB/topics/elka_msg_ack.h	/^	uint8_t result;$/;"	m	struct:elka_msg_ack_s	typeref:typename:uint8_t
result	build_elka_data_collection/topics_temporary_header/elka_msg_ack.h	/^	uint8_t result;$/;"	m	struct:elka_msg_ack_s	typeref:typename:uint8_t
result	src/pybind11/include/pybind11/pytypes.h	/^        T * result = static_cast<T *>(PyCapsule_GetPointer(m_ptr, name));$/;"	m	class:capsule	typeref:typename:T *
result_type	src/pybind11/tools/clang/cindex.py	/^    def result_type(self):$/;"	m	class:Cursor
results	src/pybind11/tools/clang/cindex.py	/^    def results(self):$/;"	m	class:CodeCompletionResults
resume_port	src/elka_comm/gnd_station/elka_devices.cpp	/^bool elka::GroundPort::resume_port() {$/;"	f	class:elka::GroundPort	typeref:typename:bool
resume_port	src/elka_comm/posix/elka_devices.cpp	/^bool elka::PX4Port::resume_port() {$/;"	f	class:elka::PX4Port	typeref:typename:bool
resume_port	src/elka_comm/qurt/snapdragon_uart_devices.cpp	/^bool uart::UARTPort::resume_port() {$/;"	f	class:uart::UARTPort	typeref:typename:bool
ret	src/pybind11/include/pybind11/cast.h	/^    T ret = std::move(detail::load_type<T>(obj).operator T&());$/;"	v	typeref:typename:T
returnChild	src/pybind11/tests/test_call_policies.cpp	/^    Child *returnChild() { return new Child(); }$/;"	f	class:Parent	typeref:typename:Child *	file:
returnNullChild	src/pybind11/tests/test_call_policies.cpp	/^    Child *returnNullChild() { return nullptr; }$/;"	f	class:Parent	typeref:typename:Child *	file:
return_bytes	src/pybind11/tests/test_constants_and_functions.cpp	/^py::bytes return_bytes() {$/;"	f	typeref:typename:py::bytes
return_value_policy_override	src/pybind11/include/pybind11/cast.h	/^template <typename Return, typename SFINAE = void> struct return_value_policy_override {$/;"	s
return_value_policy_override	src/pybind11/include/pybind11/eigen.h	/^struct return_value_policy_override<Return, enable_if_t<is_eigen_dense_map<Return>::value>> {$/;"	s
retval_type	src/pybind11/include/pybind11/functional.h	/^    using retval_type = conditional_t<std::is_same<Return, void>::value, void_type, Return>;$/;"	t	struct:type_caster	typeref:typename:conditional_t<std::is_same<Return,void>::value,void_type,Return>
reversed	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    Sequence reversed() const {$/;"	f	class:Sequence	typeref:typename:Sequence	file:
ro_value	src/pybind11/tests/test_methods_and_attributes.cpp	/^    double ro_value = 1.25;$/;"	m	class:UnregisteredBase	typeref:typename:double	file:
root	tools/genmsg/doc/conf.py	/^    root = ElementTree(None, os.path.join('..', 'package.xml'))$/;"	v
roundtrip	src/pybind11/tests/test_callbacks.cpp	/^std::function<int(int)> roundtrip(std::function<int(int)> f, bool expect_none = false) {$/;"	f	typeref:typename:std::function<int (int)>
route_cmp	src/elka_comm/common/elka_comm.cpp	/^int8_t elka::CommPort::route_cmp($/;"	f	class:elka::CommPort	typeref:typename:int8_t
route_cmp	src/elka_comm/common/elka_comm.cpp	/^int8_t elka::DeviceRoute::route_cmp(std::vector<dev_id_t> *r1,$/;"	f	class:elka::DeviceRoute	typeref:typename:int8_t
rowMajor	src/pybind11/include/pybind11/eigen.h	/^    static constexpr bool rowMajor = Type::IsRowMajor;$/;"	m	struct:type_caster	typeref:typename:constexpr bool
row_major	src/pybind11/include/pybind11/eigen.h	/^        row_major = Type::IsRowMajor,$/;"	m	struct:EigenProps	typeref:typename:constexpr bool
rows	src/pybind11/include/pybind11/eigen.h	/^        rows = Type::RowsAtCompileTime,$/;"	m	struct:EigenProps	typeref:typename:constexpr EigenIndex
rows	src/pybind11/include/pybind11/eigen.h	/^    EigenIndex rows = 0, cols = 0;$/;"	m	struct:EigenConformable	typeref:typename:EigenIndex
rows	src/pybind11/tests/test_buffers.cpp	/^    ssize_t rows() const { return m_rows; }$/;"	f	class:Matrix	typeref:typename:ssize_t	file:
rseed	src/elka_comm/common/elka.cpp	/^static uint32_t rseed;$/;"	v	typeref:typename:uint32_t	file:
run	serial/python/ftdi_uart.py	/^    def run(self):$/;"	m	class:FtdiUartThread
run	serial/python/parse.py	/^    def run(self):$/;"	m	class:Parse
run	src/pybind11/include/pybind11/numpy.h	/^    template <size_t... Index, size_t... VIndex, size_t... BIndex> object run($/;"	f	struct:vectorize_helper	typeref:typename:object
run	src/pybind11/tests/test_virtual_functions.cpp	/^    int run(int value) override {$/;"	f	class:PyExampleVirt	typeref:typename:int	file:
run	src/pybind11/tests/test_virtual_functions.cpp	/^    virtual int run(int value) {$/;"	f	class:ExampleVirt	typeref:typename:int	file:
run	src/pybind11/tests/test_virtual_functions.py	/^        def run(self, value):$/;"	m	class:test_override.ExtendedExampleVirt
run	src/pybind11/tools/mkdoc.py	/^    def run(self):$/;"	m	class:ExtractionThread
runExampleVirt	src/pybind11/tests/test_virtual_functions.cpp	/^int runExampleVirt(ExampleVirt *ex, int value) {$/;"	f	typeref:typename:int
runExampleVirtBool	src/pybind11/tests/test_virtual_functions.cpp	/^bool runExampleVirtBool(ExampleVirt* ex) {$/;"	f	typeref:typename:bool
runExampleVirtVirtual	src/pybind11/tests/test_virtual_functions.cpp	/^void runExampleVirtVirtual(ExampleVirt *ex) {$/;"	f	typeref:typename:void
run_bool	src/pybind11/tests/test_virtual_functions.cpp	/^    bool run_bool() override {$/;"	f	class:PyExampleVirt	typeref:typename:bool	file:
run_bool	src/pybind11/tests/test_virtual_functions.py	/^        def run_bool(self):$/;"	m	class:test_override.ExtendedExampleVirt
runtime_error	src/pybind11/tests/test_embed/test_interpreter.cpp	/^    throw std::runtime_error("C++ Error");$/;"	m	class:std	typeref:typename:throw
rvp	src/pybind11/tests/test_eigen.cpp	/^    using rvp = py::return_value_policy;$/;"	t	function:__anon898d062d0102	typeref:typename:py::return_value_policy	file:
rw_value	src/pybind11/tests/test_methods_and_attributes.cpp	/^    int rw_value = 42;$/;"	m	class:UnregisteredBase	typeref:typename:int	file:
same_type	src/pybind11/include/pybind11/common.h	/^inline bool same_type(const std::type_info &lhs, const std::type_info &rhs) { return lhs == rhs;/;"	f	typeref:typename:bool
same_type	src/pybind11/include/pybind11/common.h	/^inline bool same_type(const std::type_info &lhs, const std::type_info &rhs) {$/;"	f	typeref:typename:bool
sanitize_name	src/pybind11/tools/mkdoc.py	/^def sanitize_name(name):$/;"	f
satisfies_all_of	src/pybind11/include/pybind11/common.h	/^template <class T, template<class> class... Predicates> using satisfies_all_of = all_of<Predicat/;"	t	typeref:typename:all_of<Predicates<T>...>
satisfies_any_of	src/pybind11/include/pybind11/common.h	/^template <class T, template<class> class... Predicates> using satisfies_any_of = any_of<Predicat/;"	t	typeref:typename:any_of<Predicates<T>...>
satisfies_none_of	src/pybind11/include/pybind11/common.h	/^template <class T, template<class> class... Predicates> using satisfies_none_of = none_of<Predic/;"	t	typeref:typename:none_of<Predicates<T>...>
save	src/pybind11/tools/clang/cindex.py	/^    def save(self, filename):$/;"	m	class:TranslationUnit
save	src/pybind11/tools/libsize.py	/^save = sys.argv[2]$/;"	v
say_something	src/pybind11/tests/test_virtual_functions.cpp	/^    std::string say_something(unsigned times) override { PYBIND11_OVERLOAD(std::string, A_Repeat/;"	f	class:PyA_Repeat	typeref:typename:std::string	file:
say_something	src/pybind11/tests/test_virtual_functions.cpp	/^    std::string say_something(unsigned times) override { PYBIND11_OVERLOAD(std::string, B_Repeat/;"	f	class:PyB_Repeat	typeref:typename:std::string	file:
say_something	src/pybind11/tests/test_virtual_functions.cpp	/^    std::string say_something(unsigned times) override { PYBIND11_OVERLOAD(std::string, Base, sa/;"	f	class:PyA_Tpl	typeref:typename:std::string	file:
say_something	src/pybind11/tests/test_virtual_functions.cpp	/^    std::string say_something(unsigned times) override { PYBIND11_OVERLOAD(std::string, C_Repeat/;"	f	class:PyC_Repeat	typeref:typename:std::string	file:
say_something	src/pybind11/tests/test_virtual_functions.cpp	/^    std::string say_something(unsigned times) override { PYBIND11_OVERLOAD(std::string, D_Repeat/;"	f	class:PyD_Repeat	typeref:typename:std::string	file:
say_something	src/pybind11/tests/test_virtual_functions.py	/^        def say_something(self, times):$/;"	m	class:test_inheriting_repeat.BT
say_something	src/pybind11/tests/test_virtual_functions.py	/^        def say_something(self, times):$/;"	m	class:test_inheriting_repeat.DT
say_something	src/pybind11/tests/test_virtual_functions.py	/^        def say_something(self, times):$/;"	m	class:test_inheriting_repeat.DT2
scope	src/pybind11/include/pybind11/attr.h	/^    handle scope;$/;"	m	struct:function_record	typeref:typename:handle
scope	src/pybind11/include/pybind11/attr.h	/^    handle scope;$/;"	m	struct:type_record	typeref:typename:handle
scope	src/pybind11/include/pybind11/attr.h	/^struct scope { handle value; scope(const handle &s) : value(s) { } };$/;"	f	struct:scope
scope	src/pybind11/include/pybind11/attr.h	/^struct scope { handle value; scope(const handle &s) : value(s) { } };$/;"	s
scoped_interpreter	src/pybind11/include/pybind11/embed.h	/^    scoped_interpreter(bool init_signal_handlers = true) {$/;"	f	class:scoped_interpreter
scoped_interpreter	src/pybind11/include/pybind11/embed.h	/^    scoped_interpreter(scoped_interpreter &&other) noexcept { other.is_valid = false; }$/;"	f	class:scoped_interpreter
scoped_interpreter	src/pybind11/include/pybind11/embed.h	/^class scoped_interpreter {$/;"	c
sdk_dir	src/pybind11/tools/mkdoc.py	/^        sdk_dir = dev_path + 'Platforms\/MacOSX.platform\/Developer\/SDKs'$/;"	v
select_indices	src/pybind11/include/pybind11/common.h	/^template <bool... Bs> using select_indices = typename select_indices_impl<index_sequence<>, 0, B/;"	t	typeref:typename:select_indices_impl<index_sequence<>,0,Bs...>::type
select_indices_impl	src/pybind11/include/pybind11/common.h	/^template <size_t... IPrev, size_t I, bool B, bool... Bs> struct select_indices_impl<index_sequen/;"	s
select_indices_impl	src/pybind11/include/pybind11/common.h	/^template <typename ISeq, size_t, bool...> struct select_indices_impl { using type = ISeq; };$/;"	s
self	src/pybind11/include/pybind11/operators.h	/^static const self_t self = self_t();$/;"	v	typeref:typename:const self_t
self1	src/pybind11/tests/test_methods_and_attributes.cpp	/^    ExampleMandA self1() { return *this; }                            \/\/ return by value$/;"	f	class:ExampleMandA	typeref:typename:ExampleMandA	file:
self2	src/pybind11/tests/test_methods_and_attributes.cpp	/^    ExampleMandA &self2() { return *this; }                           \/\/ return by reference$/;"	f	class:ExampleMandA	typeref:typename:ExampleMandA &	file:
self3	src/pybind11/tests/test_methods_and_attributes.cpp	/^    const ExampleMandA &self3() { return *this; }                     \/\/ return by const refer/;"	f	class:ExampleMandA	typeref:typename:const ExampleMandA &	file:
self4	src/pybind11/tests/test_methods_and_attributes.cpp	/^    ExampleMandA *self4() { return this; }                            \/\/ return by pointer$/;"	f	class:ExampleMandA	typeref:typename:ExampleMandA *	file:
self5	src/pybind11/tests/test_methods_and_attributes.cpp	/^    const ExampleMandA *self5() { return this; }                      \/\/ return by const point/;"	f	class:ExampleMandA	typeref:typename:const ExampleMandA *	file:
self_t	src/pybind11/include/pybind11/operators.h	/^struct self_t { };$/;"	s
semantic_parent	src/pybind11/tools/clang/cindex.py	/^    def semantic_parent(self):$/;"	m	class:Cursor
send_msg	src/elka_comm/gnd_station/elka_devices.cpp	/^uint8_t elka::GroundPort::send_msg(elka_msg_ack_s &elka_msg) {$/;"	f	class:elka::GroundPort	typeref:typename:uint8_t
send_msg	src/elka_comm/gnd_station/elka_devices.cpp	/^uint8_t elka::GroundPort::send_msg(elka_msg_s &elka_msg) {$/;"	f	class:elka::GroundPort	typeref:typename:uint8_t
send_msg	src/elka_comm/posix/elka_devices.cpp	/^uint8_t elka::PX4Port::send_msg(elka_msg_ack_s &elka_msg) {$/;"	f	class:elka::PX4Port	typeref:typename:uint8_t
send_msg	src/elka_comm/posix/elka_devices.cpp	/^uint8_t elka::PX4Port::send_msg(elka_msg_s &elka_msg) {$/;"	f	class:elka::PX4Port	typeref:typename:uint8_t
send_msg	src/elka_comm/qurt/snapdragon_uart_devices.cpp	/^uint8_t uart::UARTPort::send_msg(elka_msg_ack_s &elka_msg) {$/;"	f	class:uart::UARTPort	typeref:typename:uint8_t
send_msg	src/elka_comm/qurt/snapdragon_uart_devices.cpp	/^uint8_t uart::UARTPort::send_msg(elka_msg_s &elka_msg) {$/;"	f	class:uart::UARTPort	typeref:typename:uint8_t
sentinel	src/pybind11/include/pybind11/pytypes.h	/^    static iterator sentinel() { return {}; }$/;"	f	class:iterator	typeref:typename:iterator
sequence	src/pybind11/include/pybind11/pytypes.h	/^class sequence : public object {$/;"	c
sequence_accessor	src/pybind11/include/pybind11/pytypes.h	/^using sequence_accessor = accessor<accessor_policies::sequence_item>;$/;"	t	typeref:typename:accessor<accessor_policies::sequence_item>
sequence_fast_readonly	src/pybind11/include/pybind11/pytypes.h	/^    sequence_fast_readonly(handle obj, ssize_t n) : ptr(PySequence_Fast_ITEMS(obj.ptr()) + n) { /;"	f	class:sequence_fast_readonly
sequence_fast_readonly	src/pybind11/include/pybind11/pytypes.h	/^class sequence_fast_readonly {$/;"	c
sequence_item	src/pybind11/include/pybind11/pytypes.h	/^struct sequence_item {$/;"	s
sequence_iterator	src/pybind11/include/pybind11/pytypes.h	/^using sequence_iterator = generic_iterator<iterator_policies::sequence_slow_readwrite>;$/;"	t	typeref:typename:generic_iterator<iterator_policies::sequence_slow_readwrite>
sequence_slow_readwrite	src/pybind11/include/pybind11/pytypes.h	/^    sequence_slow_readwrite(handle obj, ssize_t index) : obj(obj), index(index) { }$/;"	f	class:sequence_slow_readwrite
sequence_slow_readwrite	src/pybind11/include/pybind11/pytypes.h	/^class sequence_slow_readwrite {$/;"	c
sequences_and_iterators	src/pybind11/tests/test_sequences_and_iterators.cpp	/^test_initializer sequences_and_iterators([](py::module &pm) {$/;"	v	typeref:typename:test_initializer
serial_close	src/elka_comm/qurt/basic_uart.cpp	/^int serial_close(int fd, int port_num) {$/;"	f	typeref:typename:int
serial_open	src/elka_comm/qurt/basic_uart.cpp	/^int serial_open(int port_num, elka::SerialBuffer *tx_sb,$/;"	f	typeref:typename:int
serial_path	src/elka_comm/qurt/basic_uart.cpp	/^const char *serial_path[MAX_UART_DEV_NUM] = {$/;"	v	typeref:typename:const char * []
serial_read	src/elka_comm/qurt/basic_uart.cpp	/^int serial_read(int fd, int port_num, uint8_t *rx_buffer) {$/;"	f	typeref:typename:int
serial_read_write	src/elka_comm/qurt/basic_uart.cpp	/^int serial_read_write(int fd, int port_num,$/;"	f	typeref:typename:int
serial_write	src/elka_comm/qurt/basic_uart.cpp	/^int serial_write(int fd, int port_num,$/;"	f	typeref:typename:int
serialize_elka_msg	src/elka_comm/common/elka.cpp	/^void serialize_elka_msg(uint8_t *ret, elka_msg_s &elka_msg) {$/;"	f	typeref:typename:void
serialize_elka_msg_ack	src/elka_comm/common/elka.cpp	/^void serialize_elka_msg_ack(uint8_t *ret, elka_msg_ack_s &elka_msg) {$/;"	f	typeref:typename:void
set	src/pybind11/include/pybind11/pytypes.h	/^    set() : object(PySet_New(nullptr), stolen_t{}) {$/;"	f	class:set	typeref:typename:PYBIND11_OBJECT_CVT (set,object,PySet_Check,PySet_New)
set	src/pybind11/include/pybind11/pytypes.h	/^    static void set(handle obj, const char *key, handle val) { setattr(obj, key, val); }$/;"	f	struct:str_attr	typeref:typename:void
set	src/pybind11/include/pybind11/pytypes.h	/^    static void set(handle obj, handle key, handle val) { setattr(obj, key, val); }$/;"	f	struct:obj_attr	typeref:typename:void
set	src/pybind11/include/pybind11/pytypes.h	/^    static void set(handle obj, handle key, handle val) {$/;"	f	struct:generic_item	typeref:typename:void
set	src/pybind11/include/pybind11/pytypes.h	/^    static void set(handle obj, size_t index, handle val) {$/;"	f	struct:list_item	typeref:typename:void
set	src/pybind11/include/pybind11/pytypes.h	/^    static void set(handle obj, size_t index, handle val) {$/;"	f	struct:sequence_item	typeref:typename:void
set	src/pybind11/include/pybind11/pytypes.h	/^    static void set(handle obj, size_t index, handle val) {$/;"	f	struct:tuple_item	typeref:typename:void
set	src/pybind11/include/pybind11/pytypes.h	/^class set : public object {$/;"	c
set	src/pybind11/tests/test_methods_and_attributes.cpp	/^    void set(int v) { value = v; }$/;"	f	struct:TestProperties	typeref:typename:void	file:
set	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    void set(std::string key, std::string val) {$/;"	f	class:StringMap	typeref:typename:void	file:
set1	src/pybind11/tests/test_methods_and_attributes.cpp	/^    void set1(int v) { v1.value = v; }$/;"	f	struct:TestPropRVP	typeref:typename:void	file:
set2	src/pybind11/tests/test_methods_and_attributes.cpp	/^    void set2(int v) { v2.value = v; }$/;"	f	struct:TestPropRVP	typeref:typename:void	file:
setExtra1	src/pybind11/tests/test_pickling.cpp	/^    void setExtra1(int extra1) { m_extra1 = extra1; }$/;"	f	class:Pickleable	typeref:typename:void	file:
setExtra2	src/pybind11/tests/test_pickling.cpp	/^    void setExtra2(int extra2) { m_extra2 = extra2; }$/;"	f	class:Pickleable	typeref:typename:void	file:
setValue	src/pybind11/tests/test_docstring_options.cpp	/^    void setValue(int v) { value = v; }$/;"	f	struct:DocstringTestFoo	typeref:typename:void	file:
set_blocking	src/elka_comm/qurt/basic_uart.cpp	/^void set_blocking(int fd, int should_block) {$/;"	f	typeref:typename:void
set_caster	src/pybind11/include/pybind11/stl.h	/^template <typename Type, typename Key> struct set_caster {$/;"	s
set_compatibility_check	src/pybind11/tools/clang/cindex.py	/^    def set_compatibility_check(check_status):$/;"	m	class:Config
set_depends	tools/genmsg/src/genmsg/msg_loader.py	/^    def set_depends(self, full_msg_type, dependencies):$/;"	m	class:MsgContext
set_dev_msg_part	src/elka_comm/common/elka_comm.cpp	/^uint16_t elka::CommPort::set_dev_msg_part($/;"	f	class:elka::CommPort	typeref:typename:uint16_t
set_dev_props_msg	src/elka_comm/common/elka_comm.cpp	/^void elka::CommPort::set_dev_props_msg($/;"	f	class:elka::CommPort	typeref:typename:void
set_dev_state_msg	src/elka_comm/gnd_station/elka_devices.cpp	/^uint8_t elka::GroundPort::set_dev_state_msg($/;"	f	class:elka::GroundPort	typeref:typename:uint8_t
set_dev_state_msg	src/elka_comm/posix/elka_devices.cpp	/^uint8_t elka::PX4Port::set_dev_state_msg($/;"	f	class:elka::PX4Port	typeref:typename:uint8_t
set_dev_state_msg	src/elka_comm/qurt/snapdragon_uart_devices.cpp	/^uint8_t uart::UARTPort::set_dev_state_msg($/;"	f	class:uart::UARTPort	typeref:typename:uint8_t
set_file	tools/genmsg/src/genmsg/msg_loader.py	/^    def set_file(self, full_msg_type, file_path):$/;"	m	class:MsgContext
set_holder_constructed	src/pybind11/include/pybind11/cast.h	/^    void set_holder_constructed() {$/;"	f	struct:value_and_holder	typeref:typename:void
set_int	src/pybind11/tests/test_methods_and_attributes.cpp	/^    void set_int(int v) { rw_value = v; }$/;"	f	class:UnregisteredBase	typeref:typename:void	file:
set_interface_attribs	src/elka_comm/qurt/basic_uart.cpp	/^int set_interface_attribs(int fd, int baud, int parity) {$/;"	f	typeref:typename:int
set_library_file	src/pybind11/tools/clang/cindex.py	/^    def set_library_file(filename):$/;"	m	class:Config
set_library_path	src/pybind11/tools/clang/cindex.py	/^    def set_library_path(path):$/;"	m	class:Config
set_operator_new	src/pybind11/include/pybind11/pybind11.h	/^template <typename> void set_operator_new(...) { }$/;"	f	typeref:typename:void
set_operator_new	src/pybind11/include/pybind11/pybind11.h	/^void set_operator_new(type_record *r) { r->operator_new = &T::operator new; }$/;"	f	typeref:typename:> void
set_route_changed_msg	src/elka_comm/common/elka_comm.cpp	/^void elka::CommPort::set_route_changed_msg($/;"	f	class:elka::CommPort	typeref:typename:void
set_route_table_msg	src/elka_comm/common/elka_comm.cpp	/^void elka::CommPort::set_route_table_msg($/;"	f	class:elka::CommPort	typeref:typename:void
set_shared_data	src/pybind11/include/pybind11/common.h	/^inline PYBIND11_NOINLINE void *set_shared_data(const std::string& name, void *data) {$/;"	f	typeref:typename:PYBIND11_NOINLINE void *
set_sock_opts	src/elka_comm/gnd_station/inet_comm.cpp	/^void set_sock_opts(int fd, uint8_t sock_side) {$/;"	f	typeref:typename:void
set_sock_opts	src/elka_comm/posix/inet_comm.cpp	/^void set_sock_opts(int fd, uint8_t sock_side) {$/;"	f	typeref:typename:void
set_state_msg	src/elka_comm/common/elka.h	/^inline void set_state_msg(elka_msg_s &elka_snd, uint8_t state,$/;"	f	typeref:typename:void
set_value	src/pybind11/tests/test_buffers.cpp	/^    void set_value(int32_t v) { *value = v; }$/;"	f	class:ConstPTMFBuffer	typeref:typename:void	file:
setattr	src/pybind11/include/pybind11/pytypes.h	/^inline void setattr(handle obj, const char *name, handle value) {$/;"	f	typeref:typename:void
setattr	src/pybind11/include/pybind11/pytypes.h	/^inline void setattr(handle obj, handle name, handle value) {$/;"	f	typeref:typename:void
setup	src/pybind11/docs/conf.py	/^def setup(app):$/;"	f
severity	src/pybind11/tools/clang/cindex.py	/^    def severity(self):$/;"	m	class:Diagnostic
shape	src/pybind11/include/pybind11/buffer_info.h	/^    std::vector<ssize_t> shape;   \/\/ Shape of the tensor (1 entry per dimension)$/;"	m	struct:buffer_info	typeref:typename:std::vector<ssize_t>
shape	src/pybind11/include/pybind11/numpy.h	/^    const ssize_t* shape() const {$/;"	f	class:array	typeref:typename:const ssize_t *
shape	src/pybind11/include/pybind11/numpy.h	/^    ssize_t shape(ssize_t dim) const { return shape_[(size_t) dim]; }$/;"	f	class:unchecked_reference	typeref:typename:ssize_t
shape	src/pybind11/include/pybind11/numpy.h	/^    ssize_t shape(ssize_t dim) const {$/;"	f	class:array	typeref:typename:ssize_t
shape_	src/pybind11/include/pybind11/numpy.h	/^            shape_, strides_;$/;"	m	class:unchecked_reference	typeref:typename:conditional_t<Dynamic,const ssize_t *,std::array<ssize_t,(size_t)Dims>>
shared	src/pybind11/tests/test_smart_ptr.cpp	/^    std::shared_ptr<A> shared = std::make_shared<A>();$/;"	m	struct:SharedPtrRef	typeref:typename:std::shared_ptr<A>	file:
shared	src/pybind11/tests/test_smart_ptr.cpp	/^    std::shared_ptr<B> shared = std::make_shared<B>();$/;"	m	struct:SharedFromThisRef	typeref:typename:std::shared_ptr<B>	file:
shared_data	src/pybind11/include/pybind11/common.h	/^    std::unordered_map<std::string, void *> shared_data; \/\/ Custom data to be shared across ex/;"	m	struct:internals	typeref:typename:std::unordered_map<std::string,void * >
show_function_signatures	src/pybind11/include/pybind11/options.h	/^        bool show_function_signatures = true;      \/\/< Include auto-generated function signatu/;"	m	struct:options::state	typeref:typename:bool
show_function_signatures	src/pybind11/include/pybind11/options.h	/^    static bool show_function_signatures() { return global_state().show_function_signatures; }$/;"	f	class:options	typeref:typename:bool
show_user_defined_docstrings	src/pybind11/include/pybind11/options.h	/^        bool show_user_defined_docstrings = true;  \/\/< Include user-supplied texts in docstrin/;"	m	struct:options::state	typeref:typename:bool
show_user_defined_docstrings	src/pybind11/include/pybind11/options.h	/^    static bool show_user_defined_docstrings() { return global_state().show_user_defined_docstri/;"	f	class:options	typeref:typename:bool
sibling	src/pybind11/include/pybind11/attr.h	/^    handle sibling;$/;"	m	struct:function_record	typeref:typename:handle
sibling	src/pybind11/include/pybind11/attr.h	/^struct sibling { handle value; sibling(const handle &value) : value(value.ptr()) { } };$/;"	f	struct:sibling
sibling	src/pybind11/include/pybind11/attr.h	/^struct sibling { handle value; sibling(const handle &value) : value(value.ptr()) { } };$/;"	s
signature	src/pybind11/include/pybind11/attr.h	/^    char *signature = nullptr;$/;"	m	struct:function_record	typeref:typename:char *
simple_ancestors	src/pybind11/include/pybind11/cast.h	/^    bool simple_ancestors : 1;$/;"	m	struct:type_info	typeref:typename:bool:1
simple_collector	src/pybind11/include/pybind11/cast.h	/^    explicit simple_collector(Ts &&...values)$/;"	f	class:simple_collector
simple_collector	src/pybind11/include/pybind11/cast.h	/^class simple_collector {$/;"	c
simple_dtype	src/pybind11/tests/test_numpy_dtypes.py	/^def simple_dtype():$/;"	f
simple_dtype_fmt	src/pybind11/tests/test_numpy_dtypes.py	/^def simple_dtype_fmt():$/;"	f
simple_holder_constructed	src/pybind11/include/pybind11/common.h	/^    bool simple_holder_constructed : 1;$/;"	m	struct:instance	typeref:typename:bool:1
simple_layout	src/pybind11/include/pybind11/common.h	/^    bool simple_layout : 1;$/;"	m	struct:instance	typeref:typename:bool:1
simple_type	src/pybind11/include/pybind11/cast.h	/^    bool simple_type : 1;$/;"	m	struct:type_info	typeref:typename:bool:1
simple_value_holder	src/pybind11/include/pybind11/common.h	/^        void *simple_value_holder[1 + instance_simple_holder_in_ptrs()];$/;"	m	union:instance::__anon7b367e7c010a	typeref:typename:void * []
singlehtml	src/pybind11/docs/Makefile	/^singlehtml:$/;"	t
singlehtml	tools/genmsg/doc/Makefile	/^singlehtml:$/;"	t
size	src/pybind11/docs/benchmark.py	/^        size = os.stat('test.so').st_size$/;"	v
size	src/pybind11/include/pybind11/buffer_info.h	/^    ssize_t size = 0;             \/\/ Total number of entries$/;"	m	struct:buffer_info	typeref:typename:ssize_t
size	src/pybind11/include/pybind11/cast.h	/^    size_t size() { return tinfo.size(); }$/;"	f	struct:values_and_holders	typeref:typename:size_t
size	src/pybind11/include/pybind11/cast.h	/^    static constexpr auto size = sizeof...(Ts);$/;"	m	class:tuple_caster	typeref:typename:constexpr auto
size	src/pybind11/include/pybind11/eigen.h	/^        size = Type::SizeAtCompileTime;$/;"	m	struct:EigenProps	typeref:typename:constexpr EigenIndex
size	src/pybind11/include/pybind11/numpy.h	/^    enable_if_t<Dyn, ssize_t> size() const {$/;"	f	class:unchecked_reference	typeref:typename:enable_if_t<Dyn,ssize_t>
size	src/pybind11/include/pybind11/numpy.h	/^    ssize_t size() const {$/;"	f	class:array	typeref:typename:ssize_t
size	src/pybind11/include/pybind11/numpy.h	/^    ssize_t size;$/;"	m	struct:field_descriptor	typeref:typename:ssize_t
size	src/pybind11/include/pybind11/pytypes.h	/^    size_t size() const { return (size_t) PyDict_Size(m_ptr); }$/;"	f	class:dict	typeref:typename:size_t
size	src/pybind11/include/pybind11/pytypes.h	/^    size_t size() const { return (size_t) PyList_Size(m_ptr); }$/;"	f	class:list	typeref:typename:size_t
size	src/pybind11/include/pybind11/pytypes.h	/^    size_t size() const { return (size_t) PySequence_Size(m_ptr); }$/;"	f	class:sequence
size	src/pybind11/include/pybind11/pytypes.h	/^    size_t size() const { return (size_t) PySet_Size(m_ptr); }$/;"	f	class:set	typeref:typename:size_t
size	src/pybind11/include/pybind11/pytypes.h	/^    size_t size() const { return (size_t) PyTuple_Size(m_ptr); }$/;"	f	class:tuple	typeref:typename:size_t
size	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    size_t size() const { return m_size; }$/;"	f	class:Sequence	typeref:typename:size_t	file:
size	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    size_t size() const {$/;"	f	class:StringMap	typeref:typename:size_t	file:
size_in_ptrs	src/pybind11/include/pybind11/common.h	/^inline static constexpr size_t size_in_ptrs(size_t s) { return 1 + ((s - 1) >> log2(sizeof(void /;"	f	typeref:typename:size_t
size_t	src/pybind11/include/pybind11/common.h	/^using size_t  = std::size_t;$/;"	t	typeref:typename:std::size_t
size_type	src/pybind11/include/pybind11/numpy.h	/^    using size_type = container_type::size_type;$/;"	t	class:common_iterator	typeref:typename:container_type::size_type
size_type	src/pybind11/include/pybind11/stl_bind.h	/^    using size_type = typename Vector::size_type;$/;"	t	function:vector_if_insertion_operator	typeref:typename:Vector::size_type
sizeof_field_type	tools/px_generate_uorb_topic_helper.py	/^def sizeof_field_type(field):$/;"	f
slice	src/pybind11/include/pybind11/pytypes.h	/^    slice(ssize_t start_, ssize_t stop_, ssize_t step_) {$/;"	f	class:slice	typeref:typename:PYBIND11_OBJECT_DEFAULT (slice,object,PySlice_Check)
slice	src/pybind11/include/pybind11/pytypes.h	/^class slice : public object {$/;"	c
smart_ptr	src/pybind11/tests/test_smart_ptr.cpp	/^test_initializer smart_ptr([](py::module &m) {$/;"	v	typeref:typename:test_initializer
smart_ptr_and_references	src/pybind11/tests/test_smart_ptr.cpp	/^test_initializer smart_ptr_and_references([](py::module &pm) {$/;"	v	typeref:typename:test_initializer
snapdragon_uart_dev_loop	src/elka_comm/qurt/snapdragon_uart.cpp	/^int snapdragon_uart_dev_loop(int argc, char **argv) {$/;"	f	typeref:typename:int
snapdragon_uart_main	src/elka_comm/qurt/snapdragon_uart.cpp	/^int snapdragon_uart_main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
snd_id	src/elka_comm/common/elka.h	/^  dev_id_t snd_id, rcv_id;$/;"	m	struct:elka_msg_id_s	typeref:typename:dev_id_t
snd_id	src/elka_comm/common/elka_comm.cpp	/^  dev_id_t snd_id, rcv_id;$/;"	m	struct:elka_msg_id_s	typeref:typename:dev_id_t	file:
snd_params	src/elka_comm/common/elka.h	/^  uint8_t snd_params, type, length;$/;"	m	struct:elka_msg_id_s	typeref:typename:uint8_t
snd_params	src/elka_comm/common/elka_comm.cpp	/^  uint8_t snd_params, type, length;$/;"	m	struct:elka_msg_id_s	typeref:typename:uint8_t	file:
snd_params_s	src/elka_comm/common/elka.h	/^struct snd_params_s {$/;"	s
snd_params_s	src/elka_comm/common/elka_comm.cpp	/^struct snd_params_s {$/;"	s	file:
socket_close	src/elka_comm/gnd_station/inet_comm.cpp	/^int socket_close(int fd, uint8_t sock_side) {$/;"	f	typeref:typename:int
socket_close	src/elka_comm/posix/inet_comm.cpp	/^int socket_close(int fd, uint8_t sock_side) {$/;"	f	typeref:typename:int
socket_loop	src/elka_comm/gnd_station/inet_comm.cpp	/^int socket_loop($/;"	f	typeref:typename:int
socket_loop	src/elka_comm/posix/inet_comm.cpp	/^int socket_loop($/;"	f	typeref:typename:int
socket_open	src/elka_comm/gnd_station/inet_comm.cpp	/^int socket_open($/;"	f	typeref:typename:int
socket_open	src/elka_comm/posix/inet_comm.cpp	/^int socket_open($/;"	f	typeref:typename:int
socket_proc_start	src/elka_comm/gnd_station/inet_comm.cpp	/^int socket_proc_start($/;"	f	typeref:typename:int
socket_proc_start	src/elka_comm/posix/inet_comm.cpp	/^int socket_proc_start($/;"	f	typeref:typename:int
socket_read	src/elka_comm/gnd_station/inet_comm.cpp	/^int socket_read($/;"	f	typeref:typename:int
socket_read	src/elka_comm/posix/inet_comm.cpp	/^int socket_read($/;"	f	typeref:typename:int
socket_read_elka_msg	src/elka_comm/gnd_station/inet_comm.cpp	/^int socket_read_elka_msg($/;"	f	typeref:typename:int
socket_read_elka_msg	src/elka_comm/posix/inet_comm.cpp	/^int socket_read_elka_msg($/;"	f	typeref:typename:int
socket_write	src/elka_comm/gnd_station/inet_comm.cpp	/^int socket_write($/;"	f	typeref:typename:int
socket_write	src/elka_comm/posix/inet_comm.cpp	/^int socket_write($/;"	f	typeref:typename:int
socket_write_elka_msg	src/elka_comm/gnd_station/inet_comm.cpp	/^int socket_write_elka_msg($/;"	f	typeref:typename:int
socket_write_elka_msg	src/elka_comm/posix/inet_comm.cpp	/^int socket_write_elka_msg($/;"	f	typeref:typename:int
source_suffix	src/pybind11/docs/conf.py	/^source_suffix = '.rst'$/;"	v
source_suffix	tools/genmsg/doc/conf.py	/^source_suffix = '.rst'$/;"	v
spec	tools/genmsg/scripts/genmsg_check_deps.py	/^    spec = load_msg_from_file(msg_context, msg_file, full_type_name)$/;"	v
spec	tools/genmsg/scripts/genmsg_check_deps.py	/^    spec = load_srv_from_file(msg_context, msg_file, full_type_name)$/;"	v
species	src/pybind11/tests/test_class.cpp	/^        std::string species() const { return m_species; }$/;"	f	class:TEST_SUBMODULE::Pet	typeref:typename:std::string	file:
spelling	src/pybind11/tools/clang/cindex.py	/^    def spelling(self):$/;"	m	class:CompletionChunk
spelling	src/pybind11/tools/clang/cindex.py	/^    def spelling(self):$/;"	m	class:Cursor
spelling	src/pybind11/tools/clang/cindex.py	/^    def spelling(self):$/;"	m	class:Diagnostic
spelling	src/pybind11/tools/clang/cindex.py	/^    def spelling(self):$/;"	m	class:Token
spelling	src/pybind11/tools/clang/cindex.py	/^    def spelling(self):$/;"	m	class:TranslationUnit
spelling	src/pybind11/tools/clang/cindex.py	/^    def spelling(self):$/;"	m	class:Type
spelling	src/pybind11/tools/clang/cindex.py	/^    def spelling(self):$/;"	m	class:TypeKind
squeeze	src/pybind11/include/pybind11/numpy.h	/^    array squeeze() {$/;"	f	class:array	typeref:typename:array
src/elka_comm/common/CMakeFiles/modules__elka_comm__common.dir/rule	build_elka_data_collection/src/elka_comm/common/Makefile	/^src\/elka_comm\/common\/CMakeFiles\/modules__elka_comm__common.dir\/rule:$/;"	t
src/elka_comm/gnd_station/CMakeFiles/modules__elka_comm__gnd_station.dir/rule	build_elka_data_collection/src/elka_comm/gnd_station/Makefile	/^src\/elka_comm\/gnd_station\/CMakeFiles\/modules__elka_comm__gnd_station.dir\/rule:$/;"	t
src_and_type	src/pybind11/include/pybind11/cast.h	/^    PYBIND11_NOINLINE static std::pair<const void *, const type_info *> src_and_type($/;"	f	class:type_caster_generic	typeref:typename:PYBIND11_NOINLINE std::pair<const void *,const type_info * >
src_and_type	src/pybind11/include/pybind11/cast.h	/^    static std::pair<const void *, const type_info *> src_and_type(const itype *src) {$/;"	f	class:type_caster_base	typeref:typename:std::pair<const void *,const type_info * >
srv_template_map	tools/gencpp/scripts/gen_cpp.py	/^srv_template_map = { 'srv.h.template':'@NAME@.h' }$/;"	v
ss_t	src/pybind11/include/pybind11/chrono.h	/^        using ss_t = duration<int, std::ratio<1>>;$/;"	t	function:duration_caster::cast	typeref:typename:duration<int,std::ratio<1>>
ssize_t	src/pybind11/include/pybind11/common.h	/^using ssize_t = Py_ssize_t;$/;"	t	typeref:typename:Py_ssize_t
start	src/pybind11/tools/clang/cindex.py	/^    def start(self):$/;"	m	class:SourceRange
start_elka_thread	serial/python/gui.py	/^    def start_elka_thread(self):$/;"	m	class:MainWindow
start_parse_thread	serial/python/gui.py	/^    def start_parse_thread(self):$/;"	m	class:MainWindow
start_port	src/elka_comm/gnd_station/elka_devices.cpp	/^bool elka::GroundPort::start_port() {$/;"	f	class:elka::GroundPort	typeref:typename:bool
start_port	src/elka_comm/posix/elka_devices.cpp	/^bool elka::PX4Port::start_port() {$/;"	f	class:elka::PX4Port	typeref:typename:bool
start_port	src/elka_comm/qurt/snapdragon_uart_devices.cpp	/^bool uart::UARTPort::start_port() {$/;"	f	class:uart::UARTPort	typeref:typename:bool
state	src/pybind11/include/pybind11/options.h	/^    struct state {$/;"	s	class:options
state	src/pybind11/include/pybind11/pybind11.h	/^    PyGILState_STATE state;$/;"	m	class:gil_scoped_acquire	typeref:typename:PyGILState_STATE
state	src/pybind11/include/pybind11/pybind11.h	/^    PyThreadState *state;$/;"	m	class:gil_scoped_release	typeref:typename:PyThreadState *
state	src/pybind11/include/pybind11/pybind11.h	/^    typedef detail::iterator_state<Iterator, Sentinel, false, Policy> state;$/;"	t	function:make_iterator	typeref:typename:detail::iterator_state<Iterator,Sentinel,false,Policy>
state	src/pybind11/include/pybind11/pybind11.h	/^    typedef detail::iterator_state<Iterator, Sentinel, true, Policy> state;$/;"	t	function:make_key_iterator	typeref:typename:detail::iterator_state<Iterator,Sentinel,true,Policy>
state	src/pybind11/tests/test_virtual_functions.cpp	/^    int state;$/;"	m	class:ExampleVirt	typeref:typename:int	file:
static_func	src/pybind11/tests/test_multiple_inheritance.cpp	/^    static std::string static_func() { return "VanillaStaticMix1"; }$/;"	f	struct:VanillaStaticMix1	typeref:typename:std::string	file:
static_func	src/pybind11/tests/test_multiple_inheritance.cpp	/^    static std::string static_func() { return "VanillaStaticMix2"; }$/;"	f	struct:VanillaStaticMix2	typeref:typename:std::string	file:
static_func1	src/pybind11/tests/test_multiple_inheritance.cpp	/^    static std::string static_func1() { return "WithStatic1"; };$/;"	f	struct:WithStatic1	typeref:typename:std::string	file:
static_func2	src/pybind11/tests/test_multiple_inheritance.cpp	/^    static std::string static_func2() { return "WithStatic2"; };$/;"	f	struct:WithStatic2	typeref:typename:std::string	file:
static_get	src/pybind11/tests/test_methods_and_attributes.cpp	/^    static int static_get() { return static_value; }$/;"	f	struct:TestProperties	typeref:typename:int	file:
static_property_type	src/pybind11/include/pybind11/common.h	/^    PyTypeObject *static_property_type;$/;"	m	struct:internals	typeref:typename:PyTypeObject *
static_set	src/pybind11/tests/test_methods_and_attributes.cpp	/^    static void static_set(int v) { static_value = v; }$/;"	f	struct:TestProperties	typeref:typename:void	file:
static_value	src/pybind11/tests/test_methods_and_attributes.cpp	/^    static int static_value;$/;"	m	struct:TestProperties	typeref:typename:int	file:
static_value	src/pybind11/tests/test_methods_and_attributes.cpp	/^    static int static_value;$/;"	m	struct:TestPropertiesOverride	typeref:typename:int	file:
static_value	src/pybind11/tests/test_methods_and_attributes.cpp	/^int TestProperties::static_value = 1;$/;"	m	class:TestProperties	typeref:typename:int
static_value	src/pybind11/tests/test_methods_and_attributes.cpp	/^int TestPropertiesOverride::static_value = 99;$/;"	m	class:TestPropertiesOverride	typeref:typename:int
static_value	src/pybind11/tests/test_multiple_inheritance.cpp	/^    static int static_value;$/;"	m	struct:VanillaStaticMix1	typeref:typename:int	file:
static_value	src/pybind11/tests/test_multiple_inheritance.cpp	/^    static int static_value;$/;"	m	struct:VanillaStaticMix2	typeref:typename:int	file:
static_value	src/pybind11/tests/test_multiple_inheritance.cpp	/^int VanillaStaticMix1::static_value = 12;$/;"	m	class:VanillaStaticMix1	typeref:typename:int
static_value	src/pybind11/tests/test_multiple_inheritance.cpp	/^int VanillaStaticMix2::static_value = 12;$/;"	m	class:VanillaStaticMix2	typeref:typename:int
static_value1	src/pybind11/tests/test_multiple_inheritance.cpp	/^    static int static_value1;$/;"	m	struct:WithStatic1	typeref:typename:int	file:
static_value1	src/pybind11/tests/test_multiple_inheritance.cpp	/^int WithStatic1::static_value1 = 1;$/;"	m	class:WithStatic1	typeref:typename:int
static_value2	src/pybind11/tests/test_multiple_inheritance.cpp	/^    static int static_value2;$/;"	m	struct:WithStatic2	typeref:typename:int	file:
static_value2	src/pybind11/tests/test_multiple_inheritance.cpp	/^int WithStatic2::static_value2 = 2;$/;"	m	class:WithStatic2	typeref:typename:int
std	src/pybind11/tests/test_stl.cpp	/^namespace std {$/;"	n	file:
std::shared_ptr	src/pybind11/docs/advanced/smart_ptrs.rst	/^std::shared_ptr$/;"	s	chapter:Smart pointers
std::unique_ptr	src/pybind11/docs/advanced/smart_ptrs.rst	/^std::unique_ptr$/;"	s	chapter:Smart pointers
stderr	src/pybind11/tests/conftest.py	/^    def stderr(self):$/;"	m	class:Capture
stl_binder_map	src/pybind11/tests/test_stl_binders.cpp	/^test_initializer stl_binder_map([](py::module &m) {$/;"	v	typeref:typename:test_initializer
stl_binder_noncopyable	src/pybind11/tests/test_stl_binders.cpp	/^test_initializer stl_binder_noncopyable([](py::module &m) {$/;"	v	typeref:typename:test_initializer
stl_binder_vector	src/pybind11/tests/test_stl_binders.cpp	/^test_initializer stl_binder_vector([](py::module &m) {$/;"	v	typeref:typename:test_initializer
stolen_t	src/pybind11/include/pybind11/pytypes.h	/^    struct stolen_t { };$/;"	s	class:object
stop_elka_dev	src/elka_comm/posix/elka_manager.cpp	/^int elka::Manager::stop_elka_dev(int dev_num) {$/;"	f	class:elka::Manager	typeref:typename:int
stop_elka_thread	serial/python/gui.py	/^    def stop_elka_thread(self):$/;"	m	class:MainWindow
stop_parse_thread	serial/python/gui.py	/^    def stop_parse_thread(self):$/;"	m	class:MainWindow
stop_port	src/elka_comm/gnd_station/elka_devices.cpp	/^bool elka::GroundPort::stop_port() {$/;"	f	class:elka::GroundPort	typeref:typename:bool
stop_port	src/elka_comm/posix/elka_devices.cpp	/^bool elka::PX4Port::stop_port() {$/;"	f	class:elka::PX4Port	typeref:typename:bool
stop_port	src/elka_comm/qurt/snapdragon_uart_devices.cpp	/^bool uart::UARTPort::stop_port() {$/;"	f	class:uart::UARTPort	typeref:typename:bool
stop_uart_dev	src/elka_comm/qurt/snapdragon_uart_manager.cpp	/^void uart::Manager::stop_uart_dev(uint8_t port_num) {$/;"	f	class:uart::Manager	typeref:typename:void
storage_class	src/pybind11/tools/clang/cindex.py	/^    def storage_class(self):$/;"	m	class:Cursor
str	src/pybind11/include/pybind11/pytypes.h	/^    explicit str(handle h) : object(raw_str(h.ptr()), stolen_t{}) { }$/;"	f	class:str
str	src/pybind11/include/pybind11/pytypes.h	/^    str(const char *c = "")$/;"	f	class:str
str	src/pybind11/include/pybind11/pytypes.h	/^    str(const char *c, size_t n)$/;"	f	class:str	typeref:typename:PYBIND11_OBJECT_CVT (str,object,detail::PyUnicode_Check_Permissive,raw_str)
str	src/pybind11/include/pybind11/pytypes.h	/^    str(const std::string &s) : str(s.data(), s.size()) { }$/;"	f	class:str
str	src/pybind11/include/pybind11/pytypes.h	/^class str : public object {$/;"	c
str	src/pybind11/include/pybind11/pytypes.h	/^inline str::str(const bytes& b) {$/;"	f	class:str
str	src/pybind11/include/pybind11/pytypes.h	/^pybind11::str object_api<D>::str() const { return pybind11::str(derived()); }$/;"	f	class:object_api	typeref:typename:pybind11::str
str1	src/pybind11/tests/test_virtual_functions.cpp	/^    const std::string str1{"default1"}, str2{"default2"};$/;"	m	class:ExampleVirt	typeref:typename:const std::string	file:
str2	src/pybind11/tests/test_virtual_functions.cpp	/^    const std::string str1{"default1"}, str2{"default2"};$/;"	m	class:ExampleVirt	typeref:typename:const std::string	file:
str_attr	src/pybind11/include/pybind11/pytypes.h	/^struct str_attr {$/;"	s
str_attr_accessor	src/pybind11/include/pybind11/pytypes.h	/^using str_attr_accessor = accessor<accessor_policies::str_attr>;$/;"	t	typeref:typename:accessor<accessor_policies::str_attr>
str_caster	src/pybind11/include/pybind11/cast.h	/^    StringCaster str_caster;$/;"	m	struct:type_caster	typeref:typename:StringCaster
str_len	src/pybind11/include/pybind11/cast.h	/^        size_t str_len = value.size();$/;"	m	struct:type_caster	typeref:typename:size_t
str_ref	src/pybind11/tests/test_virtual_functions.cpp	/^        std::string &str_ref() override { return _tmp = str_ref_helper(); }$/;"	f	class:TEST_SUBMODULE::PyOverrideTest	typeref:typename:std::string &	file:
str_ref	src/pybind11/tests/test_virtual_functions.cpp	/^        virtual std::string &str_ref() { return v; }$/;"	f	class:TEST_SUBMODULE::OverrideTest	typeref:typename:std::string &	file:
str_ref_helper	src/pybind11/tests/test_virtual_functions.cpp	/^        std::string str_ref_helper() { PYBIND11_OVERLOAD(std::string, OverrideTest, str_ref); }$/;"	f	class:TEST_SUBMODULE::PyOverrideTest	typeref:typename:std::string	file:
str_value	src/pybind11/tests/test_virtual_functions.cpp	/^        std::string str_value() override { PYBIND11_OVERLOAD(std::string, OverrideTest, str_valu/;"	f	class:TEST_SUBMODULE::PyOverrideTest	typeref:typename:std::string	file:
str_value	src/pybind11/tests/test_virtual_functions.cpp	/^        virtual std::string str_value() { return v; }$/;"	f	class:TEST_SUBMODULE::OverrideTest	typeref:typename:std::string	file:
stride	src/pybind11/include/pybind11/eigen.h	/^    EigenDStride stride{0, 0};      \/\/ Only valid if negativestrides is false!$/;"	m	struct:EigenConformable	typeref:typename:EigenDStride
stride_compatible	src/pybind11/include/pybind11/eigen.h	/^    template <typename props> bool stride_compatible() const {$/;"	f	struct:EigenConformable	typeref:typename:bool
stride_ctor_default	src/pybind11/include/pybind11/eigen.h	/^    template <typename S> using stride_ctor_default = bool_constant<$/;"	t	struct:type_caster	typeref:typename:bool_constant<S::InnerStrideAtCompileTime!=Eigen::Dynamic && S::OuterStrideAtCompileTime!=Eigen::Dynamic && std::is_default_constructible<S>::value>
stride_ctor_dual	src/pybind11/include/pybind11/eigen.h	/^    template <typename S> using stride_ctor_dual = bool_constant<$/;"	t	struct:type_caster	typeref:typename:bool_constant<!stride_ctor_default<S>::value && std::is_constructible<S,EigenIndex,EigenIndex>::value>
stride_ctor_inner	src/pybind11/include/pybind11/eigen.h	/^    template <typename S> using stride_ctor_inner = bool_constant<$/;"	t	struct:type_caster
stride_ctor_outer	src/pybind11/include/pybind11/eigen.h	/^    template <typename S> using stride_ctor_outer = bool_constant<$/;"	t	struct:type_caster
strides	src/pybind11/include/pybind11/buffer_info.h	/^    std::vector<ssize_t> strides; \/\/ Number of entries between adjacent entries (for each per /;"	m	struct:buffer_info	typeref:typename:std::vector<ssize_t>
strides	src/pybind11/include/pybind11/numpy.h	/^    const ssize_t* strides() const {$/;"	f	class:array	typeref:typename:const ssize_t *
strides	src/pybind11/include/pybind11/numpy.h	/^    ssize_t *strides;$/;"	m	struct:PyArray_Proxy	typeref:typename:ssize_t *
strides	src/pybind11/include/pybind11/numpy.h	/^    ssize_t strides(ssize_t dim) const {$/;"	f	class:array	typeref:typename:ssize_t
strides_	src/pybind11/include/pybind11/numpy.h	/^            shape_, strides_;$/;"	m	class:unchecked_reference	typeref:typename:conditional_t<Dynamic,const ssize_t *,std::array<ssize_t,(size_t)Dims>>
string	src/pybind11/tools/clang/cindex.py	/^    def string(self):$/;"	m	class:CodeCompletionResult
string	src/pybind11/tools/clang/cindex.py	/^    def string(self):$/;"	m	class:CompletionChunk
stringList	src/pybind11/tests/test_opaque_types.cpp	/^    StringList stringList;$/;"	m	class:ClassWithSTLVecProperty	typeref:typename:StringList	file:
string_caster	src/pybind11/include/pybind11/cast.h	/^template <typename StringType, bool IsView = false> struct string_caster {$/;"	s
strip_padding	src/pybind11/include/pybind11/numpy.h	/^    dtype strip_padding(ssize_t itemsize) {$/;"	f	class:dtype	typeref:typename:dtype
sub	src/pybind11/tests/test_pytypes.py	/^        sub = SubTestObject()$/;"	v	class:test_accessors.TestObject
sub_test_MsgSpec	tools/genmsg/test/test_genmsg_msgs.py	/^    def sub_test_MsgSpec(types, names, constants, text, full_name, has_header):$/;"	f	function:test_MsgSpec	file:
sub_tstate	src/pybind11/tests/test_embed/test_interpreter.cpp	/^    auto sub_tstate = Py_NewInterpreter();$/;"	v	typeref:typename:auto
subarray	src/pybind11/include/pybind11/numpy.h	/^    char *subarray;$/;"	m	struct:PyArrayDescr_Proxy	typeref:typename:char *
subcaster	src/pybind11/include/pybind11/cast.h	/^    caster_t subcaster;$/;"	m	class:type_caster	typeref:typename:caster_t
subcaster_cast_op_type	src/pybind11/include/pybind11/cast.h	/^    using subcaster_cast_op_type = typename caster_t::template cast_op_type<type>;$/;"	t	class:type_caster	typeref:typename:caster_t::template cast_op_type<type>
subcasters	src/pybind11/include/pybind11/cast.h	/^    Tuple<make_caster<Ts>...> subcasters;$/;"	m	class:tuple_caster	typeref:typename:Tuple<make_caster<Ts>...>
submodule	Makefile	/^.PHONY submodule:$/;"	t
submodule	Makefile	/^submodule: $/;"	t
submodule_clean	build_elka_data_collection/Makefile	/^submodule_clean: cmake_check_build_system$/;"	t
submodule_clean/fast	build_elka_data_collection/Makefile	/^submodule_clean\/fast:$/;"	t
submodule_func	src/pybind11/tests/test_modules.cpp	/^std::string submodule_func() {$/;"	f	typeref:typename:std::string
sum	src/pybind11/tests/test_methods_and_attributes.cpp	/^    double sum() const { return rw_value + ro_value; }$/;"	f	class:RegisteredDerived	typeref:typename:double	file:
suppress	src/pybind11/tests/conftest.py	/^def suppress(exception):$/;"	f
surface11	src/pybind11/docs/pybind11_vs_boost_python1.svg	/^<g id="surface11">$/;"	i
surface18	src/pybind11/docs/pybind11_vs_boost_python2.svg	/^<g id="surface18">$/;"	i
sv1	src/pybind11/tests/test_methods_and_attributes.cpp	/^    static SimpleValue sv1;$/;"	m	struct:TestPropRVP	typeref:typename:SimpleValue	file:
sv2	src/pybind11/tests/test_methods_and_attributes.cpp	/^    static SimpleValue sv2;$/;"	m	struct:TestPropRVP	typeref:typename:SimpleValue	file:
switch_pos_t	inc/uORB/uORB.h	/^typedef uint8_t switch_pos_t;$/;"	t	typeref:typename:uint8_t
sysroot_dir	src/pybind11/tools/mkdoc.py	/^            sysroot_dir = os.path.join(sdk_dir, next(os.walk(sdk_dir))[1][0])$/;"	v
take_ownership	src/pybind11/include/pybind11/common.h	/^    take_ownership,$/;"	e	enum:uint8_t
takes_allocator	tools/gencpp/src/gencpp/__init__.py	/^def takes_allocator(type):$/;"	f
temp	src/pybind11/include/pybind11/pytypes.h	/^        object temp = *this;$/;"	m	class:str	typeref:typename:object
templates_path	src/pybind11/docs/conf.py	/^templates_path = ['.templates']$/;"	v
templates_path	tools/genmsg/doc/conf.py	/^templates_path = ['_templates']$/;"	v
test_Constant	tools/genmsg/test/test_genmsg_msgs.py	/^def test_Constant():$/;"	f
test_Field	tools/genmsg/test/test_genmsg_msgs.py	/^def test_Field():$/;"	f
test_MsgContext	tools/genmsg/test/test_genmsg_msg_loader.py	/^def test_MsgContext():$/;"	f
test_MsgSpec	tools/genmsg/test/test_genmsg_msgs.py	/^def test_MsgSpec():$/;"	f
test_SrvSpec	tools/genmsg/test/test_genmsg_srvs.py	/^def test_SrvSpec():$/;"	f
test__convert_constant_value	tools/genmsg/test/test_genmsg_msg_loader.py	/^def test__convert_constant_value():$/;"	f
test__load_constant_line	tools/genmsg/test/test_genmsg_msg_loader.py	/^def test__load_constant_line():$/;"	f
test__load_field_line	tools/genmsg/test/test_genmsg_msg_loader.py	/^def test__load_field_line():$/;"	f
test_accepts_none	src/pybind11/tests/test_methods_and_attributes.py	/^def test_accepts_none(msg):$/;"	f
test_accessors	src/pybind11/tests/test_pytypes.py	/^def test_accessors():$/;"	f
test_alias_delay_initialization1	src/pybind11/tests/test_virtual_functions.py	/^def test_alias_delay_initialization1(capture):$/;"	f
test_alias_delay_initialization2	src/pybind11/tests/test_virtual_functions.py	/^def test_alias_delay_initialization2(capture):$/;"	f
test_alive_gc	src/pybind11/tests/test_call_policies.py	/^def test_alive_gc(capture):$/;"	f
test_alive_gc_derived	src/pybind11/tests/test_call_policies.py	/^def test_alive_gc_derived(capture):$/;"	f
test_alive_gc_multi_derived	src/pybind11/tests/test_call_policies.py	/^def test_alive_gc_multi_derived(capture):$/;"	f
test_arg_and_kwargs	src/pybind11/tests/test_kwargs_and_defaults.py	/^def test_arg_and_kwargs():$/;"	f
test_array	src/pybind11/tests/test_stl.py	/^def test_array(doc):$/;"	f
test_array_array	src/pybind11/tests/test_numpy_dtypes.py	/^def test_array_array():$/;"	f
test_array_attributes	src/pybind11/tests/test_numpy_array.py	/^def test_array_attributes():$/;"	f
test_array_collapse	src/pybind11/tests/test_numpy_vectorize.py	/^def test_array_collapse():$/;"	f
test_array_constructors	src/pybind11/tests/test_numpy_dtypes.py	/^def test_array_constructors():$/;"	f
test_array_create_and_resize	src/pybind11/tests/test_numpy_array.py	/^def test_array_create_and_resize(msg):$/;"	f
test_array_ctors	src/pybind11/tests/test_numpy_dtypes.cpp	/^py::array_t<int32_t, 0> test_array_ctors(int i) {$/;"	f	typeref:typename:py::array_t<int32_t,0>
test_array_failure	src/pybind11/tests/test_numpy_array.py	/^def test_array_failure():$/;"	f
test_array_resize	src/pybind11/tests/test_numpy_array.py	/^def test_array_resize(msg):$/;"	f
test_array_unchecked_dyn_dims	src/pybind11/tests/test_numpy_array.py	/^def test_array_unchecked_dyn_dims(msg):$/;"	f
test_array_unchecked_fixed_dims	src/pybind11/tests/test_numpy_array.py	/^def test_array_unchecked_fixed_dims(msg):$/;"	f
test_at	src/pybind11/tests/test_numpy_array.py	/^def test_at(arr):$/;"	f
test_at_fail	src/pybind11/tests/test_numpy_array.py	/^def test_at_fail(arr, dim):$/;"	f
test_automatic_upcasting	src/pybind11/tests/test_class.py	/^def test_automatic_upcasting():$/;"	f
test_bad_arg_default	src/pybind11/tests/test_methods_and_attributes.py	/^def test_bad_arg_default(msg):$/;"	f
test_bare_msg_type	tools/genmsg/test/test_genmsg_msgs.py	/^def test_bare_msg_type():$/;"	f
test_binary_operators	src/pybind11/tests/test_enum.py	/^def test_binary_operators():$/;"	f
test_both_ref_mutators	src/pybind11/tests/test_eigen.py	/^def test_both_ref_mutators():$/;"	f
test_bound_method_callback	src/pybind11/tests/test_callbacks.py	/^def test_bound_method_callback():$/;"	f
test_bounds_check	src/pybind11/tests/test_numpy_array.py	/^def test_bounds_check(arr):$/;"	f
test_builtins_cast_return_none	src/pybind11/tests/test_builtin_casters.py	/^def test_builtins_cast_return_none():$/;"	f
test_bytes	src/pybind11/tests/test_constants_and_functions.py	/^def test_bytes():$/;"	f
test_bytes	src/pybind11/tests/test_pytypes.py	/^def test_bytes(doc):$/;"	f
test_bytes_to_string	src/pybind11/tests/test_builtin_casters.py	/^def test_bytes_to_string():$/;"	f
test_call_guard	src/pybind11/tests/test_call_policies.py	/^def test_call_guard():$/;"	f
test_callback1	src/pybind11/tests/test_callbacks.cpp	/^py::object test_callback1(py::object func) {$/;"	f	typeref:typename:py::object
test_callback2	src/pybind11/tests/test_callbacks.cpp	/^py::tuple test_callback2(py::object func) {$/;"	f	typeref:typename:py::tuple
test_callback3	src/pybind11/tests/test_callbacks.cpp	/^std::string test_callback3(const std::function<int(int)> &func) {$/;"	f	typeref:typename:std::string
test_callback4	src/pybind11/tests/test_callbacks.cpp	/^std::function<int(int)> test_callback4() {$/;"	f	typeref:typename:std::function<int (int)>
test_callback5	src/pybind11/tests/test_callbacks.cpp	/^py::cpp_function test_callback5() {$/;"	f	typeref:typename:py::cpp_function
test_callbacks	src/pybind11/tests/test_callbacks.py	/^def test_callbacks():$/;"	f
test_capsule	src/pybind11/tests/test_pytypes.py	/^def test_capsule(capture):$/;"	f
test_cast_numpy_int64_to_uint64	src/pybind11/tests/test_numpy_array.py	/^def test_cast_numpy_int64_to_uint64():$/;"	f
test_chrono1	src/pybind11/tests/test_chrono.cpp	/^std::chrono::system_clock::time_point test_chrono1() {$/;"	f	typeref:typename:std::chrono::system_clock::time_point
test_chrono2	src/pybind11/tests/test_chrono.cpp	/^std::chrono::system_clock::time_point test_chrono2(std::chrono::system_clock::time_point t) {$/;"	f	typeref:typename:std::chrono::system_clock::time_point
test_chrono3	src/pybind11/tests/test_chrono.cpp	/^std::chrono::system_clock::duration test_chrono3(std::chrono::system_clock::duration d) {$/;"	f	typeref:typename:std::chrono::system_clock::duration
test_chrono4	src/pybind11/tests/test_chrono.cpp	/^std::chrono::system_clock::duration test_chrono4(std::chrono::system_clock::time_point a, std::c/;"	f	typeref:typename:std::chrono::system_clock::duration
test_chrono5	src/pybind11/tests/test_chrono.cpp	/^std::chrono::steady_clock::time_point test_chrono5() {$/;"	f	typeref:typename:std::chrono::steady_clock::time_point
test_chrono6	src/pybind11/tests/test_chrono.cpp	/^std::chrono::steady_clock::time_point test_chrono6(std::chrono::steady_clock::time_point t) {$/;"	f	typeref:typename:std::chrono::steady_clock::time_point
test_chrono7	src/pybind11/tests/test_chrono.cpp	/^std::chrono::microseconds test_chrono7(std::chrono::microseconds t) {$/;"	f	typeref:typename:std::chrono::microseconds
test_chrono_duration_roundtrip	src/pybind11/tests/test_chrono.py	/^def test_chrono_duration_roundtrip():$/;"	f
test_chrono_duration_subtraction_equivalence	src/pybind11/tests/test_chrono.py	/^def test_chrono_duration_subtraction_equivalence():$/;"	f
test_chrono_float_diff	src/pybind11/tests/test_chrono.cpp	/^std::chrono::duration<double> test_chrono_float_diff(std::chrono::duration<float> a, std::chrono/;"	f	typeref:typename:std::chrono::duration<double>
test_chrono_steady_clock	src/pybind11/tests/test_chrono.py	/^def test_chrono_steady_clock():$/;"	f
test_chrono_steady_clock_roundtrip	src/pybind11/tests/test_chrono.py	/^def test_chrono_steady_clock_roundtrip():$/;"	f
test_chrono_system_clock	src/pybind11/tests/test_chrono.py	/^def test_chrono_system_clock():$/;"	f
test_chrono_system_clock_roundtrip	src/pybind11/tests/test_chrono.py	/^def test_chrono_system_clock_roundtrip():$/;"	f
test_compare_buffer_info	src/pybind11/tests/test_numpy_dtypes.cpp	/^py::list test_compare_buffer_info() {$/;"	f	typeref:typename:py::list
test_compare_buffer_info	src/pybind11/tests/test_numpy_dtypes.py	/^def test_compare_buffer_info():$/;"	f
test_complex_array	src/pybind11/tests/test_numpy_dtypes.py	/^def test_complex_array():$/;"	f
test_complex_cast	src/pybind11/tests/test_builtin_casters.py	/^def test_complex_cast():$/;"	f
test_compute_full_text	tools/genmsg/test/test_genmsg_gentools.py	/^def test_compute_full_text():$/;"	f
test_compute_md5_text	tools/genmsg/test/test_genmsg_gentools.py	/^def test_compute_md5_text():$/;"	f
test_constants	src/pybind11/tests/test_constants_and_functions.py	/^def test_constants():$/;"	f
test_constructors	src/pybind11/tests/test_numpy_array.py	/^def test_constructors():$/;"	f
test_constructors	src/pybind11/tests/test_pytypes.py	/^def test_constructors():$/;"	f
test_copy_method	src/pybind11/tests/test_methods_and_attributes.py	/^def test_copy_method():$/;"	f
test_cpp_casting	src/pybind11/tests/test_eigen.py	/^def test_cpp_casting():$/;"	f
test_cpp_function_roundtrip	src/pybind11/tests/test_callbacks.py	/^def test_cpp_function_roundtrip():$/;"	f
test_custom	src/pybind11/tests/test_exceptions.py	/^def test_custom(msg):$/;"	f
test_custom_caster_destruction	src/pybind11/tests/test_methods_and_attributes.py	/^def test_custom_caster_destruction():$/;"	f
test_custom_operator_new	src/pybind11/tests/test_eigen.py	/^def test_custom_operator_new():$/;"	f
test_cyclic_gc	src/pybind11/tests/test_methods_and_attributes.py	/^def test_cyclic_gc():$/;"	f
test_data	src/pybind11/tests/test_numpy_array.py	/^def test_data(arr, args, ret):$/;"	f
test_dense	src/pybind11/tests/test_eigen.py	/^def test_dense():$/;"	f
test_dense_signature	src/pybind11/tests/test_eigen.py	/^def test_dense_signature(doc):$/;"	f
test_dict	src/pybind11/tests/test_pytypes.py	/^def test_dict(capture, doc):$/;"	f
test_dim_check_fail	src/pybind11/tests/test_numpy_array.py	/^def test_dim_check_fail(arr):$/;"	f
test_dispatch_issue	src/pybind11/tests/test_virtual_functions.py	/^def test_dispatch_issue(msg):$/;"	f
test_docs	src/pybind11/tests/test_numpy_vectorize.py	/^def test_docs(doc):$/;"	f
test_docstring_options	src/pybind11/tests/test_docstring_options.py	/^def test_docstring_options():$/;"	f
test_docstrings	src/pybind11/tests/test_class.py	/^def test_docstrings(doc):$/;"	f
test_dtype	src/pybind11/tests/test_numpy_dtypes.py	/^def test_dtype(simple_dtype):$/;"	f
test_dtype_ctors	src/pybind11/tests/test_numpy_dtypes.cpp	/^py::list test_dtype_ctors() {$/;"	f	typeref:typename:py::list
test_dtype_methods	src/pybind11/tests/test_numpy_dtypes.cpp	/^py::list test_dtype_methods() {$/;"	f	typeref:typename:py::list
test_dummy_function	src/pybind11/tests/test_callbacks.cpp	/^std::string test_dummy_function(const std::function<int(int)> &f) {$/;"	f	typeref:typename:std::string
test_duplicate_registration	src/pybind11/tests/test_modules.py	/^def test_duplicate_registration():$/;"	f
test_dynamic_attributes	src/pybind11/tests/test_methods_and_attributes.py	/^def test_dynamic_attributes():$/;"	f
test_eigen_keepalive	src/pybind11/tests/test_eigen.py	/^def test_eigen_keepalive():$/;"	f
test_eigen_ref_life_support	src/pybind11/tests/test_eigen.py	/^def test_eigen_ref_life_support():$/;"	f
test_eigen_ref_mutators	src/pybind11/tests/test_eigen.py	/^def test_eigen_ref_mutators():$/;"	f
test_eigen_ref_to_python	src/pybind11/tests/test_eigen.py	/^def test_eigen_ref_to_python():$/;"	f
test_eigen_return_references	src/pybind11/tests/test_eigen.py	/^def test_eigen_return_references():$/;"	f
test_enum_array	src/pybind11/tests/test_numpy_dtypes.py	/^def test_enum_array():$/;"	f
test_enum_to_int	src/pybind11/tests/test_enum.py	/^def test_enum_to_int():$/;"	f
test_error_already_set	src/pybind11/tests/test_exceptions.py	/^def test_error_already_set(msg):$/;"	f
test_evals	src/pybind11/tests/test_eval.py	/^def test_evals(capture):$/;"	f
test_exc_sp	src/pybind11/tests/test_constants_and_functions.cpp	/^namespace test_exc_sp {$/;"	n	file:
test_exception_matches	src/pybind11/tests/test_exceptions.py	/^def test_exception_matches():$/;"	f
test_exception_specifiers	src/pybind11/tests/test_constants_and_functions.py	/^def test_exception_specifiers():$/;"	f
test_exceptions	tools/genmsg/test/test_genmsg_base.py	/^def test_exceptions():$/;"	f
test_exceptions	tools/genmsg/test/test_genmsg_msg_loader.py	/^def test_exceptions():$/;"	f
test_exp_optional	src/pybind11/tests/test_stl.py	/^def test_exp_optional():$/;"	f
test_fixed	src/pybind11/tests/test_eigen.py	/^def test_fixed():$/;"	f
test_floating_point_duration	src/pybind11/tests/test_chrono.py	/^def test_floating_point_duration():$/;"	f
test_format_descriptors	src/pybind11/tests/test_numpy_dtypes.py	/^def test_format_descriptors():$/;"	f
test_from_python	src/pybind11/tests/test_buffers.py	/^def test_from_python():$/;"	f
test_function	src/pybind11/tests/test_enum.cpp	/^    static EMode test_function(EMode mode) {$/;"	f	class:ClassWithUnscopedEnum	typeref:typename:EMode	file:
test_function1	src/pybind11/tests/test_constants_and_functions.cpp	/^std::string test_function1() {$/;"	f	typeref:typename:std::string
test_function2	src/pybind11/tests/test_constants_and_functions.cpp	/^std::string test_function2(MyEnum k) {$/;"	f	typeref:typename:std::string
test_function3	src/pybind11/tests/test_constants_and_functions.cpp	/^std::string test_function3(int i) {$/;"	f	typeref:typename:std::string
test_function4	src/pybind11/tests/test_constants_and_functions.cpp	/^py::str test_function4(float, int) { return "test_function(float, int)"; }$/;"	f	typeref:typename:py::str
test_function4	src/pybind11/tests/test_constants_and_functions.cpp	/^py::str test_function4(int, float) { return "test_function(int, float)"; }$/;"	f	typeref:typename:py::str
test_function_overloading	src/pybind11/tests/test_constants_and_functions.py	/^def test_function_overloading():$/;"	f
test_function_signatures	src/pybind11/tests/test_callbacks.py	/^def test_function_signatures(doc):$/;"	f
test_function_signatures	src/pybind11/tests/test_kwargs_and_defaults.py	/^def test_function_signatures(doc):$/;"	f
test_generalized_iterators	src/pybind11/tests/test_sequences_and_iterators.py	/^def test_generalized_iterators():$/;"	f
test_get_msg_file	tools/genmsg/test/test_genmsg_msg_loader.py	/^def test_get_msg_file():$/;"	f
test_get_srv_file	tools/genmsg/test/test_genmsg_msg_loader.py	/^def test_get_srv_file():$/;"	f
test_greedy_string_overload	src/pybind11/tests/test_numpy_array.py	/^def test_greedy_string_overload():  # issue 685$/;"	f
test_implicit_casting	src/pybind11/tests/test_pytypes.py	/^def test_implicit_casting():$/;"	f
test_implicit_conversion	src/pybind11/tests/test_enum.py	/^def test_implicit_conversion():$/;"	f
test_implicit_conversion_life_support	src/pybind11/tests/test_class.py	/^def test_implicit_conversion_life_support():$/;"	f
test_importing	src/pybind11/tests/test_modules.py	/^def test_importing():$/;"	f
test_includepath_to_dict	tools/genmsg/test/test_genmsg_command_line.py	/^def test_includepath_to_dict():$/;"	f
test_index_offset	src/pybind11/tests/test_numpy_array.py	/^def test_index_offset(arr, args, ret):$/;"	f
test_inheritance	src/pybind11/tests/test_class.py	/^def test_inheritance(msg):$/;"	f
test_inherited_protocol	src/pybind11/tests/test_buffers.py	/^def test_inherited_protocol():$/;"	f
test_inheriting_repeat	src/pybind11/tests/test_virtual_functions.py	/^def test_inheriting_repeat():$/;"	f
test_initializer	src/pybind11/tests/pybind11_tests.cpp	/^test_initializer::test_initializer(Initializer init) {$/;"	f	class:test_initializer
test_initializer	src/pybind11/tests/pybind11_tests.cpp	/^test_initializer::test_initializer(const char *submodule_name, Initializer init) {$/;"	f	class:test_initializer
test_initializer	src/pybind11/tests/pybind11_tests.h	/^class test_initializer {$/;"	c
test_instance	src/pybind11/tests/test_class.py	/^def test_instance(msg):$/;"	f
test_integer_casting	src/pybind11/tests/test_builtin_casters.py	/^def test_integer_casting():$/;"	f
test_is_legal_resource_base_name	tools/genmsg/test/test_genmsg_names.py	/^def test_is_legal_resource_base_name():$/;"	f
test_is_legal_resource_name	tools/genmsg/test/test_genmsg_names.py	/^def test_is_legal_resource_name():$/;"	f
test_is_valid_constant_type	tools/genmsg/test/test_genmsg_msgs.py	/^def test_is_valid_constant_type():$/;"	f
test_is_valid_msg_type	tools/genmsg/test/test_genmsg_msgs.py	/^def test_is_valid_msg_type():$/;"	f
test_isinstance	src/pybind11/tests/test_class.py	/^def test_isinstance():$/;"	f
test_isinstance	src/pybind11/tests/test_numpy_array.py	/^def test_isinstance():$/;"	f
test_issue738	src/pybind11/tests/test_eigen.py	/^def test_issue738():$/;"	f
test_iterator_passthrough	src/pybind11/tests/test_sequences_and_iterators.py	/^def test_iterator_passthrough():$/;"	f
test_iterator_rvp	src/pybind11/tests/test_sequences_and_iterators.py	/^def test_iterator_rvp():$/;"	f
test_keep_alive_argument	src/pybind11/tests/test_call_policies.py	/^def test_keep_alive_argument(capture):$/;"	f
test_keep_alive_return_value	src/pybind11/tests/test_call_policies.py	/^def test_keep_alive_return_value(capture):$/;"	f
test_keyword_args_and_generalized_unpacking	src/pybind11/tests/test_callbacks.py	/^def test_keyword_args_and_generalized_unpacking():$/;"	f
test_lacking_copy_ctor	src/pybind11/tests/test_copy_move.py	/^def test_lacking_copy_ctor():$/;"	f
test_lacking_move_ctor	src/pybind11/tests/test_copy_move.py	/^def test_lacking_move_ctor():$/;"	f
test_lambda_closure_cleanup	src/pybind11/tests/test_callbacks.py	/^def test_lambda_closure_cleanup():$/;"	f
test_large_holder	src/pybind11/tests/test_smart_ptr.py	/^def test_large_holder():$/;"	f
test_list	src/pybind11/tests/test_pytypes.py	/^def test_list(capture, doc):$/;"	f
test_load_depends_msg	tools/genmsg/test/test_genmsg_msg_loader.py	/^def test_load_depends_msg():$/;"	f
test_load_depends_srv	tools/genmsg/test/test_genmsg_msg_loader.py	/^def test_load_depends_srv():$/;"	f
test_load_msg_by_type	tools/genmsg/test/test_genmsg_msg_loader.py	/^def test_load_msg_by_type():$/;"	f
test_load_msg_depends	tools/genmsg/test/test_genmsg_msg_loader.py	/^def test_load_msg_depends():$/;"	f
test_load_msg_depends_stamped	tools/genmsg/test/test_genmsg_msg_loader.py	/^def test_load_msg_depends_stamped():$/;"	f
test_load_msg_from_file	tools/genmsg/test/test_genmsg_msg_loader.py	/^def test_load_msg_from_file():$/;"	f
test_load_msg_from_string	tools/genmsg/test/test_genmsg_msg_loader.py	/^def test_load_msg_from_string():$/;"	f
test_load_msg_from_string_TestString	tools/genmsg/test/test_genmsg_msg_loader.py	/^def test_load_msg_from_string_TestString():$/;"	f
test_load_srv_by_type	tools/genmsg/test/test_genmsg_msg_loader.py	/^def test_load_srv_by_type():$/;"	f
test_load_srv_from_file	tools/genmsg/test/test_genmsg_msg_loader.py	/^def test_load_srv_from_file():$/;"	f
test_log	tools/genmsg/test/test_genmsg_base.py	/^def test_log():$/;"	f
test_make_c_f_array	src/pybind11/tests/test_numpy_array.py	/^def test_make_c_f_array():$/;"	f
test_map	src/pybind11/tests/test_stl.py	/^def test_map(doc):$/;"	f
test_map_iterator	src/pybind11/tests/test_sequences_and_iterators.py	/^def test_map_iterator():$/;"	f
test_map_string_double	src/pybind11/tests/test_stl_binders.py	/^def test_map_string_double():$/;"	f
test_map_string_double_const	src/pybind11/tests/test_stl_binders.py	/^def test_map_string_double_const():$/;"	f
test_md5_equals	tools/genmsg/test/test_genmsg_gentools.py	/^def test_md5_equals():$/;"	f
test_md5_not_equals	tools/genmsg/test/test_genmsg_gentools.py	/^def test_md5_not_equals():$/;"	f
test_metaclass_override	src/pybind11/tests/test_methods_and_attributes.py	/^def test_metaclass_override():$/;"	f
test_method_vectorization	src/pybind11/tests/test_numpy_vectorize.py	/^def test_method_vectorization():$/;"	f
test_methods_and_attributes	src/pybind11/tests/test_methods_and_attributes.py	/^def test_methods_and_attributes():$/;"	f
test_mi_base_return	src/pybind11/tests/test_multiple_inheritance.py	/^def test_mi_base_return():$/;"	f
test_mi_dynamic_attributes	src/pybind11/tests/test_multiple_inheritance.py	/^def test_mi_dynamic_attributes():$/;"	f
test_mi_static_properties	src/pybind11/tests/test_multiple_inheritance.py	/^def test_mi_static_properties():$/;"	f
test_mi_unaligned_base	src/pybind11/tests/test_multiple_inheritance.py	/^def test_mi_unaligned_base():$/;"	f
test_mismatched_holder	src/pybind11/tests/test_class.py	/^def test_mismatched_holder():$/;"	f
test_mixed_args_and_kwargs	src/pybind11/tests/test_kwargs_and_defaults.py	/^def test_mixed_args_and_kwargs(msg):$/;"	f
test_movable_object	src/pybind11/tests/test_callbacks.py	/^def test_movable_object():$/;"	f
test_move_and_copy_casts	src/pybind11/tests/test_copy_move.py	/^def test_move_and_copy_casts():$/;"	f
test_move_and_copy_load_optional	src/pybind11/tests/test_copy_move.py	/^def test_move_and_copy_load_optional():$/;"	f
test_move_and_copy_loads	src/pybind11/tests/test_copy_move.py	/^def test_move_and_copy_loads():$/;"	f
test_move_fallback	src/pybind11/tests/test_copy_move.py	/^def test_move_fallback():$/;"	f
test_move_only_holder	src/pybind11/tests/test_smart_ptr.py	/^def test_move_only_holder():$/;"	f
test_move_out_container	src/pybind11/tests/test_stl.py	/^def test_move_out_container():$/;"	f
test_move_support	src/pybind11/tests/test_virtual_functions.py	/^def test_move_support():$/;"	f
test_multiple_inheritance_cpp	src/pybind11/tests/test_multiple_inheritance.py	/^def test_multiple_inheritance_cpp():$/;"	f
test_multiple_inheritance_mix1	src/pybind11/tests/test_multiple_inheritance.py	/^def test_multiple_inheritance_mix1():$/;"	f
test_multiple_inheritance_mix2	src/pybind11/tests/test_multiple_inheritance.py	/^def test_multiple_inheritance_mix2():$/;"	f
test_multiple_inheritance_python	src/pybind11/tests/test_multiple_inheritance.py	/^def test_multiple_inheritance_python():$/;"	f
test_multiple_inheritance_python_many_bases	src/pybind11/tests/test_multiple_inheritance.py	/^def test_multiple_inheritance_python_many_bases():$/;"	f
test_multiple_inheritance_virtbase	src/pybind11/tests/test_multiple_inheritance.py	/^def test_multiple_inheritance_virtbase():$/;"	f
test_mutate_data	src/pybind11/tests/test_numpy_array.py	/^def test_mutate_data(arr):$/;"	f
test_mutate_readonly	src/pybind11/tests/test_numpy_array.py	/^def test_mutate_readonly(arr):$/;"	f
test_mutator_descriptors	src/pybind11/tests/test_eigen.py	/^def test_mutator_descriptors():$/;"	f
test_named_arguments	src/pybind11/tests/test_eigen.py	/^def test_named_arguments():$/;"	f
test_named_arguments	src/pybind11/tests/test_kwargs_and_defaults.py	/^def test_named_arguments(msg):$/;"	f
test_negative_stride_from_python	src/pybind11/tests/test_eigen.py	/^def test_negative_stride_from_python(msg):$/;"	f
test_nested	src/pybind11/tests/test_operator_overloading.py	/^def test_nested():$/;"	f
test_nested_modules	src/pybind11/tests/test_modules.py	/^def test_nested_modules():$/;"	f
test_no_mixed_overloads	src/pybind11/tests/test_methods_and_attributes.py	/^def test_no_mixed_overloads():$/;"	f
test_noconvert_args	src/pybind11/tests/test_methods_and_attributes.py	/^def test_noconvert_args(msg):$/;"	f
test_nocopy_wrapper	src/pybind11/tests/test_eigen.py	/^def test_nocopy_wrapper():$/;"	f
test_noncopyable_deque	src/pybind11/tests/test_stl_binders.py	/^def test_noncopyable_deque():$/;"	f
test_noncopyable_map	src/pybind11/tests/test_stl_binders.py	/^def test_noncopyable_map():$/;"	f
test_noncopyable_unordered_map	src/pybind11/tests/test_stl_binders.py	/^def test_noncopyable_unordered_map():$/;"	f
test_noncopyable_vector	src/pybind11/tests/test_stl_binders.py	/^def test_noncopyable_vector():$/;"	f
test_none_deferred	src/pybind11/tests/test_builtin_casters.py	/^def test_none_deferred():$/;"	f
test_nonunit_stride_from_python	src/pybind11/tests/test_eigen.py	/^def test_nonunit_stride_from_python():$/;"	f
test_nonunit_stride_to_python	src/pybind11/tests/test_eigen.py	/^def test_nonunit_stride_to_python():$/;"	f
test_normalize_package_context	tools/genmsg/test/test_genmsg_names.py	/^def test_normalize_package_context():$/;"	f
test_numpy_ref_mutators	src/pybind11/tests/test_eigen.py	/^def test_numpy_ref_mutators():$/;"	f
test_numpy_view	src/pybind11/tests/test_numpy_array.py	/^def test_numpy_view(capture):$/;"	f
test_operator_overloading	src/pybind11/tests/test_operator_overloading.py	/^def test_operator_overloading():$/;"	f
test_operators_notimplemented	src/pybind11/tests/test_operator_overloading.py	/^def test_operators_notimplemented():$/;"	f
test_optional	src/pybind11/tests/test_stl.py	/^def test_optional():$/;"	f
test_overload_resolution	src/pybind11/tests/test_numpy_array.py	/^def test_overload_resolution(msg):$/;"	f
test_override	src/pybind11/tests/test_virtual_functions.py	/^def test_override(capture, msg):$/;"	f
test_override_ref	src/pybind11/tests/test_virtual_functions.py	/^def test_override_ref():$/;"	f
test_override_static	src/pybind11/tests/test_class.py	/^def test_override_static():$/;"	f
test_package_resource_name	tools/genmsg/test/test_genmsg_names.py	/^def test_package_resource_name():$/;"	f
test_parse_type	tools/genmsg/test/test_genmsg_msgs.py	/^def test_parse_type():$/;"	f
test_partially_fixed	src/pybind11/tests/test_eigen.py	/^def test_partially_fixed():$/;"	f
test_pass_readonly_array	src/pybind11/tests/test_eigen.py	/^def test_pass_readonly_array():$/;"	f
test_passthrough_arguments	src/pybind11/tests/test_numpy_vectorize.py	/^def test_passthrough_arguments(doc):$/;"	f
test_plog	tools/genmsg/test/test_genmsg_base.py	/^def test_plog():$/;"	f
test_pointers	src/pybind11/tests/test_opaque_types.py	/^def test_pointers(msg):$/;"	f
test_print	src/pybind11/tests/test_pytypes.py	/^def test_print(capture):$/;"	f
test_private_op_new	src/pybind11/tests/test_copy_move.py	/^def test_private_op_new():$/;"	f
test_properties	src/pybind11/tests/test_methods_and_attributes.py	/^def test_properties():$/;"	f
test_property_return_value_policies	src/pybind11/tests/test_methods_and_attributes.py	/^def test_property_return_value_policies(access):$/;"	f
test_property_rvalue_policy	src/pybind11/tests/test_methods_and_attributes.py	/^def test_property_rvalue_policy():$/;"	f
test_property_rvalue_policy_static	src/pybind11/tests/test_methods_and_attributes.py	/^def test_property_rvalue_policy_static():$/;"	f
test_ptmf	src/pybind11/tests/test_buffers.py	/^def test_ptmf():$/;"	f
test_pydoc	src/pybind11/tests/test_modules.py	/^def test_pydoc():$/;"	f
test_python_call_in_catch	src/pybind11/tests/test_exceptions.py	/^def test_python_call_in_catch():$/;"	f
test_python_iterator_in_cpp	src/pybind11/tests/test_sequences_and_iterators.py	/^def test_python_iterator_in_cpp():$/;"	f
test_random_access_iterator	src/pybind11/tests/test_sequences_and_iterators.cpp	/^py::list test_random_access_iterator(PythonType x) {$/;"	f	typeref:typename:py::list
test_recarray	src/pybind11/tests/test_numpy_dtypes.py	/^def test_recarray(simple_dtype, packed_dtype):$/;"	f
test_recursive_casting	src/pybind11/tests/test_stl.py	/^def test_recursive_casting():$/;"	f
test_reference_internal	src/pybind11/tests/test_modules.py	/^def test_reference_internal():$/;"	f
test_reference_wrapper	src/pybind11/tests/test_builtin_casters.py	/^def test_reference_wrapper():$/;"	f
test_register_dtype	src/pybind11/tests/test_numpy_dtypes.py	/^def test_register_dtype():$/;"	f
test_repr	src/pybind11/tests/test_class.py	/^def test_repr():$/;"	f
test_resolve_type	tools/genmsg/test/test_genmsg_msgs.py	/^def test_resolve_type():$/;"	f
test_resource_name	tools/genmsg/test/test_genmsg_names.py	/^def test_resource_name():$/;"	f
test_resource_name_base	tools/genmsg/test/test_genmsg_names.py	/^def test_resource_name_base():$/;"	f
test_resource_name_package	tools/genmsg/test/test_genmsg_names.py	/^def test_resource_name_package():$/;"	f
test_return_none	src/pybind11/tests/test_call_policies.py	/^def test_return_none(capture):$/;"	f
test_roundtrip	src/pybind11/tests/test_pickling.py	/^def test_roundtrip():$/;"	f
test_roundtrip_with_dict	src/pybind11/tests/test_pickling.py	/^def test_roundtrip_with_dict():$/;"	f
test_scalar_conversion	src/pybind11/tests/test_numpy_dtypes.py	/^def test_scalar_conversion():$/;"	f
test_scoped_enum	src/pybind11/tests/test_enum.cpp	/^std::string test_scoped_enum(ScopedEnum z) {$/;"	f	typeref:typename:std::string
test_scoped_enum	src/pybind11/tests/test_enum.py	/^def test_scoped_enum():$/;"	f
test_sequence	src/pybind11/tests/test_sequences_and_iterators.py	/^def test_sequence():$/;"	f
test_set	src/pybind11/tests/test_pytypes.py	/^def test_set(capture, doc):$/;"	f
test_set	src/pybind11/tests/test_stl.py	/^def test_set(doc):$/;"	f
test_shared_ptr_and_references	src/pybind11/tests/test_smart_ptr.py	/^def test_shared_ptr_and_references():$/;"	f
test_shared_ptr_from_this_and_references	src/pybind11/tests/test_smart_ptr.py	/^def test_shared_ptr_from_this_and_references():$/;"	f
test_shared_ptr_gc	src/pybind11/tests/test_smart_ptr.py	/^def test_shared_ptr_gc():$/;"	f
test_signature	src/pybind11/tests/test_numpy_dtypes.py	/^def test_signature(doc):$/;"	f
test_simple_string	src/pybind11/tests/test_builtin_casters.py	/^def test_simple_string():$/;"	f
test_single_char_arguments	src/pybind11/tests/test_builtin_casters.py	/^def test_single_char_arguments():$/;"	f
test_smart_ptr	src/pybind11/tests/test_smart_ptr.py	/^def test_smart_ptr(capture):$/;"	f
test_smart_ptr_from_default	src/pybind11/tests/test_smart_ptr.py	/^def test_smart_ptr_from_default():$/;"	f
test_smart_ptr_refcounting	src/pybind11/tests/test_smart_ptr.py	/^def test_smart_ptr_refcounting():$/;"	f
test_sparse	src/pybind11/tests/test_eigen.py	/^def test_sparse():$/;"	f
test_sparse_signature	src/pybind11/tests/test_eigen.py	/^def test_sparse_signature(doc):$/;"	f
test_special_matrix_objects	src/pybind11/tests/test_eigen.py	/^def test_special_matrix_objects():$/;"	f
test_static_cls	src/pybind11/tests/test_methods_and_attributes.py	/^def test_static_cls():$/;"	f
test_static_properties	src/pybind11/tests/test_methods_and_attributes.py	/^def test_static_properties():$/;"	f
test_std_exception	src/pybind11/tests/test_exceptions.py	/^def test_std_exception(msg):$/;"	f
test_stl_pass_by_pointer	src/pybind11/tests/test_stl.py	/^def test_stl_pass_by_pointer(msg):$/;"	f
test_str	src/pybind11/tests/test_pytypes.py	/^def test_str(doc):$/;"	f
test_str_issue	src/pybind11/tests/test_methods_and_attributes.py	/^def test_str_issue(msg):$/;"	f
test_string_array	src/pybind11/tests/test_numpy_dtypes.py	/^def test_string_array():$/;"	f
test_string_list	src/pybind11/tests/test_opaque_types.py	/^def test_string_list():$/;"	f
test_string_view	src/pybind11/tests/test_builtin_casters.py	/^def test_string_view(capture):$/;"	f
test_to_python	src/pybind11/tests/test_buffers.py	/^def test_to_python():$/;"	f
test_trivial_broadcasting	src/pybind11/tests/test_numpy_vectorize.py	/^def test_trivial_broadcasting():$/;"	f
test_tuple	src/pybind11/tests/test_builtin_casters.py	/^def test_tuple(doc):$/;"	f
test_type_selection	src/pybind11/tests/test_numpy_vectorize.py	/^def test_type_selection():$/;"	f
test_unicode_conversion	src/pybind11/tests/test_builtin_casters.py	/^def test_unicode_conversion():$/;"	f
test_unique_nodelete	src/pybind11/tests/test_smart_ptr.py	/^def test_unique_nodelete():$/;"	f
test_unregistered_base_implementations	src/pybind11/tests/test_methods_and_attributes.py	/^def test_unregistered_base_implementations():$/;"	f
test_unscoped_enum	src/pybind11/tests/test_enum.py	/^def test_unscoped_enum():$/;"	f
test_valarray	src/pybind11/tests/test_stl.py	/^def test_valarray(doc):$/;"	f
test_variant	src/pybind11/tests/test_stl.py	/^def test_variant(doc):$/;"	f
test_vec_of_reference_wrapper	src/pybind11/tests/test_stl.py	/^def test_vec_of_reference_wrapper():$/;"	f
test_vector	src/pybind11/tests/test_stl.py	/^def test_vector(doc):$/;"	f
test_vector_bool	src/pybind11/tests/test_stl_binders.py	/^def test_vector_bool():$/;"	f
test_vector_buffer	src/pybind11/tests/test_stl_binders.py	/^def test_vector_buffer():$/;"	f
test_vector_buffer_numpy	src/pybind11/tests/test_stl_binders.py	/^def test_vector_buffer_numpy():$/;"	f
test_vector_custom	src/pybind11/tests/test_stl_binders.py	/^def test_vector_custom():$/;"	f
test_vector_int	src/pybind11/tests/test_stl_binders.py	/^def test_vector_int():$/;"	f
test_vectorize	src/pybind11/tests/test_numpy_vectorize.py	/^def test_vectorize(capture):$/;"	f
test_void_caster	src/pybind11/tests/test_builtin_casters.py	/^def test_void_caster():$/;"	f
test_wrap	src/pybind11/tests/test_numpy_array.py	/^def test_wrap():$/;"	f
texinfo	src/pybind11/docs/Makefile	/^texinfo:$/;"	t
texinfo_documents	src/pybind11/docs/conf.py	/^texinfo_documents = [$/;"	v
texinfo_documents	tools/genmsg/doc/conf.py	/^texinfo_documents = [$/;"	v
text	src/pybind11/docs/Makefile	/^text:$/;"	t
text	src/pybind11/include/pybind11/descr.h	/^    constexpr const char *text() const { return m_text; }$/;"	f	class:descr	typeref:typename:const char *
text	tools/genmsg/doc/Makefile	/^text:$/;"	t
the_answer	src/pybind11/tests/test_embed/test_interpreter.py	/^    def the_answer(self):$/;"	m	class:DerivedWidget
the_message	src/pybind11/tests/test_embed/test_interpreter.cpp	/^    std::string the_message() const { return message; }$/;"	f	class:Widget	typeref:typename:std::string	file:
thr	src/pybind11/tools/mkdoc.py	/^        thr = ExtractionThread(filename, parameters)$/;"	v
thread_running	src/elka_comm/posix/elka_posix.cpp	/^static volatile bool thread_running[MAX_ELKA_DEVS];$/;"	v	typeref:typename:volatile bool[]	file:
thread_running	src/elka_comm/qurt/snapdragon_uart.cpp	/^static volatile bool thread_running[MAX_UART_PORTS];$/;"	v	typeref:typename:volatile bool[]	file:
thread_should_exit	src/elka_comm/posix/elka_posix.cpp	/^static volatile bool thread_should_exit[MAX_ELKA_DEVS];$/;"	v	typeref:typename:volatile bool[]	file:
thread_should_exit	src/elka_comm/qurt/snapdragon_uart.cpp	/^static volatile bool thread_should_exit[MAX_UART_PORTS];$/;"	v	typeref:typename:volatile bool[]	file:
threads	src/pybind11/tests/test_embed/test_interpreter.cpp	/^        auto threads = std::vector<std::thread>();$/;"	v	typeref:typename:auto
throws1	src/pybind11/tests/test_exceptions.cpp	/^void throws1() {$/;"	f	typeref:typename:void
throws2	src/pybind11/tests/test_exceptions.cpp	/^void throws2() {$/;"	f	typeref:typename:void
throws3	src/pybind11/tests/test_exceptions.cpp	/^void throws3() {$/;"	f	typeref:typename:void
throws4	src/pybind11/tests/test_exceptions.cpp	/^void throws4() {$/;"	f	typeref:typename:void
throws5	src/pybind11/tests/test_exceptions.cpp	/^void throws5() {$/;"	f	typeref:typename:void
throws5_1	src/pybind11/tests/test_exceptions.cpp	/^void throws5_1() {$/;"	f	typeref:typename:void
throws_logic_error	src/pybind11/tests/test_exceptions.cpp	/^void throws_logic_error() {$/;"	f	typeref:typename:void
time	src/pybind11/tools/clang/cindex.py	/^    def time(self):$/;"	m	class:File
timer	serial/python/parse_vispy.py	/^timer = QtCore.QTimer()$/;"	v
times_ten	src/pybind11/tests/test_stl_binders.cpp	/^template <class Map> Map *times_ten(int n) {$/;"	f	typeref:typename:Map *
timestamp	build_elka_data_collection/inc/uORB/topics/elka_msg.h	/^	uint64_t timestamp; \/\/ required for logger$/;"	m	struct:elka_msg_s	typeref:typename:uint64_t
timestamp	build_elka_data_collection/inc/uORB/topics/elka_msg_ack.h	/^	uint64_t timestamp; \/\/ required for logger$/;"	m	struct:elka_msg_ack_s	typeref:typename:uint64_t
timestamp	build_elka_data_collection/topics_temporary_header/elka_msg.h	/^	uint64_t timestamp; \/\/ required for logger$/;"	m	struct:elka_msg_s	typeref:typename:uint64_t
timestamp	build_elka_data_collection/topics_temporary_header/elka_msg_ack.h	/^	uint64_t timestamp; \/\/ required for logger$/;"	m	struct:elka_msg_ack_s	typeref:typename:uint64_t
tinfo	src/pybind11/include/pybind11/cast.h	/^    const type_vec &tinfo;$/;"	m	struct:values_and_holders	typeref:typename:const type_vec &
toString	src/pybind11/tests/test_methods_and_attributes.cpp	/^    std::string toString() {$/;"	f	class:ExampleMandA	typeref:typename:std::string	file:
toString	src/pybind11/tests/test_modules.cpp	/^    std::string toString() { return "A[" + std::to_string(v) + "]"; }$/;"	f	class:A	typeref:typename:std::string	file:
toString	src/pybind11/tests/test_operator_overloading.cpp	/^    std::string toString() const {$/;"	f	class:Vector2	typeref:typename:std::string	file:
toString	src/pybind11/tests/test_smart_ptr.cpp	/^    std::string toString() const {$/;"	f	class:MyObject1	typeref:typename:std::string	file:
toString	src/pybind11/tests/test_smart_ptr.cpp	/^    std::string toString() const {$/;"	f	class:MyObject2	typeref:typename:std::string	file:
toString	src/pybind11/tests/test_smart_ptr.cpp	/^    std::string toString() const {$/;"	f	class:MyObject3	typeref:typename:std::string	file:
todo_include_todos	src/pybind11/docs/conf.py	/^todo_include_todos = False$/;"	v
toobig_message	src/pybind11/tests/test_builtin_casters.py	/^    def toobig_message(r):$/;"	f	function:test_single_char_arguments	file:
topics_sources/elka_msg.cpp.i	build_elka_data_collection/Makefile	/^topics_sources\/elka_msg.cpp.i:$/;"	t
topics_sources/elka_msg.cpp.o	build_elka_data_collection/Makefile	/^topics_sources\/elka_msg.cpp.o:$/;"	t
topics_sources/elka_msg.cpp.s	build_elka_data_collection/Makefile	/^topics_sources\/elka_msg.cpp.s:$/;"	t
topics_sources/elka_msg.i	build_elka_data_collection/Makefile	/^topics_sources\/elka_msg.i: topics_sources\/elka_msg.cpp.i$/;"	t
topics_sources/elka_msg.o	build_elka_data_collection/Makefile	/^topics_sources\/elka_msg.o: topics_sources\/elka_msg.cpp.o$/;"	t
topics_sources/elka_msg.s	build_elka_data_collection/Makefile	/^topics_sources\/elka_msg.s: topics_sources\/elka_msg.cpp.s$/;"	t
topics_sources/elka_msg_ack.cpp.i	build_elka_data_collection/Makefile	/^topics_sources\/elka_msg_ack.cpp.i:$/;"	t
topics_sources/elka_msg_ack.cpp.o	build_elka_data_collection/Makefile	/^topics_sources\/elka_msg_ack.cpp.o:$/;"	t
topics_sources/elka_msg_ack.cpp.s	build_elka_data_collection/Makefile	/^topics_sources\/elka_msg_ack.cpp.s:$/;"	t
topics_sources/elka_msg_ack.i	build_elka_data_collection/Makefile	/^topics_sources\/elka_msg_ack.i: topics_sources\/elka_msg_ack.cpp.i$/;"	t
topics_sources/elka_msg_ack.o	build_elka_data_collection/Makefile	/^topics_sources\/elka_msg_ack.o: topics_sources\/elka_msg_ack.cpp.o$/;"	t
topics_sources/elka_msg_ack.s	build_elka_data_collection/Makefile	/^topics_sources\/elka_msg_ack.s: topics_sources\/elka_msg_ack.cpp.s$/;"	t
topics_sources/uORBTopics.cpp.i	build_elka_data_collection/Makefile	/^topics_sources\/uORBTopics.cpp.i:$/;"	t
topics_sources/uORBTopics.cpp.o	build_elka_data_collection/Makefile	/^topics_sources\/uORBTopics.cpp.o:$/;"	t
topics_sources/uORBTopics.cpp.s	build_elka_data_collection/Makefile	/^topics_sources\/uORBTopics.cpp.s:$/;"	t
topics_sources/uORBTopics.i	build_elka_data_collection/Makefile	/^topics_sources\/uORBTopics.i: topics_sources\/uORBTopics.cpp.i$/;"	t
topics_sources/uORBTopics.o	build_elka_data_collection/Makefile	/^topics_sources\/uORBTopics.o: topics_sources\/uORBTopics.cpp.o$/;"	t
topics_sources/uORBTopics.s	build_elka_data_collection/Makefile	/^topics_sources\/uORBTopics.s: topics_sources\/uORBTopics.cpp.s$/;"	t
trace	src/pybind11/include/pybind11/common.h	/^    PyObject *type, *value, *trace;$/;"	m	class:error_already_set	typeref:typename:PyObject ***
trace	src/pybind11/include/pybind11/common.h	/^    PyObject *type, *value, *trace;$/;"	m	struct:error_scope	typeref:typename:PyObject ***
track_copy_assigned	src/pybind11/tests/constructor_stats.h	/^template <class T, typename... Values> void track_copy_assigned(T *, Values &&...values) {$/;"	f	typeref:typename:void
track_copy_created	src/pybind11/tests/constructor_stats.h	/^template <class T> void track_copy_created(T *inst) { ConstructorStats::get<T>().copy_created(in/;"	f	typeref:typename:void
track_created	src/pybind11/tests/constructor_stats.h	/^template <class T, typename... Values> void track_created(T *inst, Values &&...values) {$/;"	f	typeref:typename:void
track_default_created	src/pybind11/tests/constructor_stats.h	/^template <class T, typename... Values> void track_default_created(T *inst, Values &&...values) {$/;"	f	typeref:typename:void
track_destroyed	src/pybind11/tests/constructor_stats.h	/^template <class T, typename... Values> void track_destroyed(T *inst) {$/;"	f	typeref:typename:void
track_move_assigned	src/pybind11/tests/constructor_stats.h	/^template <class T, typename... Values> void track_move_assigned(T *, Values &&...values) {$/;"	f	typeref:typename:void
track_move_created	src/pybind11/tests/constructor_stats.h	/^template <class T> void track_move_created(T *inst) { ConstructorStats::get<T>().move_created(in/;"	f	typeref:typename:void
track_values	src/pybind11/tests/constructor_stats.h	/^template <class T, typename... Values> void track_values(T *, Values &&...values) {$/;"	f	typeref:typename:void
trailing_padding_dtype	src/pybind11/tests/test_numpy_dtypes.cpp	/^py::dtype trailing_padding_dtype() {$/;"	f	typeref:typename:py::dtype
translation_unit	src/pybind11/tools/clang/cindex.py	/^    def translation_unit(self):$/;"	m	class:Cursor
translation_unit	src/pybind11/tools/clang/cindex.py	/^    def translation_unit(self):$/;"	m	class:Type
traverse_offset_bases	src/pybind11/include/pybind11/class_support.h	/^inline void traverse_offset_bases(void *valueptr, const detail::type_info *tinfo, instance *self/;"	f	typeref:typename:void
try_direct_conversions	src/pybind11/include/pybind11/cast.h	/^    bool try_direct_conversions(handle src) {$/;"	f	class:type_caster_generic	typeref:typename:bool
try_direct_conversions	src/pybind11/include/pybind11/cast.h	/^    static bool try_direct_conversions(handle) { return false; }$/;"	f	struct:copyable_holder_caster	typeref:typename:bool
try_implicit_casts	src/pybind11/include/pybind11/cast.h	/^    bool try_implicit_casts(handle src, bool convert) {$/;"	f	class:type_caster_generic	typeref:typename:bool
try_implicit_casts	src/pybind11/include/pybind11/cast.h	/^    bool try_implicit_casts(handle src, bool convert) {$/;"	f	struct:copyable_holder_caster	typeref:typename:bool
tstate	src/pybind11/include/pybind11/pybind11.h	/^    PyThreadState *tstate = nullptr;$/;"	m	class:gil_scoped_acquire	typeref:typename:PyThreadState *
tstate	src/pybind11/include/pybind11/pybind11.h	/^    PyThreadState *tstate;$/;"	m	class:gil_scoped_release	typeref:typename:PyThreadState *
tuple	src/pybind11/include/pybind11/pytypes.h	/^    explicit tuple(size_t size = 0) : object(PyTuple_New((ssize_t) size), stolen_t{}) {$/;"	f	class:tuple	typeref:typename:PYBIND11_OBJECT_CVT (tuple,object,PyTuple_Check,PySequence_Tuple)
tuple	src/pybind11/include/pybind11/pytypes.h	/^class tuple : public object {$/;"	c
tuple_accessor	src/pybind11/include/pybind11/pytypes.h	/^using tuple_accessor = accessor<accessor_policies::tuple_item>;$/;"	t	typeref:typename:accessor<accessor_policies::tuple_item>
tuple_caster	src/pybind11/include/pybind11/cast.h	/^template <template<typename...> class Tuple, typename... Ts> class tuple_caster {$/;"	c
tuple_item	src/pybind11/include/pybind11/pytypes.h	/^struct tuple_item {$/;"	s
tuple_iterator	src/pybind11/include/pybind11/pytypes.h	/^using tuple_iterator = generic_iterator<iterator_policies::sequence_fast_readonly>;$/;"	t	typeref:typename:generic_iterator<iterator_policies::sequence_fast_readonly>
twist_with_covariance_stamped_full_text	tools/genmsg/test/test_genmsg_gentools.py	/^twist_with_covariance_stamped_full_text = """# This represents an estimate twist with reference /;"	v
type	src/elka_comm/common/elka.h	/^  uint8_t snd_params, type, length;$/;"	m	struct:elka_msg_id_s	typeref:typename:uint8_t
type	src/elka_comm/common/elka_comm.cpp	/^  uint8_t snd_params, type, length;$/;"	m	struct:elka_msg_id_s	typeref:typename:uint8_t	file:
type	src/pybind11/include/pybind11/attr.h	/^    const std::type_info *type = nullptr;$/;"	m	struct:type_record	typeref:typename:const std::type_info *
type	src/pybind11/include/pybind11/attr.h	/^    struct type {$/;"	s	struct:call_guard
type	src/pybind11/include/pybind11/attr.h	/^    using type = T;$/;"	t	struct:call_guard	typeref:typename:T
type	src/pybind11/include/pybind11/attr.h	/^template <> struct call_guard<> { using type = detail::void_type; };$/;"	t	struct:call_guard	typeref:typename:detail::void_type
type	src/pybind11/include/pybind11/cast.h	/^    PyTypeObject *type;$/;"	m	struct:type_info	typeref:typename:PyTypeObject *
type	src/pybind11/include/pybind11/cast.h	/^    const detail::type_info *type;$/;"	m	struct:value_and_holder	typeref:typename:const detail::type_info *
type	src/pybind11/include/pybind11/cast.h	/^    std::string type;$/;"	m	struct:arg_v	typeref:typename:std::string
type	src/pybind11/include/pybind11/cast.h	/^    using type = Tuple<Ts...>;$/;"	t	class:tuple_caster	typeref:typename:Tuple<Ts...>
type	src/pybind11/include/pybind11/chrono.h	/^    typedef std::chrono::time_point<std::chrono::system_clock, Duration> type;$/;"	t	class:type_caster	typeref:typename:std::chrono::time_point<std::chrono::system_clock,Duration>
type	src/pybind11/include/pybind11/common.h	/^    PyObject *type, *value, *trace;$/;"	m	class:error_already_set	typeref:typename:PyObject *
type	src/pybind11/include/pybind11/common.h	/^    PyObject *type, *value, *trace;$/;"	m	struct:error_scope	typeref:typename:PyObject *
type	src/pybind11/include/pybind11/common.h	/^    using type = conditional_t<found, typename pack_element<index, Ts...>::type, Default>;$/;"	t	struct:exactly_one	typeref:typename:conditional_t<found,typename pack_element<index,Ts...>::type,Default>
type	src/pybind11/include/pybind11/common.h	/^struct exactly_one<P, Default> { using type = Default; };$/;"	t	struct:exactly_one	typeref:typename:Default
type	src/pybind11/include/pybind11/common.h	/^struct pack_element { using type = typename pack_element<N - 1, Ts...>::type; };$/;"	t	struct:pack_element	typeref:typename:pack_element<N-1,Ts...>::type
type	src/pybind11/include/pybind11/common.h	/^struct pack_element<0, T, Ts...> { using type = T; };$/;"	t	struct:pack_element	typeref:typename:T
type	src/pybind11/include/pybind11/common.h	/^template <typename ISeq, size_t, bool...> struct select_indices_impl { using type = ISeq; };$/;"	t	struct:select_indices_impl	typeref:typename:ISeq
type	src/pybind11/include/pybind11/common.h	/^template <typename T, size_t N> struct intrinsic_type<T[N]>       { typedef typename intrinsic_t/;"	t	struct:intrinsic_type	typeref:typename:intrinsic_type<T>::type
type	src/pybind11/include/pybind11/common.h	/^template <typename T, size_t N> struct intrinsic_type<const T[N]> { typedef typename intrinsic_t/;"	t	struct:intrinsic_type	typeref:typename:intrinsic_type<T>::type
type	src/pybind11/include/pybind11/common.h	/^template <typename T, typename... \/*Us*\/> struct deferred_type { using type = T; };$/;"	t	struct:deferred_type	typeref:typename:T
type	src/pybind11/include/pybind11/common.h	/^template <typename T> struct intrinsic_type                       { typedef T type; };$/;"	t	struct:intrinsic_type	typeref:typename:T
type	src/pybind11/include/pybind11/common.h	/^template <typename T> struct intrinsic_type<T&&>                  { typedef typename intrinsic_t/;"	t	struct:intrinsic_type	typeref:typename:intrinsic_type<T>::type
type	src/pybind11/include/pybind11/common.h	/^template <typename T> struct intrinsic_type<T&>                   { typedef typename intrinsic_t/;"	t	struct:intrinsic_type	typeref:typename:intrinsic_type<T>::type
type	src/pybind11/include/pybind11/common.h	/^template <typename T> struct intrinsic_type<T*>                   { typedef typename intrinsic_t/;"	t	struct:intrinsic_type	typeref:typename:intrinsic_type<T>::type
type	src/pybind11/include/pybind11/common.h	/^template <typename T> struct intrinsic_type<const T>              { typedef typename intrinsic_t/;"	t	struct:intrinsic_type	typeref:typename:intrinsic_type<T>::type
type	src/pybind11/include/pybind11/common.h	/^template <typename...> struct void_t_impl { using type = void; };$/;"	t	struct:void_t_impl	typeref:typename:void
type	src/pybind11/include/pybind11/common.h	/^template<size_t ...S> struct make_index_sequence_impl <0, S...> { typedef index_sequence<S...> t/;"	t	struct:make_index_sequence_impl	typeref:typename:index_sequence<S...>
type	src/pybind11/include/pybind11/eigen.h	/^struct eigen_extract_stride<Eigen::Map<PlainObjectType, MapOptions, StrideType>> { using type = /;"	t	struct:eigen_extract_stride	typeref:typename:StrideType
type	src/pybind11/include/pybind11/eigen.h	/^struct eigen_extract_stride<Eigen::Ref<PlainObjectType, Options, StrideType>> { using type = Str/;"	t	struct:eigen_extract_stride	typeref:typename:StrideType
type	src/pybind11/include/pybind11/eigen.h	/^template <typename Type> struct eigen_extract_stride { using type = Type; };$/;"	t	struct:eigen_extract_stride	typeref:typename:Type
type	src/pybind11/include/pybind11/functional.h	/^    using type = std::function<Return(Args...)>;$/;"	t	struct:type_caster
type	src/pybind11/include/pybind11/numpy.h	/^    char type;$/;"	m	struct:PyArrayDescr_Proxy	typeref:typename:char
type	src/pybind11/include/pybind11/numpy.h	/^    typedef T type;$/;"	t	struct:array_info_scalar	typeref:typename:T
type	src/pybind11/include/pybind11/numpy.h	/^    using type = array_t<T, ExtraFlags>;$/;"	t	struct:pyobject_caster	typeref:typename:array_t<T,ExtraFlags>
type	src/pybind11/include/pybind11/numpy.h	/^    using type = conditional_t<vectorize, array_t<remove_cv_t<call_type>, array::forcecast>, T>;$/;"	t	struct:vectorize_arg	typeref:typename:conditional_t<vectorize,array_t<remove_cv_t<call_type>,array::forcecast>,T>
type	src/pybind11/include/pybind11/numpy.h	/^    using type = typename array_info<T>::type;$/;"	t	struct:array_info	typeref:typename:array_info<T>::type
type	src/pybind11/include/pybind11/pybind11.h	/^    using type = type_;$/;"	t	class:class_	typeref:typename:type_
type	src/pybind11/include/pybind11/stl.h	/^    using type = Type;$/;"	t	struct:set_caster	typeref:typename:Type
type	src/pybind11/tools/clang/cindex.py	/^    def type(self):$/;"	m	class:Cursor
type_alias	src/pybind11/include/pybind11/pybind11.h	/^    using type_alias = detail::exactly_one_t<is_subtype, void, options...>;$/;"	t	class:class_	typeref:typename:detail::exactly_one_t<is_subtype,void,options...>
type_caster	src/elka_comm/common/elka_comm.cpp	/^	template <> struct type_caster<dev_id_t> {$/;"	s	namespace:pybind11::detail	file:
type_caster	src/pybind11/include/pybind11/cast.h	/^class type_caster<T, enable_if_t<is_pyobject<T>::value>> : public pyobject_caster<T> { };$/;"	c
type_caster	src/pybind11/include/pybind11/cast.h	/^class type_caster<std::shared_ptr<T>> : public copyable_holder_caster<T, std::shared_ptr<T>> { }/;"	c
type_caster	src/pybind11/include/pybind11/cast.h	/^class type_caster<std::unique_ptr<type, deleter>>$/;"	c
type_caster	src/pybind11/include/pybind11/cast.h	/^struct type_caster<T, enable_if_t<std::is_arithmetic<T>::value && !is_std_char_type<T>::value>> /;"	s
type_caster	src/pybind11/include/pybind11/cast.h	/^struct type_caster<std::basic_string<CharT, Traits, Allocator>, enable_if_t<is_std_char_type<Cha/;"	s
type_caster	src/pybind11/include/pybind11/cast.h	/^struct type_caster<std::basic_string_view<CharT, Traits>, enable_if_t<is_std_char_type<CharT>::v/;"	s
type_caster	src/pybind11/include/pybind11/cast.h	/^template <> class type_caster<bool> {$/;"	c
type_caster	src/pybind11/include/pybind11/cast.h	/^template <> class type_caster<std::nullptr_t> : public void_caster<std::nullptr_t> { };$/;"	c
type_caster	src/pybind11/include/pybind11/cast.h	/^template <> class type_caster<void> : public type_caster<void_type> {$/;"	c
type_caster	src/pybind11/include/pybind11/cast.h	/^template <> class type_caster<void_type> : public void_caster<void_type> {};$/;"	c
type_caster	src/pybind11/include/pybind11/cast.h	/^template <typename CharT> struct type_caster<CharT, enable_if_t<is_std_char_type<CharT>::value>>/;"	s
type_caster	src/pybind11/include/pybind11/cast.h	/^template <typename T1, typename T2> class type_caster<std::pair<T1, T2>>$/;"	c
type_caster	src/pybind11/include/pybind11/cast.h	/^template <typename type, typename SFINAE = void> class type_caster : public type_caster_base<typ/;"	c
type_caster	src/pybind11/include/pybind11/cast.h	/^template <typename type> class type_caster<std::reference_wrapper<type>> {$/;"	c
type_caster	src/pybind11/include/pybind11/cast.h	/^template <typename... Ts> class type_caster<std::tuple<Ts...>>$/;"	c
type_caster	src/pybind11/include/pybind11/chrono.h	/^template <typename Clock, typename Duration> class type_caster<std::chrono::time_point<Clock, Du/;"	c
type_caster	src/pybind11/include/pybind11/chrono.h	/^template <typename Duration> class type_caster<std::chrono::time_point<std::chrono::system_clock/;"	c
type_caster	src/pybind11/include/pybind11/chrono.h	/^template <typename Rep, typename Period> class type_caster<std::chrono::duration<Rep, Period>>$/;"	c
type_caster	src/pybind11/include/pybind11/complex.h	/^template <typename T> class type_caster<std::complex<T>> {$/;"	c
type_caster	src/pybind11/include/pybind11/eigen.h	/^struct type_caster<$/;"	s
type_caster	src/pybind11/include/pybind11/eigen.h	/^struct type_caster<Type, enable_if_t<is_eigen_dense_plain<Type>::value>> {$/;"	s
type_caster	src/pybind11/include/pybind11/eigen.h	/^struct type_caster<Type, enable_if_t<is_eigen_other<Type>::value>> {$/;"	s
type_caster	src/pybind11/include/pybind11/eigen.h	/^struct type_caster<Type, enable_if_t<is_eigen_sparse<Type>::value>> {$/;"	s
type_caster	src/pybind11/include/pybind11/eigen.h	/^template <typename Type> struct type_caster<Type, enable_if_t<is_eigen_dense_map<Type>::value>>$/;"	s
type_caster	src/pybind11/include/pybind11/functional.h	/^struct type_caster<std::function<Return(Args...)>> {$/;"	s
type_caster	src/pybind11/include/pybind11/numpy.h	/^struct type_caster<unchecked_mutable_reference<T, Dim>> : type_caster<unchecked_reference<T, Dim/;"	s
type_caster	src/pybind11/include/pybind11/numpy.h	/^struct type_caster<unchecked_reference<T, Dim>> {$/;"	s
type_caster	src/pybind11/include/pybind11/stl.h	/^struct type_caster<std::variant<Ts...>> : variant_caster<std::variant<Ts...>> { };$/;"	s
type_caster	src/pybind11/include/pybind11/stl.h	/^template <typename Key, typename Compare, typename Alloc> struct type_caster<std::set<Key, Compa/;"	s
type_caster	src/pybind11/include/pybind11/stl.h	/^template <typename Key, typename Hash, typename Equal, typename Alloc> struct type_caster<std::u/;"	s
type_caster	src/pybind11/include/pybind11/stl.h	/^template <typename Key, typename Value, typename Compare, typename Alloc> struct type_caster<std/;"	s
type_caster	src/pybind11/include/pybind11/stl.h	/^template <typename Key, typename Value, typename Hash, typename Equal, typename Alloc> struct ty/;"	s
type_caster	src/pybind11/include/pybind11/stl.h	/^template <typename Type, size_t Size> struct type_caster<std::array<Type, Size>>$/;"	s
type_caster	src/pybind11/include/pybind11/stl.h	/^template <typename Type, typename Alloc> struct type_caster<std::list<Type, Alloc>>$/;"	s
type_caster	src/pybind11/include/pybind11/stl.h	/^template <typename Type, typename Alloc> struct type_caster<std::vector<Type, Alloc>>$/;"	s
type_caster	src/pybind11/include/pybind11/stl.h	/^template <typename Type> struct type_caster<std::valarray<Type>>$/;"	s
type_caster	src/pybind11/include/pybind11/stl.h	/^template<> struct type_caster<std::experimental::nullopt_t>$/;"	s
type_caster	src/pybind11/include/pybind11/stl.h	/^template<> struct type_caster<std::nullopt_t>$/;"	s
type_caster	src/pybind11/include/pybind11/stl.h	/^template<typename T> struct type_caster<std::experimental::optional<T>>$/;"	s
type_caster	src/pybind11/include/pybind11/stl.h	/^template<typename T> struct type_caster<std::optional<T>>$/;"	s
type_caster	src/pybind11/tests/pybind11_tests.h	/^template<> class type_caster<RValueCaster> {$/;"	c
type_caster	src/pybind11/tests/test_copy_move.cpp	/^template <> struct type_caster<CopyOnlyInt> {$/;"	s	namespace:pybind11::detail	file:
type_caster	src/pybind11/tests/test_copy_move.cpp	/^template <> struct type_caster<MoveOnlyInt> {$/;"	s	namespace:pybind11::detail	file:
type_caster	src/pybind11/tests/test_copy_move.cpp	/^template <> struct type_caster<MoveOrCopyInt> {$/;"	s	namespace:pybind11::detail	file:
type_caster	src/pybind11/tests/test_methods_and_attributes.cpp	/^template <> struct type_caster<ArgAlwaysConverts> {$/;"	s	namespace:pybind11::detail	file:
type_caster	src/pybind11/tests/test_methods_and_attributes.cpp	/^template <> struct type_caster<ArgInspector1> {$/;"	s	namespace:pybind11::detail	file:
type_caster	src/pybind11/tests/test_methods_and_attributes.cpp	/^template <> struct type_caster<ArgInspector2> {$/;"	s	namespace:pybind11::detail	file:
type_caster	src/pybind11/tests/test_methods_and_attributes.cpp	/^template <> struct type_caster<DestructionTester> {$/;"	s	namespace:pybind11::detail	file:
type_caster_base	src/pybind11/include/pybind11/cast.h	/^    explicit type_caster_base(const std::type_info &info) : type_caster_generic(info) { }$/;"	f	class:type_caster_base
type_caster_base	src/pybind11/include/pybind11/cast.h	/^    type_caster_base() : type_caster_base(typeid(type)) { }$/;"	f	class:type_caster_base
type_caster_base	src/pybind11/include/pybind11/cast.h	/^template <typename type> class type_caster_base : public type_caster_generic {$/;"	c
type_caster_generic	src/pybind11/include/pybind11/cast.h	/^    PYBIND11_NOINLINE type_caster_generic(const std::type_info &type_info)$/;"	f	class:type_caster_generic	typeref:typename:PYBIND11_NOINLINE
type_caster_generic	src/pybind11/include/pybind11/cast.h	/^class type_caster_generic {$/;"	c
type_caster_holder	src/pybind11/include/pybind11/cast.h	/^using type_caster_holder = conditional_t<std::is_copy_constructible<holder_type>::value,$/;"	t	typeref:typename:conditional_t<std::is_copy_constructible<holder_type>::value,copyable_holder_caster<type,holder_type>,move_only_holder_caster<type,holder_type>>
type_descr	src/pybind11/include/pybind11/descr.h	/^template <size_t Size1, size_t Size2> auto constexpr type_descr(descr<Size1, Size2> descr) { ret/;"	f	typeref:typename:auto constexpr
type_equal_to	src/pybind11/include/pybind11/common.h	/^struct type_equal_to {$/;"	s
type_equal_to	src/pybind11/include/pybind11/common.h	/^using type_equal_to = std::equal_to<std::type_index>;$/;"	t	typeref:typename:std::equal_to<std::type_index>
type_hash	src/pybind11/include/pybind11/common.h	/^struct type_hash {$/;"	s
type_hash	src/pybind11/include/pybind11/common.h	/^using type_hash = std::hash<std::type_index>;$/;"	t	typeref:typename:std::hash<std::type_index>
type_id	src/pybind11/include/pybind11/typeid.h	/^template <typename T> static std::string type_id() {$/;"	f
type_info	src/pybind11/include/pybind11/cast.h	/^struct type_info {$/;"	s
type_list	src/pybind11/include/pybind11/common.h	/^template <typename...> struct type_list { };$/;"	s
type_map	src/pybind11/include/pybind11/common.h	/^using type_map = std::unordered_map<std::type_index, value_type, type_hash, type_equal_to>;$/;"	t	typeref:typename:std::unordered_map<std::type_index,value_type,type_hash,type_equal_to>
type_map	tools/px_generate_uorb_topic_helper.py	/^type_map = {$/;"	v
type_num	src/pybind11/include/pybind11/numpy.h	/^    int type_num;$/;"	m	struct:PyArrayDescr_Proxy	typeref:typename:int
type_record	src/pybind11/include/pybind11/attr.h	/^    PYBIND11_NOINLINE type_record()$/;"	f	struct:type_record	typeref:typename:PYBIND11_NOINLINE
type_record	src/pybind11/include/pybind11/attr.h	/^struct type_record {$/;"	s
type_size	src/pybind11/include/pybind11/attr.h	/^    size_t type_size = 0;$/;"	m	struct:type_record	typeref:typename:size_t
type_size	src/pybind11/include/pybind11/cast.h	/^    size_t type_size, holder_size_in_ptrs;$/;"	m	struct:type_info	typeref:typename:size_t
type_vec	src/pybind11/include/pybind11/cast.h	/^    using type_vec = std::vector<detail::type_info *>;$/;"	t	struct:values_and_holders	typeref:typename:std::vector<detail::type_info * >
typeinfo	src/pybind11/include/pybind11/cast.h	/^    const type_info *typeinfo = nullptr;$/;"	m	class:type_caster_generic	typeref:typename:const type_info *
typeobj	src/pybind11/include/pybind11/numpy.h	/^    PyObject *typeobj;$/;"	m	struct:PyArrayDescr_Proxy	typeref:typename:PyObject_HEAD PyObject *
types	src/pybind11/include/pybind11/cast.h	/^        const type_vec *types;$/;"	m	struct:values_and_holders::iterator	typeref:typename:const type_vec *
types	src/pybind11/include/pybind11/descr.h	/^    constexpr const std::type_info * const * types() const { return m_types; }$/;"	f	class:descr	typeref:typename:const std::type_info * const *
uart	src/elka_comm/qurt/snapdragon_uart_devices.h	/^namespace uart {$/;"	n
uart	src/elka_comm/qurt/snapdragon_uart_manager.h	/^namespace uart {$/;"	n
uint8_t	src/pybind11/include/pybind11/common.h	/^enum class return_value_policy : uint8_t {$/;"	g
uint8_t	src/pybind11/tests/test_numpy_dtypes.cpp	/^enum E2 : uint8_t { X = 1, Y = 2 };$/;"	g	file:
uint_	src/pybind11/tests/test_numpy_dtypes.cpp	/^    uint32_t uint_;$/;"	m	struct:PartialStruct	typeref:typename:uint32_t	file:
uint_	src/pybind11/tests/test_numpy_dtypes.cpp	/^    uint32_t uint_;$/;"	m	struct:SimpleStruct	typeref:typename:uint32_t	file:
unchecked	src/pybind11/include/pybind11/numpy.h	/^    template <ssize_t Dims = -1> detail::unchecked_reference<T, Dims> unchecked() const {$/;"	f	class:array_t	typeref:typename:detail::unchecked_reference<T,Dims>
unchecked	src/pybind11/include/pybind11/numpy.h	/^    template <typename T, ssize_t Dims = -1> detail::unchecked_reference<T, Dims> unchecked() co/;"	f	class:array	typeref:typename:detail::unchecked_reference<T,Dims>
unchecked_mutable_reference	src/pybind11/include/pybind11/numpy.h	/^class unchecked_mutable_reference : public unchecked_reference<T, Dims> {$/;"	c
unchecked_reference	src/pybind11/include/pybind11/numpy.h	/^    unchecked_reference(const void *data, const ssize_t *shape, const ssize_t *strides, enable_i/;"	f	class:unchecked_reference
unchecked_reference	src/pybind11/include/pybind11/numpy.h	/^class unchecked_reference {$/;"	c
undefined_t	src/pybind11/include/pybind11/operators.h	/^struct undefined_t { };$/;"	s
underlying_typedef_type	src/pybind11/tools/clang/cindex.py	/^    def underlying_typedef_type(self):$/;"	m	class:Cursor
unlucky_number	src/pybind11/tests/test_virtual_functions.cpp	/^    int unlucky_number() override { PYBIND11_OVERLOAD(int, B_Repeat, unlucky_number, ); }$/;"	f	class:PyB_Repeat	typeref:typename:int	file:
unlucky_number	src/pybind11/tests/test_virtual_functions.cpp	/^    int unlucky_number() override { PYBIND11_OVERLOAD(int, Base, unlucky_number, ); }$/;"	f	class:PyB_Tpl	typeref:typename:int	file:
unlucky_number	src/pybind11/tests/test_virtual_functions.cpp	/^    int unlucky_number() override { PYBIND11_OVERLOAD(int, C_Repeat, unlucky_number, ); }$/;"	f	class:PyC_Repeat	typeref:typename:int	file:
unlucky_number	src/pybind11/tests/test_virtual_functions.cpp	/^    int unlucky_number() override { PYBIND11_OVERLOAD(int, D_Repeat, unlucky_number, ); }$/;"	f	class:PyD_Repeat	typeref:typename:int	file:
unlucky_number	src/pybind11/tests/test_virtual_functions.cpp	/^    int unlucky_number() override { PYBIND11_OVERLOAD_PURE(int, A_Repeat, unlucky_number, ); }$/;"	f	class:PyA_Repeat	typeref:typename:int	file:
unlucky_number	src/pybind11/tests/test_virtual_functions.cpp	/^    int unlucky_number() override { PYBIND11_OVERLOAD_PURE(int, Base, unlucky_number, ); }$/;"	f	class:PyA_Tpl	typeref:typename:int	file:
unlucky_number	src/pybind11/tests/test_virtual_functions.py	/^        def unlucky_number(self):$/;"	m	class:test_inheriting_repeat.AR
unlucky_number	src/pybind11/tests/test_virtual_functions.py	/^        def unlucky_number(self):$/;"	m	class:test_inheriting_repeat.AT
unlucky_number	src/pybind11/tests/test_virtual_functions.py	/^        def unlucky_number(self):$/;"	m	class:test_inheriting_repeat.BT
unlucky_number	src/pybind11/tests/test_virtual_functions.py	/^        def unlucky_number(self):$/;"	m	class:test_inheriting_repeat.DR
unlucky_number	src/pybind11/tests/test_virtual_functions.py	/^        def unlucky_number(self):$/;"	m	class:test_inheriting_repeat.DT
unlucky_number	src/pybind11/tests/test_virtual_functions.py	/^        def unlucky_number(self):$/;"	m	class:test_inheriting_repeat.DT2
unordered	src/pybind11/tests/conftest.py	/^    def unordered(self):$/;"	m	class:Capture
unpacking_collector	src/pybind11/include/pybind11/cast.h	/^    explicit unpacking_collector(Ts &&...values) {$/;"	f	class:unpacking_collector
unpacking_collector	src/pybind11/include/pybind11/cast.h	/^class unpacking_collector {$/;"	c
unresolved_types	tools/genmsg/scripts/genmsg_check_deps.py	/^    unresolved_types = spec.request.types + spec.response.types$/;"	v
unresolved_types	tools/genmsg/scripts/genmsg_check_deps.py	/^    unresolved_types = spec.types$/;"	v
update	serial/python/gui.py	/^    def update(self, name):$/;"	m	class:PlotData
update	serial/python/gui.py	/^    def update(self, plot_name, dataset_name):$/;"	m	class:MainWindow
update	serial/python/parse_vispy.py	/^    def update(self):$/;"	m	class:DataPlotter
update_all	serial/python/gui.py	/^    def update_all(self):$/;"	m	class:MainWindow
update_all	serial/python/gui.py	/^    def update_all(self):$/;"	m	class:PlotData
update_time	src/elka_comm/gnd_station/elka_devices.cpp	/^void elka::GroundPort::update_time() {$/;"	f	class:elka::GroundPort	typeref:typename:void
update_time	src/elka_comm/posix/elka_devices.cpp	/^void elka::PX4Port::update_time() {$/;"	f	class:elka::PX4Port	typeref:typename:void
update_time	src/elka_comm/qurt/snapdragon_uart_devices.cpp	/^void uart::UARTPort::update_time() {$/;"	f	class:uart::UARTPort	typeref:typename:void
upload	tools/genmsg/doc/Makefile	/^upload: html$/;"	t
us_t	src/pybind11/include/pybind11/chrono.h	/^        using us_t = duration<int, std::micro>;$/;"	t	function:duration_caster::cast	typeref:typename:duration<int,std::micro>
us_t	src/pybind11/include/pybind11/chrono.h	/^        using us_t = duration<int, std::micro>;$/;"	t	function:type_caster::cast	typeref:typename:duration<int,std::micro>
usage	src/elka_comm/posix/elka_posix.cpp	/^void usage() {$/;"	f	typeref:typename:void
util_random	src/elka_comm/common/elka.cpp	/^uint16_t util_random(uint16_t min, uint16_t max) {$/;"	f	typeref:typename:uint16_t
util_srand	src/elka_comm/common/elka.cpp	/^void util_srand(uint16_t seed) {$/;"	f	typeref:typename:void
v	src/pybind11/include/pybind11/common.h	/^    std::vector<T> v;$/;"	m	class:any_container	typeref:typename:std::vector<T>
v	src/pybind11/tests/test_copy_move.cpp	/^        int v;$/;"	m	struct:__anon79d098d60102::MoveIssue1	typeref:typename:int	file:
v	src/pybind11/tests/test_copy_move.cpp	/^        int v;$/;"	m	struct:__anon79d098d60102::MoveIssue2	typeref:typename:int	file:
v	src/pybind11/tests/test_modules.cpp	/^    int v;$/;"	m	class:A	typeref:typename:int	file:
v	src/pybind11/tests/test_multiple_inheritance.py	/^        def v(self):$/;"	m	class:test_multiple_inheritance_python.B1
v	src/pybind11/tests/test_multiple_inheritance.py	/^        def v(self):$/;"	m	class:test_multiple_inheritance_python.B2
v	src/pybind11/tests/test_multiple_inheritance.py	/^        def v(self):$/;"	m	class:test_multiple_inheritance_python.B3
v	src/pybind11/tests/test_multiple_inheritance.py	/^        def v(self):$/;"	m	class:test_multiple_inheritance_python.B4
v	src/pybind11/tests/test_smart_ptr.cpp	/^    int v;$/;"	m	struct:ElementA	typeref:typename:int	file:
v	src/pybind11/tests/test_virtual_functions.cpp	/^        std::string v;$/;"	m	class:TEST_SUBMODULE::OverrideTest	typeref:typename:std::string	file:
v0	src/pybind11/include/pybind11/cast.h	/^            char16_t v0 = static_cast<char16_t>(value[0]);$/;"	m	struct:type_caster	typeref:typename:char16_t
v0	src/pybind11/include/pybind11/cast.h	/^            unsigned char v0 = static_cast<unsigned char>(value[0]);$/;"	m	struct:type_caster	typeref:typename:unsigned char
v1	src/pybind11/tests/test_methods_and_attributes.cpp	/^    SimpleValue v1;$/;"	m	struct:TestPropRVP	typeref:typename:SimpleValue	file:
v2	src/pybind11/tests/test_methods_and_attributes.cpp	/^    SimpleValue v2;$/;"	m	struct:TestPropRVP	typeref:typename:SimpleValue	file:
v2.0.0 (Jan 1, 2017)	src/pybind11/docs/changelog.rst	/^v2.0.0 (Jan 1, 2017)$/;"	s	chapter:Changelog
v2.0.0-rc1 (Dec 23, 2016)	src/pybind11/docs/changelog.rst	/^v2.0.0-rc1 (Dec 23, 2016)$/;"	s	chapter:Changelog
v2.0.1 (Jan 4, 2017)	src/pybind11/docs/changelog.rst	/^v2.0.1 (Jan 4, 2017)$/;"	s	chapter:Changelog
v2.1.0 (March 22, 2017)	src/pybind11/docs/changelog.rst	/^v2.1.0 (March 22, 2017)$/;"	s	chapter:Changelog
v2.1.1 (April 7, 2017)	src/pybind11/docs/changelog.rst	/^v2.1.1 (April 7, 2017)$/;"	s	chapter:Changelog
v2.2.0 (Not yet released)	src/pybind11/docs/changelog.rst	/^v2.2.0 (Not yet released)$/;"	s	chapter:Changelog
val	src/pybind11/tests/test_methods_and_attributes.cpp	/^    int val = -1;$/;"	m	struct:StrIssue	typeref:typename:int	file:
valid	src/pybind11/tests/test_callbacks.cpp	/^  bool valid = true;$/;"	m	struct:MovableObject	typeref:typename:bool	file:
value	src/pybind11/include/pybind11/attr.h	/^    handle value;      \/\/\/< Associated Python object$/;"	m	struct:argument_record	typeref:typename:handle
value	src/pybind11/include/pybind11/attr.h	/^    handle value;$/;"	m	struct:metaclass	typeref:typename:handle
value	src/pybind11/include/pybind11/attr.h	/^struct doc { const char *value; doc(const char *value) : value(value) { } };$/;"	m	struct:doc	typeref:typename:const char *
value	src/pybind11/include/pybind11/attr.h	/^struct name { const char *value; name(const char *value) : value(value) { } };$/;"	m	struct:name	typeref:typename:const char *
value	src/pybind11/include/pybind11/attr.h	/^struct scope { handle value; scope(const handle &s) : value(s) { } };$/;"	m	struct:scope	typeref:typename:handle
value	src/pybind11/include/pybind11/attr.h	/^struct sibling { handle value; sibling(const handle &value) : value(value.ptr()) { } };$/;"	m	struct:sibling	typeref:typename:handle
value	src/pybind11/include/pybind11/cast.h	/^        auto &value = static_cast<StringType &>(str_caster);$/;"	m	struct:type_caster	typeref:typename:auto &
value	src/pybind11/include/pybind11/cast.h	/^    object value;$/;"	m	struct:arg_v	typeref:typename:object
value	src/pybind11/include/pybind11/cast.h	/^    void *value = nullptr;$/;"	m	class:type_caster	typeref:typename:void *
value	src/pybind11/include/pybind11/cast.h	/^    void *value = nullptr;$/;"	m	class:type_caster_generic	typeref:typename:void *
value	src/pybind11/include/pybind11/cast.h	/^template <typename T, bool Value = false> struct always_construct_holder { static constexpr bool/;"	m	struct:always_construct_holder	typeref:typename:constexpr bool
value	src/pybind11/include/pybind11/common.h	/^    PyObject *type, *value, *trace;$/;"	m	class:error_already_set	typeref:typename:PyObject **
value	src/pybind11/include/pybind11/common.h	/^    PyObject *type, *value, *trace;$/;"	m	struct:error_scope	typeref:typename:PyObject **
value	src/pybind11/include/pybind11/common.h	/^    T, detail::enable_if_t<std::is_arithmetic<T>::value>>::value[2];$/;"	m	class:format_descriptor< T, detail::enable_if_t<std::is_arithmetic<T>::value>>	typeref:typename:constexpr const char[2]
value	src/pybind11/include/pybind11/common.h	/^    static constexpr bool value = true;$/;"	m	struct:is_fmt_numeric	typeref:typename:constexpr bool
value	src/pybind11/include/pybind11/common.h	/^    struct _Py_atomic_address { void *value; };$/;"	m	struct:_Py_atomic_address	typeref:typename:void *
value	src/pybind11/include/pybind11/common.h	/^template <typename T, typename SFINAE = void> struct is_fmt_numeric { static constexpr bool valu/;"	m	struct:is_fmt_numeric	typeref:typename:constexpr bool
value	src/pybind11/include/pybind11/complex.h	/^    static constexpr bool value = true;$/;"	m	struct:is_fmt_numeric	typeref:typename:constexpr bool
value	src/pybind11/include/pybind11/complex.h	/^    std::complex<T>, detail::enable_if_t<std::is_floating_point<T>::value>>::value[3];$/;"	m	class:format_descriptor< std::complex<T>, detail::enable_if_t<std::is_floating_point<T>::value>>	typeref:typename:constexpr const char[3]
value	src/pybind11/include/pybind11/eigen.h	/^    Type value;$/;"	m	struct:type_caster	typeref:typename:Type
value	src/pybind11/include/pybind11/numpy.h	/^    static constexpr int value = values[detail::is_fmt_numeric<T>::index];$/;"	m	struct:npy_format_descriptor	typeref:typename:constexpr int
value	src/pybind11/include/pybind11/pybind11.h	/^    enum_& value(char const* name, Type value) {$/;"	f	class:enum_	typeref:typename:enum_ &
value	src/pybind11/include/pybind11/pytypes.h	/^    PyObject *key, *value;$/;"	m	class:dict_readonly	typeref:typename:PyObject **
value	src/pybind11/include/pybind11/pytypes.h	/^    T value;$/;"	m	struct:arrow_proxy	typeref:typename:T
value	src/pybind11/include/pybind11/stl_bind.h	/^    static constexpr const bool value =$/;"	m	struct:is_comparable	typeref:typename:constexpr const bool
value	src/pybind11/tests/constructor_stats.h	/^    template <typename T, typename... Tmore> void value(const T &v, Tmore &&...args) {$/;"	f	class:ConstructorStats	typeref:typename:void
value	src/pybind11/tests/constructor_stats.h	/^    void value() {} \/\/ Recursion terminator$/;"	f	class:ConstructorStats	typeref:typename:void
value	src/pybind11/tests/pybind11_tests.h	/^    int value() const { return i; }$/;"	f	class:UserType	typeref:typename:int
value	src/pybind11/tests/test_buffers.cpp	/^    int32_t value = 0;$/;"	m	struct:PTMFBuffer	typeref:typename:int32_t	file:
value	src/pybind11/tests/test_buffers.cpp	/^    std::unique_ptr<int32_t> value;$/;"	m	class:ConstPTMFBuffer	typeref:typename:std::unique_ptr<int32_t>	file:
value	src/pybind11/tests/test_copy_move.cpp	/^    CopyOnlyInt value;$/;"	m	struct:pybind11::detail::type_caster	typeref:typename:CopyOnlyInt	file:
value	src/pybind11/tests/test_copy_move.cpp	/^    int value = 1;$/;"	m	struct:PrivateOpNew	typeref:typename:int	file:
value	src/pybind11/tests/test_copy_move.cpp	/^    int value;$/;"	m	class:CopyOnlyInt	typeref:typename:int	file:
value	src/pybind11/tests/test_copy_move.cpp	/^    int value;$/;"	m	class:MoveOnlyInt	typeref:typename:int	file:
value	src/pybind11/tests/test_copy_move.cpp	/^    int value;$/;"	m	class:MoveOrCopyInt	typeref:typename:int	file:
value	src/pybind11/tests/test_docstring_options.cpp	/^    int value;$/;"	m	struct:DocstringTestFoo	typeref:typename:int	file:
value	src/pybind11/tests/test_methods_and_attributes.cpp	/^    int value = 0;$/;"	m	class:ExampleMandA	typeref:typename:int	file:
value	src/pybind11/tests/test_methods_and_attributes.cpp	/^    int value = 1;$/;"	m	struct:TestProperties	typeref:typename:int	file:
value	src/pybind11/tests/test_methods_and_attributes.cpp	/^    int value = 99;$/;"	m	struct:TestPropertiesOverride	typeref:typename:int	file:
value	src/pybind11/tests/test_methods_and_attributes.cpp	/^struct SimpleValue { int value = 1; };$/;"	m	struct:SimpleValue	typeref:typename:int	file:
value	src/pybind11/tests/test_numpy_vectorize.cpp	/^    int value = 0;$/;"	m	struct:VectorizeTestClass	typeref:typename:int	file:
value	src/pybind11/tests/test_numpy_vectorize.cpp	/^    int value;$/;"	m	struct:NonPODClass	typeref:typename:int	file:
value	src/pybind11/tests/test_operator_overloading.cpp	/^    int value = -2;$/;"	m	struct:NestABase	typeref:typename:int	file:
value	src/pybind11/tests/test_operator_overloading.cpp	/^    int value = 3;$/;"	m	struct:NestA	typeref:typename:int	file:
value	src/pybind11/tests/test_operator_overloading.cpp	/^    int value = 4;$/;"	m	struct:NestB	typeref:typename:int	file:
value	src/pybind11/tests/test_operator_overloading.cpp	/^    int value = 5;$/;"	m	struct:NestC	typeref:typename:int	file:
value	src/pybind11/tests/test_pickling.cpp	/^    const std::string &value() const { return m_value; }$/;"	f	class:Pickleable	typeref:typename:const std::string &	file:
value	src/pybind11/tests/test_pickling.cpp	/^    std::string value;$/;"	m	class:PickleableWithDict	typeref:typename:std::string	file:
value	src/pybind11/tests/test_smart_ptr.cpp	/^    int value() { return v; }$/;"	f	struct:ElementA	typeref:typename:int	file:
value	src/pybind11/tests/test_smart_ptr.cpp	/^    int value;$/;"	m	class:MyObject1	typeref:typename:int	file:
value	src/pybind11/tests/test_smart_ptr.cpp	/^    int value;$/;"	m	class:MyObject2	typeref:typename:int	file:
value	src/pybind11/tests/test_smart_ptr.cpp	/^    int value;$/;"	m	class:MyObject3	typeref:typename:int	file:
value	src/pybind11/tests/test_smart_ptr.cpp	/^    int value;$/;"	m	class:MyObject4	typeref:typename:int	file:
value	src/pybind11/tests/test_smart_ptr.cpp	/^    int value;$/;"	m	class:MyObject5	typeref:typename:int	file:
value	src/pybind11/tests/test_stl.cpp	/^        struct Value { int value; };$/;"	m	struct:TEST_SUBMODULE::MoveOutContainer::Value	typeref:typename:int	file:
value	src/pybind11/tests/test_stl.cpp	/^    int value;$/;"	m	struct:NoAssign	typeref:typename:int	file:
value	src/pybind11/tests/test_stl_binders.cpp	/^    int value;$/;"	m	class:E_nc	typeref:typename:int	file:
value	src/pybind11/tests/test_virtual_functions.cpp	/^        struct A { std::string value = "hi"; };$/;"	m	struct:TEST_SUBMODULE::OverrideTest::A	typeref:typename:std::string	file:
value	src/pybind11/tests/test_virtual_functions.cpp	/^    int value;$/;"	m	class:Movable	typeref:typename:int	file:
value	src/pybind11/tests/test_virtual_functions.cpp	/^    std::unique_ptr<int> value;$/;"	m	class:NonCopyable	typeref:typename:std::unique_ptr<int>	file:
value_and_holder	src/pybind11/include/pybind11/cast.h	/^    value_and_holder(instance *i, const detail::type_info *type, size_t vpos, size_t index) :$/;"	f	struct:value_and_holder
value_and_holder	src/pybind11/include/pybind11/cast.h	/^    value_and_holder(size_t index) : index{index} {}$/;"	f	struct:value_and_holder
value_and_holder	src/pybind11/include/pybind11/cast.h	/^struct value_and_holder {$/;"	s
value_conv	src/pybind11/include/pybind11/stl.h	/^    using value_conv = make_caster<Value>;$/;"	t	struct:array_caster	typeref:typename:make_caster<Value>
value_conv	src/pybind11/include/pybind11/stl.h	/^    using value_conv = make_caster<Value>;$/;"	t	struct:list_caster	typeref:typename:make_caster<Value>
value_conv	src/pybind11/include/pybind11/stl.h	/^    using value_conv = make_caster<Value>;$/;"	t	struct:map_caster	typeref:typename:make_caster<Value>
value_conv	src/pybind11/include/pybind11/stl.h	/^    using value_conv = make_caster<typename T::value_type>;$/;"	t	struct:optional_caster	typeref:typename:make_caster<typename T::value_type>
value_ptr	src/pybind11/include/pybind11/cast.h	/^    template <typename V = void> V *&value_ptr() const {$/;"	f	struct:value_and_holder	typeref:typename:V * &
value_type	src/pybind11/include/pybind11/numpy.h	/^    using value_type = T;$/;"	t	class:array_t	typeref:typename:T
value_type	src/pybind11/include/pybind11/numpy.h	/^    using value_type = container_type::value_type;$/;"	t	class:common_iterator	typeref:typename:container_type::value_type
value_type	src/pybind11/include/pybind11/pytypes.h	/^    using value_type = handle;$/;"	t	class:iterator	typeref:typename:handle
value_type	src/pybind11/include/pybind11/pytypes.h	/^    using value_type = handle;$/;"	t	class:sequence_fast_readonly	typeref:typename:handle
value_type	src/pybind11/include/pybind11/pytypes.h	/^    using value_type = object;$/;"	t	class:sequence_slow_readwrite	typeref:typename:object
value_type	src/pybind11/include/pybind11/pytypes.h	/^    using value_type = std::pair<handle, handle>;$/;"	t	class:dict_readonly	typeref:typename:std::pair<handle,handle>
value_type	src/pybind11/include/pybind11/pytypes.h	/^    using value_type = typename Policy::value_type;$/;"	t	class:generic_iterator	typeref:typename:Policy::value_type
values	src/pybind11/tests/constructor_stats.h	/^    py::list values() {$/;"	f	class:ConstructorStats	typeref:typename:py::list
values_and_holders	src/pybind11/include/pybind11/cast.h	/^    values_and_holders(instance *inst) : inst{inst}, tinfo(all_type_info(Py_TYPE(inst))) {}$/;"	f	struct:values_and_holders
values_and_holders	src/pybind11/include/pybind11/cast.h	/^struct values_and_holders {$/;"	s
values_and_holders	src/pybind11/include/pybind11/common.h	/^            void **values_and_holders;$/;"	m	struct:instance::__anon7b367e7c010a::__anon7b367e7c0208	typeref:typename:void **
vanilla	src/pybind11/tests/test_multiple_inheritance.cpp	/^    std::string vanilla() { return "Vanilla"; };$/;"	f	struct:Vanilla	typeref:typename:std::string	file:
variant_caster	src/pybind11/include/pybind11/stl.h	/^struct variant_caster<V<Ts...>> {$/;"	s
variant_caster_visitor	src/pybind11/include/pybind11/stl.h	/^struct variant_caster_visitor {$/;"	s
vector	src/pybind11/include/pybind11/eigen.h	/^        vector = Type::IsVectorAtCompileTime, \/\/ At least one dimension has fixed size 1$/;"	m	struct:EigenProps	typeref:typename:constexpr bool
vector_accessor	src/pybind11/include/pybind11/stl_bind.h	/^void vector_accessor(enable_if_t<vector_needs_copy<Vector>::value, Class_> &cl) {$/;"	f	typeref:typename:void
vector_buffer	src/pybind11/include/pybind11/stl_bind.h	/^vector_buffer(Class_& cl) {$/;"	f	typeref:typename:enable_if_t<detail::any_of<std::is_same<Args,buffer_protocol>...>::value>
vector_has_data_and_format	src/pybind11/include/pybind11/stl_bind.h	/^struct vector_has_data_and_format : std::false_type {};$/;"	s
vector_has_data_and_format	src/pybind11/include/pybind11/stl_bind.h	/^struct vector_has_data_and_format<Vector, enable_if_t<std::is_same<decltype(format_descriptor<ty/;"	s
vector_if_copy_constructible	src/pybind11/include/pybind11/stl_bind.h	/^template <typename, typename, typename... Args> void vector_if_copy_constructible(const Args &../;"	f	typeref:typename:void
vector_if_copy_constructible	src/pybind11/include/pybind11/stl_bind.h	/^void vector_if_copy_constructible(enable_if_t<$/;"	f	typeref:typename:void
vector_if_equal_operator	src/pybind11/include/pybind11/stl_bind.h	/^template <typename, typename, typename... Args> void vector_if_equal_operator(const Args &...) {/;"	f	typeref:typename:void
vector_if_equal_operator	src/pybind11/include/pybind11/stl_bind.h	/^void vector_if_equal_operator(enable_if_t<is_comparable<Vector>::value, Class_> &cl) {$/;"	f	typeref:typename:void
vector_if_insertion_operator	src/pybind11/include/pybind11/stl_bind.h	/^template <typename Vector, typename Class_> auto vector_if_insertion_operator(Class_ &cl, std::s/;"	f	typeref:typename:decltype (std::declval<std::ostream &> ()<<std::declval<typename Vector::value_type> (),void ())
vector_if_insertion_operator	src/pybind11/include/pybind11/stl_bind.h	/^template <typename, typename, typename... Args> void vector_if_insertion_operator(const Args &../;"	f	typeref:typename:void
vector_modifiers	src/pybind11/include/pybind11/stl_bind.h	/^template <typename, typename, typename... Args> void vector_modifiers(const Args &...) { }$/;"	f	typeref:typename:void
vector_modifiers	src/pybind11/include/pybind11/stl_bind.h	/^void vector_modifiers(enable_if_t<std::is_copy_constructible<typename Vector::value_type>::value/;"	f	typeref:typename:void
vector_needs_copy	src/pybind11/include/pybind11/stl_bind.h	/^template <typename Vector> using vector_needs_copy = negation<$/;"	t
vectorize	src/pybind11/include/pybind11/numpy.h	/^    static constexpr bool vectorize =$/;"	m	struct:vectorize_arg	typeref:typename:constexpr bool
vectorize	src/pybind11/include/pybind11/numpy.h	/^Helper vectorize(Return (Class::*f)(Args...) const) {$/;"	f	typeref:typename:> Helper
vectorize	src/pybind11/include/pybind11/numpy.h	/^Helper vectorize(Return (Class::*f)(Args...)) {$/;"	f	typeref:typename:> Helper
vectorize	src/pybind11/include/pybind11/numpy.h	/^auto vectorize(Func &&f) -> decltype($/;"	f	typeref:typename:decltype (detail::vectorize_extractor (std::forward<Func> (f),(FuncType *)nullptr))
vectorize	src/pybind11/include/pybind11/numpy.h	/^vectorize(Return (*f) (Args ...)) {$/;"	f
vectorize_arg	src/pybind11/include/pybind11/numpy.h	/^struct vectorize_arg {$/;"	s
vectorize_extractor	src/pybind11/include/pybind11/numpy.h	/^vectorize_extractor(const Func &f, Return (*) (Args ...)) {$/;"	f	typeref:typename:vectorize_helper<Func,Return,Args...>
vectorize_helper	src/pybind11/include/pybind11/numpy.h	/^    explicit vectorize_helper(T &&f) : f(std::forward<T>(f)) { }$/;"	f	struct:vectorize_helper
vectorize_helper	src/pybind11/include/pybind11/numpy.h	/^struct vectorize_helper {$/;"	s
verbose	tools/genmsg/src/genmsg/base.py	/^verbose = False$/;"	v
version	src/pybind11/docs/conf.py	/^version = '2.2'$/;"	v
version	tools/genmsg/doc/conf.py	/^    version = root.findtext('version')$/;"	v
version_info	src/pybind11/pybind11/_version.py	/^version_info = (2, 2, 'dev0')$/;"	v
vh	src/pybind11/include/pybind11/cast.h	/^    void **vh;$/;"	m	struct:value_and_holder	typeref:typename:void **
view	src/pybind11/include/pybind11/buffer_info.h	/^    Py_buffer *view = nullptr;$/;"	m	struct:buffer_info	typeref:typename:Py_buffer *
view	src/pybind11/tests/test_eigen.cpp	/^        const Eigen::MatrixXd &view() { return mat; }$/;"	f	class:__anon898d062d0102::ReturnTester	typeref:typename:const Eigen::MatrixXd &	file:
viewPtr	src/pybind11/tests/test_eigen.cpp	/^        const Eigen::MatrixXd *viewPtr() { return &mat; }$/;"	f	class:__anon898d062d0102::ReturnTester	typeref:typename:const Eigen::MatrixXd *	file:
visit_helper	src/pybind11/include/pybind11/stl.h	/^struct visit_helper {$/;"	s
visitor	src/pybind11/tests/test_stl.cpp	/^    struct visitor {$/;"	s	function:TEST_SUBMODULE	file:
visitor	src/pybind11/tools/clang/cindex.py	/^        def visitor(child, parent, children):$/;"	f	member:Cursor.get_children	file:
visitor	src/pybind11/tools/clang/cindex.py	/^        def visitor(field, children):$/;"	f	member:Type.get_fields	file:
visitor	src/pybind11/tools/clang/cindex.py	/^        def visitor(fobj, lptr, depth, includes):$/;"	f	member:TranslationUnit.get_includes	file:
void_caster	src/pybind11/include/pybind11/cast.h	/^template<typename T> struct void_caster {$/;"	s
void_t	src/pybind11/include/pybind11/common.h	/^template <typename... Ts> using void_t = typename void_t_impl<Ts...>::type;$/;"	t	typeref:typename:void_t_impl<Ts...>::type
void_t_impl	src/pybind11/include/pybind11/common.h	/^template <typename...> struct void_t_impl { using type = void; };$/;"	s
void_type	src/pybind11/include/pybind11/common.h	/^struct void_type { };$/;"	s
w	src/pybind11/tests/test_stl_binders.cpp	/^    bool w;$/;"	m	struct:VStruct	typeref:typename:bool	file:
w	src/pybind11/tests/test_stl_binders.cpp	/^    bool w;$/;"	m	struct:VUndeclStruct	typeref:typename:bool	file:
wait_for_child	src/elka_comm/gnd_station/elka_devices.cpp	/^void elka::GroundPort::wait_for_child(Child *child) {$/;"	f	class:elka::GroundPort	typeref:typename:void
wait_for_child	src/elka_comm/posix/elka_devices.cpp	/^void elka::PX4Port::wait_for_child(Child *child) {$/;"	f	class:elka::PX4Port	typeref:typename:void
walk_preorder	src/pybind11/tools/clang/cindex.py	/^    def walk_preorder(self):$/;"	m	class:Cursor
weakref	src/pybind11/include/pybind11/pytypes.h	/^    explicit weakref(handle obj, handle callback = {})$/;"	f	class:weakref	typeref:typename:PYBIND11_OBJECT_DEFAULT (weakref,object,PyWeakref_Check)
weakref	src/pybind11/include/pybind11/pytypes.h	/^class weakref : public object {$/;"	c
weakrefs	src/pybind11/include/pybind11/common.h	/^    PyObject *weakrefs;$/;"	m	struct:instance	typeref:typename:PyObject *
what	src/pybind11/tests/test_exceptions.cpp	/^    virtual const char * what() const noexcept {return message.c_str();}$/;"	f	class:MyException3	typeref:typename:const char *	file:
win	serial/python/parse_vispy.py	/^win = pg.GraphicsWindow(title="Basic plotting examples")$/;"	v
window	serial/python/gui_start.py	/^    window = MainWindow()$/;"	v
write	src/elka_comm/qurt/snapdragon_uart_devices.cpp	/^int uart::UARTPort::write(elka_msg_s &elka_msg) {$/;"	f	class:uart::UARTPort	typeref:typename:int
write_elka_msg	src/elka_comm/qurt/basic_uart.cpp	/^int write_elka_msg(int fd, elka_msg_ack_s &elka_msg) {$/;"	f	typeref:typename:int
write_elka_msg	src/elka_comm/qurt/basic_uart.cpp	/^int write_elka_msg(int fd, elka_msg_s &elka_msg) {$/;"	f	typeref:typename:int
writeable	src/pybind11/include/pybind11/numpy.h	/^    bool writeable() const {$/;"	f	class:array	typeref:typename:bool
x	src/pybind11/tests/test_numpy_dtypes.cpp	/^    bool x;$/;"	m	struct:CompareStruct	typeref:typename:bool	file:
x	src/pybind11/tests/test_operator_overloading.cpp	/^    float x, y;$/;"	m	class:Vector2	typeref:typename:float	file:
x	src/pybind11/tests/test_stl_binders.cpp	/^    uint32_t x;$/;"	m	struct:VStruct	typeref:typename:uint32_t	file:
x	src/pybind11/tests/test_stl_binders.cpp	/^    uint32_t x;$/;"	m	struct:VUndeclStruct	typeref:typename:uint32_t	file:
xml	src/pybind11/docs/Makefile	/^xml:$/;"	t
y	src/pybind11/tests/test_numpy_dtypes.cpp	/^    uint32_t y;$/;"	m	struct:CompareStruct	typeref:typename:uint32_t	file:
y	src/pybind11/tests/test_operator_overloading.cpp	/^    float x, y;$/;"	m	class:Vector2	typeref:typename:float	file:
y	src/pybind11/tests/test_stl_binders.cpp	/^    double y;$/;"	m	struct:VStruct	typeref:typename:double	file:
y	src/pybind11/tests/test_stl_binders.cpp	/^    double y;$/;"	m	struct:VUndeclStruct	typeref:typename:double	file:
z	src/pybind11/tests/test_numpy_dtypes.cpp	/^    float z;$/;"	m	struct:CompareStruct	typeref:typename:float	file:
z	src/pybind11/tests/test_stl_binders.cpp	/^    bool z;$/;"	m	struct:VStruct	typeref:typename:bool	file:
z	src/pybind11/tests/test_stl_binders.cpp	/^    bool z;$/;"	m	struct:VUndeclStruct	typeref:typename:bool	file:
~A	src/pybind11/tests/test_modules.cpp	/^    ~A() { print_destroyed(this); }$/;"	f	class:A	file:
~A	src/pybind11/tests/test_smart_ptr.cpp	/^        ~A() { print_destroyed(this); }$/;"	f	struct:SharedPtrRef::A	file:
~A	src/pybind11/tests/test_virtual_functions.cpp	/^        virtual ~A() {}$/;"	f	struct:TEST_SUBMODULE::A	file:
~A2	src/pybind11/tests/test_virtual_functions.cpp	/^        virtual ~A2() {}$/;"	f	struct:TEST_SUBMODULE::A2	file:
~ArrayClass	src/pybind11/tests/test_numpy_array.cpp	/^        ~ArrayClass() { py::print("~ArrayClass()"); }$/;"	f	struct:__anon9558b93c0102::ArrayClass	file:
~B	src/pybind11/tests/test_modules.cpp	/^    ~B() { print_destroyed(this); }$/;"	f	class:B	file:
~B	src/pybind11/tests/test_smart_ptr.cpp	/^        ~B() { print_destroyed(this); }$/;"	f	struct:SharedFromThisRef::B	file:
~BaseClass	src/pybind11/tests/test_class.cpp	/^    struct BaseClass { virtual ~BaseClass() {} };$/;"	f	struct:TEST_SUBMODULE::BaseClass	file:
~C	src/pybind11/tests/test_smart_ptr.cpp	/^        ~C() { print_destroyed(this); }$/;"	f	struct:__anon0cf8aa410302::C	file:
~Child	src/pybind11/tests/test_call_policies.cpp	/^    ~Child() { py::print("Releasing child."); }$/;"	f	class:Child	file:
~CommPort	src/elka_comm/common/elka_comm.cpp	/^elka::CommPort::~CommPort() {$/;"	f	class:elka::CommPort
~CopyOnlyInt	src/pybind11/tests/test_copy_move.cpp	/^    ~CopyOnlyInt() { print_destroyed(this); }$/;"	f	class:CopyOnlyInt	file:
~CustomGuard	src/pybind11/tests/test_call_policies.cpp	/^    ~CustomGuard() { enabled = false; }$/;"	f	struct:CustomGuard	file:
~DependentGuard	src/pybind11/tests/test_call_policies.cpp	/^    ~DependentGuard() { enabled = false; }$/;"	f	struct:DependentGuard	file:
~DestructionTester	src/pybind11/tests/test_methods_and_attributes.cpp	/^    ~DestructionTester() { print_destroyed(this); }$/;"	f	class:DestructionTester	file:
~DynamicClass	src/pybind11/tests/test_methods_and_attributes.cpp	/^    ~DynamicClass() { print_destroyed(this); }$/;"	f	class:DynamicClass	file:
~ElkaBufferMsg	src/elka_comm/common/elka_comm.cpp	/^elka::ElkaBufferMsg::~ElkaBufferMsg() {$/;"	f	class:elka::ElkaBufferMsg
~ExampleMandA	src/pybind11/tests/test_methods_and_attributes.cpp	/^    ~ExampleMandA() { print_destroyed(this); }$/;"	f	class:ExampleMandA	file:
~ExampleVirt	src/pybind11/tests/test_virtual_functions.cpp	/^    ~ExampleVirt() { print_destroyed(this); }$/;"	f	class:ExampleVirt	file:
~GroundPort	src/elka_comm/gnd_station/elka_devices.cpp	/^elka::GroundPort::~GroundPort() {$/;"	f	class:elka::GroundPort
~Manager	src/elka_comm/posix/elka_manager.cpp	/^elka::Manager::~Manager() {$/;"	f	class:elka::Manager
~Manager	src/elka_comm/qurt/snapdragon_uart_manager.cpp	/^uart::Manager::~Manager() {$/;"	f	class:uart::Manager
~Matrix	src/pybind11/tests/test_buffers.cpp	/^    ~Matrix() {$/;"	f	class:Matrix	file:
~Movable	src/pybind11/tests/test_virtual_functions.cpp	/^    ~Movable() { print_destroyed(this); }$/;"	f	class:Movable	file:
~MoveOnlyInt	src/pybind11/tests/test_copy_move.cpp	/^    ~MoveOnlyInt() { print_destroyed(this); }$/;"	f	class:MoveOnlyInt	file:
~MoveOrCopyInt	src/pybind11/tests/test_copy_move.cpp	/^    ~MoveOrCopyInt() { print_destroyed(this); }$/;"	f	class:MoveOrCopyInt	file:
~MyObject1	src/pybind11/tests/test_smart_ptr.cpp	/^    virtual ~MyObject1() {$/;"	f	class:MyObject1	file:
~MyObject2	src/pybind11/tests/test_smart_ptr.cpp	/^    virtual ~MyObject2() {$/;"	f	class:MyObject2	file:
~MyObject3	src/pybind11/tests/test_smart_ptr.cpp	/^    virtual ~MyObject3() {$/;"	f	class:MyObject3	file:
~MyObject4	src/pybind11/tests/test_smart_ptr.cpp	/^    ~MyObject4() {$/;"	f	class:MyObject4	file:
~MyObject5	src/pybind11/tests/test_smart_ptr.cpp	/^    ~MyObject5() {$/;"	f	class:MyObject5	file:
~NoConstructor	src/pybind11/tests/test_class.cpp	/^        ~NoConstructor() { print_destroyed(this); }$/;"	f	struct:TEST_SUBMODULE::NoConstructor	file:
~NonCopyable	src/pybind11/tests/test_virtual_functions.cpp	/^    ~NonCopyable() { print_destroyed(this); }$/;"	f	class:NonCopyable	file:
~Object	src/pybind11/tests/object.h	/^    virtual ~Object() { print_destroyed(this); }$/;"	f	class:Object
~PX4Port	src/elka_comm/posix/elka_devices.cpp	/^elka::PX4Port::~PX4Port() {$/;"	f	class:elka::PX4Port
~Parent	src/pybind11/tests/test_call_policies.cpp	/^    ~Parent() { py::print("Releasing parent."); }$/;"	f	class:Parent	file:
~Payload	src/pybind11/tests/test_callbacks.cpp	/^    ~Payload() {$/;"	f	struct:Payload	file:
~PyA	src/pybind11/tests/test_virtual_functions.cpp	/^        ~PyA() { py::print("PyA.~PyA()"); }$/;"	f	struct:TEST_SUBMODULE::PyA	file:
~PyA2	src/pybind11/tests/test_virtual_functions.cpp	/^        ~PyA2() { py::print("PyA2.~PyA2()"); }$/;"	f	struct:TEST_SUBMODULE::PyA2	file:
~PythonCallInDestructor	src/pybind11/tests/test_exceptions.cpp	/^    ~PythonCallInDestructor() { d["good"] = true; }$/;"	f	struct:PythonCallInDestructor	file:
~ReturnTester	src/pybind11/tests/test_eigen.cpp	/^        ~ReturnTester() { print_destroyed(this); }$/;"	f	class:__anon898d062d0102::ReturnTester	file:
~Sequence	src/pybind11/tests/test_sequences_and_iterators.cpp	/^    ~Sequence() {$/;"	f	class:Sequence	file:
~SerialBuffer	src/elka_comm/common/elka_comm.cpp	/^elka::SerialBuffer::~SerialBuffer() {$/;"	f	class:elka::SerialBuffer
~UARTPort	src/elka_comm/qurt/snapdragon_uart_devices.cpp	/^uart::UARTPort::~UARTPort() {$/;"	f	class:uart::UARTPort
~Vector2	src/pybind11/tests/test_operator_overloading.cpp	/^    ~Vector2() { print_destroyed(this); }$/;"	f	class:Vector2	file:
~buffer_info	src/pybind11/include/pybind11/buffer_info.h	/^    ~buffer_info() {$/;"	f	struct:buffer_info
~error_already_set	src/pybind11/include/pybind11/pybind11.h	/^error_already_set::~error_already_set() {$/;"	f	class:error_already_set
~error_scope	src/pybind11/include/pybind11/common.h	/^    ~error_scope() { PyErr_Restore(type, value, trace); }$/;"	f	struct:error_scope
~gil_scoped_acquire	src/pybind11/include/pybind11/pybind11.h	/^    PYBIND11_NOINLINE ~gil_scoped_acquire() {$/;"	f	class:gil_scoped_acquire	typeref:typename:PYBIND11_NOINLINE
~gil_scoped_acquire	src/pybind11/include/pybind11/pybind11.h	/^    ~gil_scoped_acquire() { PyGILState_Release(state); }$/;"	f	class:gil_scoped_acquire
~gil_scoped_release	src/pybind11/include/pybind11/pybind11.h	/^    ~gil_scoped_release() { PyEval_RestoreThread(state); }$/;"	f	class:gil_scoped_release
~gil_scoped_release	src/pybind11/include/pybind11/pybind11.h	/^    ~gil_scoped_release() {$/;"	f	class:gil_scoped_release
~loader_life_support	src/pybind11/include/pybind11/cast.h	/^    ~loader_life_support() {$/;"	f	class:loader_life_support
~object	src/pybind11/include/pybind11/pytypes.h	/^    ~object() { dec_ref(); }$/;"	f	class:object
~options	src/pybind11/include/pybind11/options.h	/^    ~options() {$/;"	f	class:options
~px4_elka_msg	build_elka_data_collection/multi_topics_temporary/ubuntu/elka_msg.h	/^	~px4_elka_msg() {}$/;"	f	class:px4::px4_elka_msg
~px4_elka_msg	build_elka_data_collection/src/platforms/ubuntu/elka_messages/elka_elka_msg.h	/^	~px4_elka_msg() {}$/;"	f	class:px4::px4_elka_msg
~px4_elka_msg_ack	build_elka_data_collection/multi_topics_temporary/ubuntu/elka_msg_ack.h	/^	~px4_elka_msg_ack() {}$/;"	f	class:px4::px4_elka_msg_ack
~px4_elka_msg_ack	build_elka_data_collection/src/platforms/ubuntu/elka_messages/elka_elka_msg_ack.h	/^	~px4_elka_msg_ack() {}$/;"	f	class:px4::px4_elka_msg_ack
~ref	src/pybind11/tests/object.h	/^    ~ref() {$/;"	f	class:ref
~scoped_interpreter	src/pybind11/include/pybind11/embed.h	/^    ~scoped_interpreter() {$/;"	f	class:scoped_interpreter
